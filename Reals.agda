{-# OPTIONS --without-K --exact-split --safe #-}

open import SpartanMLTT renaming (_+_ to _‚äπ_ ; * to ‚ãÜ) --TypeTopology
open import Integers
open import DecidableAndDetachable
open import DiscreteAndSeparated
open import NaturalNumbers-Properties
open import UF-Base
open import UF-Subsingletons
open import UF-Miscelanea
open import UF-FunExt
open import IntegersProperties
open import UF-Subsingletons-FunExt
open import UF-Equiv
-- open import IntegersOrder

{-# BUILTIN INTEGER       ‚Ñ§       #-}
{-# BUILTIN INTEGERPOS    pos     #-}
{-# BUILTIN INTEGERNEGSUC negsucc #-}

module Reals (fe : FunExt) where

_+‚Ñï_ : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
a +‚Ñï 0 = a
a +‚Ñï succ b = succ (a +‚Ñï b)

1+‚Ñï : (a : ‚Ñï) ‚Üí 1 +‚Ñï a ‚â° succ a
1+‚Ñï zero = refl
1+‚Ñï (succ a) = ap succ (1+‚Ñï a)

0+‚Ñï : (a : ‚Ñï) ‚Üí 0 +‚Ñï a ‚â° a
0+‚Ñï zero = refl
0+‚Ñï (succ a) = ap succ (0+‚Ñï a)

+-pos : (a b : ‚Ñï) ‚Üí pos (a +‚Ñï b) ‚â° pos a + pos b
+-pos a 0 = refl
+-pos a (succ b) = ap succ‚Ñ§ (+-pos a b)

+-negsucc : (a b : ‚Ñï) ‚Üí negsucc (a +‚Ñï b) ‚â° succ‚Ñ§ (negsucc a + negsucc b)
+-negsucc a 0 = refl
+-negsucc a (succ b)
 = ap pred‚Ñ§  (+-negsucc a b)
 ‚àô predsucc‚Ñ§ (negsucc a +negsucc b)
 ‚àô succpred‚Ñ§ (negsucc a +negsucc b) ‚Åª¬π

+-pred-negsucc : (a b : ‚Ñï)
               ‚Üí pred‚Ñ§ (negsucc a) +pos b ‚â° pred‚Ñ§ (negsucc a +pos b)
+-pred-negsucc a zero = refl
+-pred-negsucc a (succ b) = ap succ‚Ñ§ (+-pred-negsucc a b)
                          ‚àô succpred‚Ñ§ _
                          ‚àô predsucc‚Ñ§ _ ‚Åª¬π

+-negsucc-pos : (a b : ‚Ñï) ‚Üí negsucc (a +‚Ñï b) +pos b ‚â° negsucc a
+-negsucc-pos a zero = refl
+-negsucc-pos a (succ b)
 = ap (Œª ‚îÄ ‚Üí succ‚Ñ§ ‚îÄ) (+-pred-negsucc (a +‚Ñï b) b)
 ‚àô succpred‚Ñ§ (negsucc (a +‚Ñï b) +pos b)
 ‚àô +-negsucc-pos a b
 
succ+‚Ñï : (a b : ‚Ñï) ‚Üí succ (a +‚Ñï b) ‚â° succ a +‚Ñï b
succ+‚Ñï a zero = refl
succ+‚Ñï a (succ b) = ap succ (succ+‚Ñï a b)

+‚Ñï-comm : (a b : ‚Ñï) ‚Üí a +‚Ñï b ‚â° b +‚Ñï a
+‚Ñï-comm zero zero = refl
+‚Ñï-comm (succ a) zero = ap succ (+‚Ñï-comm a 0)
+‚Ñï-comm zero (succ b) = ap succ (+‚Ñï-comm 0 b)
+‚Ñï-comm (succ a) (succ b) = ap succ (succ+‚Ñï a b ‚Åª¬π ‚àô ap succ (+‚Ñï-comm a b) ‚àô succ+‚Ñï b a)

succ+‚Ñ§ : (a b : ‚Ñ§) ‚Üí succ‚Ñ§ (a + b) ‚â° succ‚Ñ§ a + b
succ+‚Ñ§ a (pos zero) = refl
succ+‚Ñ§ a (pos (succ x))
 = ap succ‚Ñ§ (succ+‚Ñ§ a (pos x))
succ+‚Ñ§ a (negsucc zero)
 = succpred‚Ñ§ _ ‚àô predsucc‚Ñ§ _ ‚Åª¬π
succ+‚Ñ§ a (negsucc (succ x))
 = succpred‚Ñ§ _ ‚àô predsucc‚Ñ§ _ ‚Åª¬π ‚àô ap pred‚Ñ§ (succ+‚Ñ§ a (negsucc x))

from-zero : ‚Ñ§ ‚Üí ‚Ñ§
from-zero (pos n) = pos (succ n)
from-zero (negsucc n) = negsucc (succ n)

Interval : ùì§‚ÇÄ Ãá
Interval = ‚Ñ§ √ó ‚Ñ§
-- ‚ü¶ (k , p) ‚üß = [k/2·µñ‚Å∫¬π , (k+2)/2·µñ‚Å∫¬π]

_/2 : ‚Ñï ‚Üí ‚Ñï
0 /2 = 0
1 /2 = 0
succ (succ n) /2 = succ (n /2)

con : ‚Ñ§ ‚Üí (‚Ñï ‚Üí ‚Ñ§)
con (pos _) = pos
con (negsucc _) = negsucc

num : ‚Ñ§ ‚Üí ‚Ñï
num (pos n) = n
num (negsucc n) = n

‚àí_ : Interval ‚Üí Interval
‚àí (k , p) = (negsucc 1 - k , p)

downLeft downMid downRight upRight : ‚Ñ§ ‚Üí ‚Ñ§
downLeft  k           = k + k          
downMid   k           = k + k + pos 1  
downRight k           = k + k + pos 2  
upRight   k           = con k (num k /2)

upRight‚Åø : ‚Ñ§ ‚Üí ‚Ñï ‚Üí ‚Ñ§
upRight‚Åø k 0 = k
upRight‚Åø k (succ n) = upRight (upRight‚Åø k n)

_‚â§‚Ñ§_ : (a b : ‚Ñ§) ‚Üí ùì§‚ÇÄ Ãá
a ‚â§‚Ñ§ b = Œ£ c Íûâ ‚Ñï , a + pos c ‚â° b

_<‚Ñ§_ : (a b : ‚Ñ§) ‚Üí ùì§‚ÇÄ Ãá
a <‚Ñ§ b = succ‚Ñ§ a ‚â§‚Ñ§ b

_<‚Ñï_ : ‚Ñï ‚Üí ‚Ñï ‚Üí ùì§‚ÇÄ Ãá
a <‚Ñï b = Œ£ c Íûâ ‚Ñï , succ a +‚Ñï c ‚â° b

<‚Ñï-succ : (a b : ‚Ñï) ‚Üí a <‚Ñï b ‚Üí succ a <‚Ñï succ b
<‚Ñï-succ a b (d , e) = d , (succ+‚Ñï (succ a) d ‚Åª¬π ‚àô ap succ e)

pos-< : (a b : ‚Ñï) ‚Üí a <‚Ñï b ‚Üí pos a <‚Ñ§ pos b
pos-< a b (d , e) = d , (+-pos (succ a) d ‚Åª¬π ‚àô ap pos e)

‚Ñï-trich : (a b : ‚Ñï) ‚Üí (a <‚Ñï b) ‚äπ (a ‚â° b) ‚äπ (b <‚Ñï a)
‚Ñï-trich zero zero = inr (inl refl)
‚Ñï-trich zero (succ b) = inl (b , 1+‚Ñï b)
‚Ñï-trich (succ a) zero = (inr ‚àò inr) (a , 1+‚Ñï a)
‚Ñï-trich (succ a) (succ b)
 = Cases (‚Ñï-trich a b)
   (inl ‚àò <‚Ñï-succ a b)
   (cases
   (inr ‚àò inl ‚àò ap succ)
   (inr ‚àò inr ‚àò <‚Ñï-succ b a))

assoc+‚Ñ§‚Ñï : ‚àÄ a b c ‚Üí a +pos (b +‚Ñï c) ‚â° (a +pos b) +pos c
assoc+‚Ñ§‚Ñï a b zero = refl
assoc+‚Ñ§‚Ñï a b (succ c) = ap succ‚Ñ§ (assoc+‚Ñ§‚Ñï a b c)

<‚Ñ§-trans : {a b c : ‚Ñ§} ‚Üí a <‚Ñ§ b ‚Üí b <‚Ñ§ c ‚Üí a <‚Ñ§ c
<‚Ñ§-trans {a} {b} {c} (d‚ÇÅ , e‚ÇÅ) (d‚ÇÇ , e‚ÇÇ)
 = (d‚ÇÅ +‚Ñï (succ d‚ÇÇ))
 , (assoc+‚Ñ§‚Ñï (succ‚Ñ§ a) d‚ÇÅ (succ d‚ÇÇ)
 ‚àô (ap succ‚Ñ§ (ap (_+pos d‚ÇÇ) e‚ÇÅ) ‚àô succ+‚Ñ§ b (pos d‚ÇÇ))
 ‚àô e‚ÇÇ)

negsucc<‚àí1 : (a : ‚Ñï) ‚Üí negsucc (succ a) <‚Ñ§ negsucc 0
negsucc<‚àí1 zero = 0 , refl
negsucc<‚àí1 (succ a) = <‚Ñ§-trans (0 , refl) (negsucc<‚àí1 a)

‚àí1<pos : (a : ‚Ñï) ‚Üí negsucc 0 <‚Ñ§ pos a
‚àí1<pos zero = zero , refl
‚àí1<pos (succ a) = <‚Ñ§-trans {negsucc 0} (‚àí1<pos a) (0 , refl)

negsucc<pos : (a b : ‚Ñï) ‚Üí negsucc a <‚Ñ§ pos b
negsucc<pos 0 b = ‚àí1<pos b
negsucc<pos (succ a) b = <‚Ñ§-trans (negsucc<‚àí1 a) (‚àí1<pos b)

a<b-negsucc : (a b : ‚Ñï)
            ‚Üí negsucc a <‚Ñ§ negsucc b
            ‚Üí negsucc (succ a) <‚Ñ§ negsucc (succ b)
a<b-negsucc a b (d , e)
 = d , (predsucc‚Ñ§ _ ‚Åª¬π
     ‚àô ap pred‚Ñ§ (succ+‚Ñ§ (negsucc a) (pos d) ‚àô e))

a<b-negsucc‚Åª¬π : (a b : ‚Ñï)
              ‚Üí negsucc (succ a) <‚Ñ§ negsucc (succ b)
              ‚Üí negsucc a <‚Ñ§ negsucc b
a<b-negsucc‚Åª¬π a b (d , e)
 = d , (succ+‚Ñ§ (negsucc a) (pos d) ‚Åª¬π
     ‚àô ap succ‚Ñ§ e)

casta<b : ‚àÄ a b ‚Üí a <‚Ñï b ‚Üí
      (negsucc a <‚Ñ§ negsucc b) ‚äπ
      (negsucc a ‚â° negsucc b) ‚äπ (negsucc b <‚Ñ§ negsucc a)
casta<b zero zero (zero , ())
casta<b zero zero (succ d , ())
casta<b zero (succ b) (d , e) = (inr ‚àò inr) (negsucc<‚àí1 b)
casta<b (succ a) zero (d , e) = inl (negsucc<‚àí1 a)
casta<b (succ a) (succ b) (d , e)
 = Cases (casta<b a b (d , ap pred (succ+‚Ñï (succ a) d ‚àô e)))
     (inl ‚àò a<b-negsucc a b)
     (cases
     (inr ‚àò inl ‚àò ap from-zero)
     (inr ‚àò inr ‚àò a<b-negsucc b a))

trichotomous‚àô : {X : ùì§ Ãá } (_<_ : X ‚Üí X ‚Üí ùì• Ãá ) ‚Üí X ‚Üí X ‚Üí ùì§ ‚äî ùì• Ãá
trichotomous‚àô _<_ a b = (a < b) ‚äπ (a ‚â° b) ‚äπ (b < a)

trichotomous : {X : ùì§ Ãá } (_<_ : X ‚Üí X ‚Üí ùì• Ãá ) ‚Üí ùì§ ‚äî ùì• Ãá 
trichotomous _<_ = ‚àÄ a b ‚Üí trichotomous‚àô _<_ a b

‚Ñ§-trich : trichotomous _<‚Ñ§_
‚Ñ§-trich (pos a) (pos b)
 = Cases (‚Ñï-trich a b)
   (inl ‚àò pos-< a b)
   (cases
   (inr ‚àò inl ‚àò ap pos)
   (inr ‚àò inr ‚àò pos-< b a))
‚Ñ§-trich (pos a) (negsucc b)
 = (inr ‚àò inr) (negsucc<pos b a)
‚Ñ§-trich (negsucc a) (pos b)
 = inl (negsucc<pos a b)
‚Ñ§-trich (negsucc a) (negsucc b)
 = Cases (‚Ñï-trich a b)
   (casta<b a b)
   (cases
   (inr ‚àò inl ‚àò ap negsucc)
   (Œª f ‚Üí Cases (casta<b b a f) (inr ‚àò inr)
     (cases
     (inr ‚àò inl ‚àò _‚Åª¬π)
     inl)))

data ùüõ : ùì§‚ÇÄ Ãá where
  ‚àí1 O +1 : ùüõ

ùüõ·¥∫ = ‚Ñï ‚Üí ùüõ

down : ùüõ ‚Üí (‚Ñ§ ‚Üí ‚Ñ§)
down ‚àí1 = downLeft
down  O = downMid
down +1 = downRight

[-1,1]œÅ : Interval
[-1,1]œÅ = (negsucc 0 , negsucc 0)

-- [      Œ± n      ]

-- [ Œ±‚Çõ n ][  Œ±‚Çõ n ]
--     [ Œ±‚Çõ n  ]

_-immediatelyDownFrom-_ : ‚Ñ§ ‚Üí ‚Ñ§ ‚Üí ùì§‚ÇÄ Ãá
i -immediatelyDownFrom- j
 = (i ‚â° downLeft j) ‚äπ (i ‚â° downMid j) ‚äπ (i ‚â° downRight j)

RealœÅ : ùì§‚ÇÄ Ãá
RealœÅ = Œ£ x Íûâ (‚Ñ§ ‚Üí ‚Ñ§) , Œ† n Íûâ ‚Ñ§ , (x n) -immediatelyDownFrom- (x (pred‚Ñ§ n))
-- RealœÅ would be the pre-set
-- + an equivalence relation ‚Üí Setoid (Set in Bishop)

CompactIntervalœÅ : Interval ‚Üí ùì§‚ÇÄ Ãá
CompactIntervalœÅ (k , p)
 = Œ£ Œ± Íûâ (‚Ñï ‚Üí ‚Ñ§)  , (Œ± 0 -immediatelyDownFrom- k)
 √ó (Œ† n Íûâ ‚Ñï , Œ± (succ n) -immediatelyDownFrom- Œ± n)

downLeftIsDown : (i : ‚Ñ§) ‚Üí downLeft i -immediatelyDownFrom- i
downLeftIsDown i = inl refl

downMidIsDown : (i : ‚Ñ§) ‚Üí downMid i -immediatelyDownFrom- i
downMidIsDown i = (inr ‚àò inl) refl

downRightIsDown : (i : ‚Ñ§) ‚Üí downRight i -immediatelyDownFrom- i
downRightIsDown i = (inr ‚àò inr) refl

downIsDown : (i : ‚Ñ§) (b : ùüõ) ‚Üí down b i -immediatelyDownFrom- i
downIsDown i ‚àí1 = downLeftIsDown  i
downIsDown i  O = downMidIsDown   i
downIsDown i +1 = downRightIsDown i

downFromUpRight : (i : ‚Ñ§) ‚Üí i -immediatelyDownFrom- upRight i
downFromUpRight i
 = Cases (upRightEq i)
     (Œª e ‚Üí transport (_-immediatelyDownFrom- upRight i)
              (e ‚Åª¬π) (downLeftIsDown (upRight i)))
     (Œª e ‚Üí transport (_-immediatelyDownFrom- upRight i)
              (e ‚Åª¬π) (downMidIsDown (upRight i)))
  where
    halfEq : (n : ‚Ñï) ‚Üí (n ‚â° (n /2) +‚Ñï (n /2)) ‚äπ (n ‚â° succ ((n /2) +‚Ñï (n /2)))
    halfEq 0 = inl refl
    halfEq 1 = inr refl
    halfEq (succ (succ n))
      = Cases (halfEq n)
          (Œª f ‚Üí inl (ap (succ ‚àò succ) f ‚àô ap succ (succ+‚Ñï (n /2) (n /2))))
          (Œª g ‚Üí inr (ap (succ ‚àò succ) g ‚àô ap succ (succ+‚Ñï (n /2) (succ (n /2)))))
    upRightEq : (i : ‚Ñ§) ‚Üí (i ‚â° downLeft (upRight i)) ‚äπ (i ‚â° downMid (upRight i))
    upRightEq (pos k)
      = Cases (halfEq k)
          (Œª f ‚Üí inl (ap pos f ‚àô +-pos (k /2) (k /2)))
          (Œª g ‚Üí inr (ap pos g ‚àô ap succ‚Ñ§ (+-pos (k /2) (k /2))))
    upRightEq (negsucc k)
      = Cases (halfEq k)
          (Œª f ‚Üí inr (ap negsucc f ‚àô +-negsucc (k /2) (k /2)))
          (Œª g ‚Üí inl (ap negsucc g ‚àô ap pred‚Ñ§ (+-negsucc (k /2) (k /2))
                                   ‚àô predsucc‚Ñ§ (negsucc (k /2) +negsucc (k /2))))

‚Ñ§-trich-prec : {n p : ‚Ñ§} ‚Üí trichotomous‚àô _<‚Ñ§_ n p ‚Üí trichotomous‚àô _<‚Ñ§_ (pred‚Ñ§ n) p 
‚Ñ§-trich-prec {n} {p} (inl (d , e))
 = inl (succ d , (ap (Œª ‚îÄ ‚Üí succ‚Ñ§ (‚îÄ +pos d)) (succpred‚Ñ§ n) ‚àô succ+‚Ñ§ n (pos d) ‚àô e))
‚Ñ§-trich-prec {n} {.n} (inr (inl refl))
 = inl (0 , succpred‚Ñ§ n)
‚Ñ§-trich-prec {n} {p} (inr (inr (0 , e)))
 = inr (inl (ap pred‚Ñ§ (e ‚Åª¬π) ‚àô predsucc‚Ñ§ p))
‚Ñ§-trich-prec {n} {p} (inr (inr (succ d , e)))
 = inr (inr (d , succ‚Ñ§-lc (e ‚àô succpred‚Ñ§ n ‚Åª¬π)))

succn‚â¢n : {n : ‚Ñ§} ‚Üí succ‚Ñ§ n ‚â¢ n
succn‚â¢n {negsucc 0} ()
succn‚â¢n {negsucc (succ x)} ()

add-unique-0 : (n d : ‚Ñ§) ‚Üí n + d ‚â° n ‚Üí d ‚â° pos 0
add-unique-0 n d e = ‚Ñ§+-lc d (pos 0) (n +pos 0) e

succ‚â¢0 : {n : ‚Ñï} ‚Üí succ n ‚â¢ 0
succ‚â¢0 {n} ()

add-nonzero-not-equal : (n : ‚Ñ§) (d : ‚Ñï) ‚Üí n +pos (succ d) ‚â¢ n
add-nonzero-not-equal n 0 = succn‚â¢n
add-nonzero-not-equal n (succ d) e
 = succ‚â¢0 (pos-lc (add-unique-0 n (pos (succ (succ d))) e))

downLeft‚â¢downMid : (k : ‚Ñ§) ‚Üí downLeft k ‚â¢ downMid k
downLeft‚â¢downMid k e = ùüò-elim (add-nonzero-not-equal (k + k) 0 (e ‚Åª¬π))

downMid‚â¢downRight : (k : ‚Ñ§) ‚Üí downMid k ‚â¢ downRight k
downMid‚â¢downRight k e = ùüò-elim (add-nonzero-not-equal (succ‚Ñ§ (k + k)) 0 (e ‚Åª¬π))

downLeft‚â¢downRight : (k : ‚Ñ§) ‚Üí downLeft k ‚â¢ downRight k
downLeft‚â¢downRight k e = ùüò-elim (add-nonzero-not-equal (k + k) 1 (e ‚Åª¬π))

immediatelyDown-isProp : (i j : ‚Ñ§) ‚Üí is-prop (i -immediatelyDownFrom- j)
immediatelyDown-isProp i j = +-is-prop ‚Ñ§-is-set
                               (+-is-prop ‚Ñ§-is-set ‚Ñ§-is-set
                                 (Œª x y ‚Üí downMid‚â¢downRight j (x ‚Åª¬π ‚àô y)))
                                (Œª x ‚Üí cases
                                  (Œª y ‚Üí downLeft‚â¢downMid j (x ‚Åª¬π ‚àô y))
                                  (Œª y ‚Üí downLeft‚â¢downRight j (x ‚Åª¬π ‚àô y))) 

+pos-lc : ‚àÄ a b c ‚Üí a +pos b ‚â° a +pos c ‚Üí b ‚â° c
+pos-lc a zero zero e = refl
+pos-lc a zero (succ c) e = ùüò-elim (add-nonzero-not-equal a c (e ‚Åª¬π))
+pos-lc a (succ b) zero e = ùüò-elim (add-nonzero-not-equal a b e)
+pos-lc a (succ b) (succ c) e
 = ap succ (+pos-lc (succ‚Ñ§ a) _ _ (succ+‚Ñ§ a (pos b) ‚Åª¬π ‚àô e ‚àô succ+‚Ñ§ a (pos c)))

<‚Ñ§-is-prop : (n p : ‚Ñ§) ‚Üí is-prop (n <‚Ñ§ p)
<‚Ñ§-is-prop n p (d‚ÇÅ , e‚ÇÅ) (d‚ÇÇ , e‚ÇÇ) = to-Œ£-‚â° (Œ≥‚ÇÅ , (‚Ñ§-is-set _ _)) where
  Œ≥‚ÇÅ : d‚ÇÅ ‚â° d‚ÇÇ
  Œ≥‚ÇÅ = +pos-lc (succ‚Ñ§ n) d‚ÇÅ d‚ÇÇ (e‚ÇÅ ‚àô e‚ÇÇ ‚Åª¬π)

‚Ñ§-trich-is-prop : (n p : ‚Ñ§) ‚Üí is-prop (trichotomous‚àô _<‚Ñ§_ n p)
‚Ñ§-trich-is-prop n p
 = +-is-prop (<‚Ñ§-is-prop n p)
    (+-is-prop ‚Ñ§-is-set (<‚Ñ§-is-prop p n) Œ≥)
    (Œª n<p ‚Üí cases (Œ¥ n<p) (Œ∂ n<p))
 where
   Œ¥ : {n p : ‚Ñ§} ‚Üí n <‚Ñ§ p ‚Üí ¬¨ (n ‚â° p)
   Œ¥ {n} {.n} (d , e‚ÇÅ) refl = add-nonzero-not-equal n d (succ+‚Ñ§ n (pos d) ‚àô e‚ÇÅ)
   Œ∂ : {n p : ‚Ñ§} ‚Üí n <‚Ñ§ p ‚Üí ¬¨ (p <‚Ñ§ n)
   Œ∂ {n} {p} (d‚ÇÅ , e‚ÇÅ) (d‚ÇÇ , e‚ÇÇ) = add-nonzero-not-equal n (succ (d‚ÇÅ +‚Ñï d‚ÇÇ)) (y ‚àô x) where
     x : succ‚Ñ§ (succ‚Ñ§ n +pos d‚ÇÅ) +pos d‚ÇÇ ‚â° n
     x = ap (Œª ‚îÄ ‚Üí succ‚Ñ§ ‚îÄ +pos d‚ÇÇ) e‚ÇÅ ‚àô e‚ÇÇ
     y : (n +pos succ (succ (d‚ÇÅ +‚Ñï d‚ÇÇ))) ‚â° succ‚Ñ§ (succ‚Ñ§ n +pos d‚ÇÅ) +pos d‚ÇÇ
     y = ap succ‚Ñ§
         (ap (Œª ‚îÄ ‚Üí n +pos ‚îÄ) (succ+‚Ñï d‚ÇÅ d‚ÇÇ)
         ‚àô assoc+‚Ñ§‚Ñï n (succ d‚ÇÅ) d‚ÇÇ
         ‚àô ap (_+pos d‚ÇÇ) (succ+‚Ñ§ n (pos d‚ÇÅ)))
       ‚àô succ+‚Ñ§ (succ‚Ñ§ n +pos d‚ÇÅ) (pos d‚ÇÇ)
   Œ≥ : {n p : ‚Ñ§} ‚Üí n ‚â° p ‚Üí ¬¨ (p <‚Ñ§ n)
   Œ≥ {n} {.n} refl (d , e) = add-nonzero-not-equal n d (succ+‚Ñ§ n (pos d) ‚àô e)

CompactToRealœÅ : (i : Interval) ‚Üí CompactIntervalœÅ i ‚Üí RealœÅ
CompactToRealœÅ (k , p) (Œ± , f , g)
 = (Œª n ‚Üí Œ≤ n (‚Ñ§-trich n p)) , (Œª n ‚Üí Œ≥ n (‚Ñ§-trich n p))  where
  Œ≤ : (n : ‚Ñ§) ‚Üí (n <‚Ñ§ p) ‚äπ (n ‚â° p) ‚äπ (p <‚Ñ§ n) ‚Üí ‚Ñ§
  Œ≤ n (inl (d , _))       = upRight‚Åø k (succ d)
  Œ≤ n (inr (inl _))       = k
  Œ≤ n (inr (inr (d , _))) = Œ± d
  Œ¥ : (n : ‚Ñ§) ‚Üí (e : (n <‚Ñ§ p) ‚äπ (n ‚â° p) ‚äπ (p <‚Ñ§ n))
    ‚Üí Œ≤ n e -immediatelyDownFrom-
      Œ≤ (pred‚Ñ§ n) (‚Ñ§-trich-prec e)
  Œ¥ n (inl (d , e))            = downFromUpRight (Œ≤ n (inl (d , e)))
  Œ¥ n (inr (inl refl))         = downFromUpRight (Œ≤ n (inr (inl refl)))
  Œ¥ n (inr (inr (0 , e)))      = f
  Œ¥ n (inr (inr (succ d , e))) = g d
  Œ≥ : (n : ‚Ñ§) ‚Üí (n <‚Ñ§ p) ‚äπ (n ‚â° p) ‚äπ (p <‚Ñ§ n)
    ‚Üí Œ≤ n (‚Ñ§-trich n p) -immediatelyDownFrom-
      Œ≤ (pred‚Ñ§ n) (‚Ñ§-trich (pred‚Ñ§ n) p)
  Œ≥ n e
   = transport
       (Œª ‚îÄ ‚Üí Œ≤ n ‚îÄ -immediatelyDownFrom- Œ≤ (pred‚Ñ§ n) (‚Ñ§-trich (pred‚Ñ§ n) p))
       (‚Ñ§-trich-is-prop n p e (‚Ñ§-trich n p))
       (transport
       (Œª ‚îÄ ‚Üí Œ≤ n e -immediatelyDownFrom- Œ≤ (pred‚Ñ§ n) ‚îÄ)
       (‚Ñ§-trich-is-prop (pred‚Ñ§ n) p (‚Ñ§-trich-prec e) (‚Ñ§-trich (pred‚Ñ§ n) p))
       (Œ¥ n e))
       
-- Œ∏ = k , down (Œ± 0) k , down (Œ± 1) (down (Œ± 0) k) ...
-- Œ≤ =     down (Œ± 0) k , down (Œ± 1) (down (Œ± 0) k) ...
Œ∏ : ‚Ñ§ ‚Üí ùüõ·¥∫ ‚Üí (‚Ñï ‚Üí ‚Ñ§)
Œ∏ k Œ± 0 = k
Œ∏ k Œ± (succ n) = down (Œ± n) (Œ∏ k Œ± n)
Œ≤ : ‚Ñ§ ‚Üí ùüõ·¥∫ ‚Üí (‚Ñï ‚Üí ‚Ñ§)
Œ≤ k Œ± = Œ∏ k Œ± ‚àò succ
Œ≥* : (k : ‚Ñ§) (Œ± : ‚Ñï ‚Üí ùüõ) (n : ‚Ñï) ‚Üí Œ≤ k Œ± n -immediatelyDownFrom- Œ∏ k Œ± n
Œ≥* k Œ± n = downIsDown (Œ∏ k Œ± n) (Œ± n)

SignedToCompact : (i : Interval) ‚Üí ùüõ·¥∫ ‚Üí CompactIntervalœÅ i
SignedToCompact (k , _) Œ± = Œ≤ k Œ± , Œ≥* k Œ± 0 , Œ≥* k Œ± ‚àò succ

down-to-ùüõ : (i j : ‚Ñ§) ‚Üí i -immediatelyDownFrom- j ‚Üí ùüõ
down-to-ùüõ i j (inl _)       = ‚àí1
down-to-ùüõ i j (inr (inl _)) =  O
down-to-ùüõ i j (inr (inr _)) = +1

CompactToSigned : (i : Interval) ‚Üí CompactIntervalœÅ i ‚Üí ùüõ·¥∫
CompactToSigned (k , _) (Œ± , Œ¥ , Œ≥) 0        = down-to-ùüõ (Œ± 0) k Œ¥
CompactToSigned (k , _) (Œ± , Œ¥ , Œ≥) (succ n) = down-to-ùüõ (Œ± (succ n)) (Œ± n) (Œ≥ n)

down-eq‚ÇÅ : (k : ‚Ñ§) (b : ùüõ) (f : down b k -immediatelyDownFrom- k)
         ‚Üí down-to-ùüõ (down b k) k f ‚â° b
down-eq‚ÇÅ k ‚àí1 (inl _)       = refl
down-eq‚ÇÅ k ‚àí1 (inr (inl e)) = ùüò-elim (add-nonzero-not-equal (k + k) 0 (e ‚Åª¬π))
down-eq‚ÇÅ k ‚àí1 (inr (inr e)) = ùüò-elim (add-nonzero-not-equal (k + k) 1 (e ‚Åª¬π))
down-eq‚ÇÅ k  O (inl e)       = ùüò-elim (add-nonzero-not-equal (k + k) 0 e)
down-eq‚ÇÅ k  O (inr (inl _)) = refl
down-eq‚ÇÅ k  O (inr (inr e)) = ùüò-elim (add-nonzero-not-equal (succ‚Ñ§ (k + k)) 0 (e ‚Åª¬π))
down-eq‚ÇÅ k +1 (inl e)       = ùüò-elim (add-nonzero-not-equal (k + k) 1 e)
down-eq‚ÇÅ k +1 (inr (inl e)) = ùüò-elim (add-nonzero-not-equal (succ‚Ñ§ (k + k)) 0 e)
down-eq‚ÇÅ k +1 (inr (inr _)) = refl

Compact-id : (i : Interval) ‚Üí CompactToSigned i ‚àò SignedToCompact i ‚àº id
Compact-id (k , p) Œ± = dfunext (fe _ _) Œ≥ where
  Œ≥ : (CompactToSigned (k , p) ‚àò SignedToCompact (k , p)) Œ± ‚àº Œ±
  Œ≥ zero = down-eq‚ÇÅ k (Œ± zero) (downIsDown k (Œ± zero))
  Œ≥ (succ n) = down-eq‚ÇÅ (down (Œ± n) _) (Œ± (succ n)) (downIsDown (down (Œ± n) _) (Œ± (succ n)))

down-eq‚ÇÇ : (k : ‚Ñ§) (n : ‚Ñ§) (f : n -immediatelyDownFrom- k)
        ‚Üí down (down-to-ùüõ n k f) k ‚â° n
down-eq‚ÇÇ k n (inl x)       = x ‚Åª¬π
down-eq‚ÇÇ k n (inr (inl x)) = x ‚Åª¬π
down-eq‚ÇÇ k n (inr (inr x)) = x ‚Åª¬π

Signed-id : (i : Interval) ‚Üí SignedToCompact i ‚àò CompactToSigned i ‚àº id
Signed-id (k , p) (Œ± , Œ¥‚ÇÄ , Œ¥‚Çõ)
 = to-Œ£-‚â° ((dfunext (fe _ _) Œ≥)
 , (to-√ó-‚â° (immediatelyDown-isProp (Œ± 0) k _ _)
     (Œ†-is-prop (fe _ _) (Œª n ‚Üí immediatelyDown-isProp (Œ± (succ n)) (Œ± n)) _ _)))
 where
  Œ≥ : pr‚ÇÅ ((SignedToCompact (k , p) ‚àò CompactToSigned (k , p)) (Œ± , Œ¥‚ÇÄ , Œ¥‚Çõ)) ‚àº Œ±
  Œ≥ zero = down-eq‚ÇÇ k (Œ± 0) Œ¥‚ÇÄ
  Œ≥ (succ n) = ap (down (down-to-ùüõ (Œ± (succ n)) (Œ± n) (Œ¥‚Çõ n))) (Œ≥ n)
             ‚àô down-eq‚ÇÇ (Œ± n) (Œ± (succ n)) (Œ¥‚Çõ n)

equiv : Interval √ó ùüõ·¥∫ ‚âÉ Œ£ CompactIntervalœÅ
equiv = qinveq (Œª (i , Œ±) ‚Üí i , SignedToCompact i Œ±)
               ((Œª (i , c) ‚Üí i , CompactToSigned i c)
               , ((Œª (i , Œ±) ‚Üí to-√ó-‚â° refl (Compact-id i Œ±))
               , (Œª (i , c) ‚Üí to-Œ£-‚â° (refl , (Signed-id i c)))))

open import GenericConvergentSequence
open import Codistance fe

open sequences ‚Ñ§ ‚Ñ§-is-discrete

+-to-ùüö : {X : ùì§ Ãá } {Y : ùì• Ãá } ‚Üí X ‚äπ Y ‚Üí ùüö
+-to-ùüö (inl _) = ‚ÇÅ
+-to-ùüö (inr _) = ‚ÇÄ

C·¥ø : RealœÅ ‚Üí RealœÅ ‚Üí ‚Ñï‚àû
C·¥ø (Œ± , _) (Œ≤ , _) = codistance (Œ± ‚àò pos) (Œ≤ ‚àò pos)

C : (i : Interval) ‚Üí CompactIntervalœÅ i ‚Üí CompactIntervalœÅ i ‚Üí ‚Ñï‚àû
C i (Œ± , _) (Œ≤ , _) = codistance Œ± Œ≤

CauchySequence : {X : ùì§ Ãá } ‚Üí (‚Ñï ‚Üí (‚Ñï ‚Üí X)) ‚Üí (c : (‚Ñï ‚Üí X) ‚Üí (‚Ñï ‚Üí X) ‚Üí ‚Ñï‚àû) ‚Üí ùì§‚ÇÄ Ãá 
CauchySequence s c
 = Œ† Œµ Íûâ ‚Ñï , Œ£ N Íûâ ‚Ñï , ‚àÄ m n ‚Üí (N <‚Ñï m) √ó (N <‚Ñï n) ‚Üí under Œµ ‚â∫ c (s m) (s n)

has-limit : {X : ùì§ Ãá } ‚Üí (‚Ñï ‚Üí X) ‚Üí ùì§ Ãá
has-limit {X} s = Œ£ k Íûâ ‚Ñï , Œ† n Íûâ ‚Ñï , (k <‚Ñï n ‚Üí s k ‚â° s n)

complete : (s : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñ§) ‚Üí CauchySequence s codistance ‚Üí has-limit s
complete s c = {!!} -- impossible to prove

reverse : (s : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñ§) ‚Üí has-limit s ‚Üí CauchySequence s codistance
reverse s (k , l) Œµ
 = k , Œª m n (k<m , k<n)
     ‚Üí transport (under Œµ ‚â∫_)
         (infinitely-close-to-itself _ ‚Åª¬π
           ‚àô ap (codistance (s k)) (l n k<n)
           ‚àô ap (Œª ‚îÄ ‚Üí codistance ‚îÄ (s n)) (l m k<m))
         (‚àû-‚â∫-maximal Œµ)

f = Œª Œ± Œ≤ ‚Üí upRight (upRight (Œ± + Œ≤))

_‚â§‚Ñ§_‚â§‚Ñ§_ : ‚Ñ§ ‚Üí ‚Ñ§ ‚Üí ‚Ñ§ ‚Üí ùì§‚ÇÄ Ãá 
a ‚â§‚Ñ§ b ‚â§‚Ñ§ c = (a ‚â§‚Ñ§ b) √ó (b ‚â§‚Ñ§ c)

ff : (a b c d : ‚Ñ§) ‚Üí a -immediatelyDownFrom- c ‚Üí b -immediatelyDownFrom- d
   ‚Üí (downLeft (c + d)) ‚â§‚Ñ§ (a + b) ‚â§‚Ñ§ downRight (c + d + pos 1)
ff .(downLeft c) .(downLeft d) c d (inl refl) (inl refl)
 = (0 , {!!}) , {!!}
ff .(downLeft c) .(downMid d) c d (inl refl) (inr (inl refl)) = {!!}
ff .(downLeft c) .(downRight d) c d (inl refl) (inr (inr refl)) = {!!}
ff a b c d (inr e) (inl x) = {!!}
ff a b c d (inr (inl x)) (inr (inl x‚ÇÅ)) = {!!}
ff a b c d (inr (inl x)) (inr (inr x‚ÇÅ)) = {!!}
ff a b c d (inr (inr x)) (inr (inl x‚ÇÅ)) = {!!}
ff .(downRight c) .(downRight d) c d (inr (inr refl)) (inr (inr refl))
 = {!!} , (0 , {!!})

linear-f : (f : ‚Ñ§ ‚Üí ‚Ñ§) ‚Üí ùì§‚ÇÄ Ãá
linear-f f = (a b : ‚Ñ§) ‚Üí a <‚Ñ§ b ‚Üí f a <‚Ñ§ f b

linear-f‚ÇÇ : (f : ‚Ñ§ ‚Üí ‚Ñ§ ‚Üí ‚Ñ§) ‚Üí ùì§‚ÇÄ Ãá
linear-f‚ÇÇ f = {a b c d : ‚Ñ§} ‚Üí a ‚â§‚Ñ§ b ‚Üí c ‚â§‚Ñ§ d ‚Üí f a c ‚â§‚Ñ§ f b d 

add-is-linear : linear-f‚ÇÇ _+_
add-is-linear {a} {b} {c} {d} (m , a‚â§b) (n , c‚â§d)
 = succ (m +‚Ñï n)
 , {!!}

down-‚â§‚Ñ§ : (a b : ‚Ñ§) ‚Üí a -immediatelyDownFrom- b ‚Üí (downLeft b) ‚â§‚Ñ§ a ‚â§‚Ñ§ (downRight b)
down-‚â§‚Ñ§ .(downLeft b)  b (inl refl)       = (0 , refl) , (2 , refl)
down-‚â§‚Ñ§ .(downMid b)   b (inr (inl refl)) = (1 , refl) , (1 , refl)
down-‚â§‚Ñ§ .(downRight b) b (inr (inr refl)) = (2 , refl) , (0 , refl)

‚â§‚Ñ§-down : (a b : ‚Ñ§) ‚Üí (downLeft b) ‚â§‚Ñ§ a ‚â§‚Ñ§ (downRight b) ‚Üí a -immediatelyDownFrom- b
‚â§‚Ñ§-down = {!!}

fun-cover : (f : ‚Ñ§ ‚Üí ‚Ñ§ ‚Üí ‚Ñ§) ‚Üí linear-f‚ÇÇ f
          ‚Üí (a b c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ : ‚Ñ§) ‚Üí c‚ÇÅ ‚â§‚Ñ§ a ‚â§‚Ñ§ c‚ÇÇ ‚Üí d‚ÇÅ ‚â§‚Ñ§ b ‚â§‚Ñ§ d‚ÇÇ
          ‚Üí (f c‚ÇÅ d‚ÇÅ ‚â§‚Ñ§ f a b ‚â§‚Ñ§ f c‚ÇÇ d‚ÇÇ)
fun-cover f l a b c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ (x , y) (z , w) = l x z , l y w

fun-cover2 : (f : ‚Ñ§ ‚Üí ‚Ñ§ ‚Üí ‚Ñ§) ‚Üí linear-f‚ÇÇ f
           ‚Üí (a b c d : ‚Ñ§) ‚Üí a -immediatelyDownFrom- c ‚Üí  b -immediatelyDownFrom- d
           ‚Üí (f (downLeft c) (downLeft d) ‚â§‚Ñ§ f a b ‚â§‚Ñ§ f (downRight c) (downRight d))
fun-cover2 f l a b c d e‚ÇÅ e‚ÇÇ
 = fun-cover f l
     a b (downLeft c) (downRight c) (downLeft d) (downRight d)
     (down-‚â§‚Ñ§ a c e‚ÇÅ) (down-‚â§‚Ñ§ b d e‚ÇÇ)

gg : (a b : ‚Ñ§) ‚Üí downLeft a ‚â§‚Ñ§ b -- ‚â§‚Ñ§ succ‚Ñ§ (succ‚Ñ§ (downRight a))
   ‚Üí downLeft (upRight a) ‚â§‚Ñ§ upRight b -- ‚â§‚Ñ§ succ‚Ñ§ (downRight (upRight a))
-- ‚Üí upRight (upRight b) -immediatelyDownFrom- upRight (upRight a)
gg a b f = {!!}

upCalc' : (a b : ‚Ñï) (k : ‚Ñï) ‚Üí a +‚Ñï k ‚â° b ‚Üí Œ£ n Íûâ ‚Ñï , (a /2) +‚Ñï n ‚â° (b /2)
upCalc' zero .(zero +‚Ñï k) k refl = (k /2) , {!!}
upCalc' (succ zero) .(1 +‚Ñï k) k refl = succ (k /2) , {!!}
upCalc' (succ (succ a)) .(succ (succ a) +‚Ñï k) k refl = pr‚ÇÅ IH , ({!!} ‚Åª¬π ‚àô ap succ (pr‚ÇÇ IH) ‚àô Œ≥ ‚Åª¬π)
 where IH : Sigma ‚Ñï (Œª n ‚Üí ((a /2) +‚Ñï n) ‚â° ((a +‚Ñï k) /2))
       IH = upCalc' a (a +‚Ñï k) k refl
       Œ≥ : ((succ (succ a) +‚Ñï k) /2) ‚â° ((succ (succ (a +‚Ñï k))) /2)
       Œ≥ = {!!}

upCalc : (a b : ‚Ñ§) (k : ‚Ñï) ‚Üí a +pos k ‚â° b ‚Üí Œ£ n Íûâ ‚Ñï , (upRight ^ n) a ‚â° (upRight ^ n) b
upCalc a b 0 a‚â§b = 0 , a‚â§b
upCalc a b (succ k) a‚â§b = k , {!!}
 where IH : Œ£ n Íûâ ‚Ñï , (upRight ^ n) a ‚â° (upRight ^ n) (pred‚Ñ§ b)
       IH = upCalc a (pred‚Ñ§ b) k {!!}

probablynot : ‚àÄ a b ‚Üí upRight (upRight (a + b))
                    ‚â° upRight (upRight (a + b))
probablynot (pos zero) (pos zero) = refl
probablynot (pos zero) (pos (succ zero)) = refl
probablynot (pos zero) (pos (succ (succ x‚ÇÅ))) = refl
probablynot (pos (succ x)) (pos zero) = refl
probablynot (pos (succ x)) (pos (succ x‚ÇÅ)) = refl
probablynot (pos x) (negsucc x‚ÇÅ) = refl
probablynot (negsucc x) (pos x‚ÇÅ) = refl
probablynot (negsucc x) (negsucc x‚ÇÅ) = refl

_+œÅ_ : RealœÅ ‚Üí RealœÅ ‚Üí RealœÅ 
(Œ± , Œ≥Œ±) +œÅ (Œ≤ , Œ≥Œ≤) = (Œª n ‚Üí upRight (upRight (Œ± n + Œ≤ n))) , Œ≥
 where
   Œ≥ : (n : ‚Ñ§) ‚Üí upRight (upRight (Œ± n + Œ≤ n)) -immediatelyDownFrom-
                 upRight (upRight (Œ± (pred‚Ñ§ n) + Œ≤ (pred‚Ñ§ n))) 
   Œ≥ n = {!!}
   Œ¥ : (n : ‚Ñ§) ‚Üí (downLeft (Œ± (pred‚Ñ§ n)) + downLeft (Œ≤ (pred‚Ñ§ n))) ‚â§‚Ñ§ (Œ± n + Œ≤ n) ‚â§‚Ñ§ (downRight (Œ± (pred‚Ñ§ n)) + downRight (Œ≤ (pred‚Ñ§ n)))
   Œ¥ n = fun-cover2 _+_ add-is-linear (Œ± n) (Œ≤ n) (Œ± (pred‚Ñ§ n)) (Œ≤ (pred‚Ñ§ n)) (Œ≥Œ± n) (Œ≥Œ≤ n)
