
\Andrew Sneap - 27th April 2021

I link to this module within the Rationals section of my report.

\begin{code}

{-# OPTIONS --without-K --exact-split --no-eta-equality #-}

-- Need to correct options to be consistent with type topology once field is ready
open import SpartanMLTT renaming (_+_ to _‚àî_ ; * to ‚ãÜ) --TypeTopology

import DiscreteAndSeparated --TypeTopology
import Groups --TypeTopology
import NaturalsAddition --TypeTopology
import NaturalNumbers-Properties -- TypeTopology
import UF-Base -- TypeTopology
import UF-FunExt -- Typetopology
import UF-Miscelanea --TypeTopology
import UF-Subsingletons --Typetopology

import FieldAxioms
import HCF
import Integers

import IntegersOrder renaming (_‚â§_ to _‚Ñ§‚â§_)
import IntegersProperties
import NaturalsMultiplication
import NaturalsDivision
import MoreNaturalProperties
import ncRationals

module Rationals where

open ncRationals renaming (_+_ to _‚Ñö‚Çô+_ ; _<_ to _‚Ñö‚Çô<_ ; _>_ to _‚Ñö‚Çô>_ ; _*_ to _‚Ñö‚Çô*_)

‚Ñö : ùì§‚ÇÄ Ãá
‚Ñö = Œ£ q Íûâ ‚Ñö‚Çô , is-in-lowest-terms q

open DiscreteAndSeparated --TypeTopology
open UF-FunExt --TypeTopology
open UF-Miscelanea --TypeTopology
open UF-Subsingletons --TypeTopology

‚Ñö-is-discrete : Fun-Ext ‚Üí is-discrete ‚Ñö
‚Ñö-is-discrete fe = Œ£-is-discrete ‚Ñö‚Çô-is-discrete Œª q x y ‚Üí inl (is-in-lowest-terms-is-prop fe q x y)

‚Ñö-is-set : Fun-Ext ‚Üí is-set ‚Ñö
‚Ñö-is-set fe = discrete-types-are-sets (‚Ñö-is-discrete fe)

to‚Ñö‚Çô : ‚Ñö ‚Üí ‚Ñö‚Çô
to‚Ñö‚Çô (q , œà) = q

open HCF
open NaturalsMultiplication renaming (_*_ to _‚Ñï*_)
open NaturalNumbers-Properties --TypeTopology
open Integers renaming (_*_ to _‚Ñ§*_ ; _+_ to _‚Ñ§+_ ; -_ to ‚Ñ§-_)
open IntegersProperties

-- 

to‚Ñölemma : ((x , a) : ‚Ñö‚Çô) ‚Üí Œ£ ((x' , a') , p) Íûâ ‚Ñö , (Œ£ h Íûâ ‚Ñï , (x ‚â° (pos (succ h)) ‚Ñ§* x') √ó (succ a ‚â° (succ h) ‚Ñï* succ a'))
to‚Ñölemma (pos a , b) = f (divbyhcf a (succ b))
 where
  f : Œ£ h Íûâ ‚Ñï , Œ£ x Íûâ ‚Ñï , Œ£ y Íûâ ‚Ñï , ((h ‚Ñï* x ‚â° a) √ó (h ‚Ñï* y ‚â° succ b)) √ó coprime x y ‚Üí _
  f (h      , x , zero   , (Œ≥‚ÇÅ , Œ≥‚ÇÇ) , r) = ùüò-elim (positive-not-zero b (Œ≥‚ÇÇ ‚Åª¬π))
  f (0      , x , succ y , (Œ≥‚ÇÅ , Œ≥‚ÇÇ) , r) = ùüò-elim (positive-not-zero b (Œ≥‚ÇÇ ‚Åª¬π ‚àô zero-left-is-zero (succ y)))
  f (succ h , x , succ y , (Œ≥‚ÇÅ , Œ≥‚ÇÇ) , r) = (((pos x) , y) , r) , h , I , (Œ≥‚ÇÇ ‚Åª¬π)
   where
    I : pos a ‚â° pos (succ h) ‚Ñ§* pos x
    I = pos a                 ‚â°‚ü® ap pos Œ≥‚ÇÅ ‚Åª¬π                                 ‚ü©                               
        pos (succ h ‚Ñï* x)     ‚â°‚ü® pos-multiplication-equiv-to-‚Ñï (succ h) x ‚Åª¬π ‚ü©
        pos (succ h) ‚Ñ§* pos x ‚àé
to‚Ñölemma (negsucc a , b) = f (divbyhcf (succ a) (succ b))
 where
  f : ((Œ£ h Íûâ ‚Ñï , Œ£ x Íûâ ‚Ñï , Œ£ y Íûâ ‚Ñï , ((h ‚Ñï* x ‚â° (succ a)) √ó (h ‚Ñï* y ‚â° succ b)) √ó coprime x y)) ‚Üí _
  f (h      , x      , 0      , (Œ≥‚ÇÅ , Œ≥‚ÇÇ) , r) = ùüò-elim (positive-not-zero b (Œ≥‚ÇÇ ‚Åª¬π))
  f (h      , 0      , succ y , (Œ≥‚ÇÅ , Œ≥‚ÇÇ) , r) = ùüò-elim (positive-not-zero a (Œ≥‚ÇÅ ‚Åª¬π))
  f (0      , succ x , succ y , (Œ≥‚ÇÅ , Œ≥‚ÇÇ) , r) = ùüò-elim (positive-not-zero b (Œ≥‚ÇÇ ‚Åª¬π ‚àô zero-left-is-zero (succ y)))
  f (succ h , succ x , succ y , (Œ≥‚ÇÅ , Œ≥‚ÇÇ) , r) = (((negsucc x) , y) , r) , (h , (I , (Œ≥‚ÇÇ ‚Åª¬π)))
   where
    i : pos (succ a) ‚â° (pos (succ h) ‚Ñ§* pos (succ x))
    i = pos (succ a)                 ‚â°‚ü® ap pos Œ≥‚ÇÅ ‚Åª¬π                                        ‚ü©
        pos (succ h ‚Ñï* succ x)       ‚â°‚ü® pos-multiplication-equiv-to-‚Ñï (succ h) (succ x) ‚Åª¬π ‚ü©
        pos (succ h) ‚Ñ§* pos (succ x) ‚àé

    I : negsucc a ‚â° pos (succ h) ‚Ñ§* negsucc x
    I = negsucc a                        ‚â°‚ü® ap ‚Ñ§-_ i                                                     ‚ü©
        ‚Ñ§- pos (succ h) ‚Ñ§* pos (succ x)   ‚â°‚ü® subtraction-dist-over-mult (pos (succ h)) (pos (succ x)) ‚Åª¬π ‚ü©
        pos (succ h) ‚Ñ§* (‚Ñ§- pos (succ x)) ‚àé

--feed in ‚Ñö‚Çô
to‚Ñö : ‚Ñö‚Çô ‚Üí ‚Ñö
to‚Ñö q = pr‚ÇÅ (to‚Ñölemma q)

zero-‚Ñö : ‚Ñö
zero-‚Ñö = to‚Ñö ((pos zero) , zero)

1‚Ñö : ‚Ñö
1‚Ñö = to‚Ñö ((pos 1) , 0)

-1‚Ñö : ‚Ñö
-1‚Ñö = to‚Ñö ((negsucc 0) , 0)

_+_ : ‚Ñö ‚Üí ‚Ñö ‚Üí ‚Ñö
(p , Œ±) + (q , Œ≤) = to‚Ñö (p ‚Ñö‚Çô+ q)

open UF-Base --TypeTopology

‚Ñö‚â°-to-‚Ñö‚Çô‚â° : ((p , Œ±) (q , Œ≤) : ‚Ñö) ‚Üí (p , Œ±) ‚â° (q , Œ≤) ‚Üí p ‚â° q
‚Ñö‚â°-to-‚Ñö‚Çô‚â° (p , Œ±) (q , Œ≤) e = pr‚ÇÅ (from-Œ£-‚â° e)

open IntegersOrder renaming (_<_ to _‚Ñ§<_ ; _>_ to _‚Ñ§>_)

equiv-equality : Fun-Ext ‚Üí (p q : ‚Ñö‚Çô) ‚Üí p ‚Ñö‚Çô‚âà q ‚áî to‚Ñö p ‚â° to‚Ñö q
equiv-equality fe (x , a) (y , b) = I , II
 where
  Œ± : Œ£ ((x' , a') , p) Íûâ ‚Ñö , Œ£ h Íûâ ‚Ñï , (x ‚â° (pos (succ h) ‚Ñ§* x')) √ó (succ a ‚â° succ h ‚Ñï* succ a')
  Œ± = to‚Ñölemma (x , a)

  Œ≤ : Œ£ ((y' , b') , p') Íûâ ‚Ñö , Œ£ h' Íûâ ‚Ñï , (y ‚â° (pos (succ h') ‚Ñ§* y')) √ó (succ b ‚â° succ h' ‚Ñï* succ b')
  Œ≤ = to‚Ñölemma (y , b)

  h h' : ‚Ñï
  h = pr‚ÇÅ (pr‚ÇÇ Œ±)
  h' = pr‚ÇÅ (pr‚ÇÇ Œ≤)

  a' b' : ‚Ñï
  a' = pr‚ÇÇ (pr‚ÇÅ (pr‚ÇÅ Œ±))
  b' = pr‚ÇÇ (pr‚ÇÅ (pr‚ÇÅ Œ≤))

  x' y' : ‚Ñ§
  x' = pr‚ÇÅ (pr‚ÇÅ (pr‚ÇÅ Œ±))
  y' = pr‚ÇÅ (pr‚ÇÅ (pr‚ÇÅ Œ≤))

  p : is-in-lowest-terms (x' , a')
  p = pr‚ÇÇ (pr‚ÇÅ Œ±)

  p' : is-in-lowest-terms (y' , b')
  p' = pr‚ÇÇ (pr‚ÇÅ Œ≤)

  Œ±‚Çö‚ÇÅ : x ‚â° pos (succ h) ‚Ñ§* x'
  Œ±‚Çö‚ÇÅ = pr‚ÇÅ (pr‚ÇÇ (pr‚ÇÇ Œ±))

  Œ±‚Çö‚ÇÇ : succ a ‚â° succ h ‚Ñï* succ a'
  Œ±‚Çö‚ÇÇ = pr‚ÇÇ (pr‚ÇÇ (pr‚ÇÇ Œ±))

  Œ±‚Çö‚ÇÇ' : pos (succ a) ‚â° pos (succ h) ‚Ñ§* pos (succ a')
  Œ±‚Çö‚ÇÇ' = pos (succ a)                  ‚â°‚ü® ap pos Œ±‚Çö‚ÇÇ ‚ü©
        pos (succ h ‚Ñï* succ a')       ‚â°‚ü® pos-multiplication-equiv-to-‚Ñï (succ h) (succ a') ‚Åª¬π ‚ü©
        pos (succ h) ‚Ñ§* pos (succ a') ‚àé

  Œ≤‚Çö‚ÇÅ : y ‚â° (pos (succ h') ‚Ñ§* y')
  Œ≤‚Çö‚ÇÅ = pr‚ÇÅ (pr‚ÇÇ (pr‚ÇÇ Œ≤))

  Œ≤‚Çö‚ÇÇ : succ b ‚â° succ h' ‚Ñï* succ b'
  Œ≤‚Çö‚ÇÇ = pr‚ÇÇ (pr‚ÇÇ (pr‚ÇÇ Œ≤))

  Œ≤‚Çö‚ÇÇ' : pos (succ b) ‚â° pos (succ h') ‚Ñ§* (pos (succ b'))
  Œ≤‚Çö‚ÇÇ' = pos (succ b)              ‚â°‚ü® ap pos Œ≤‚Çö‚ÇÇ ‚ü©
         pos (succ h' ‚Ñï* succ b') ‚â°‚ü® pos-multiplication-equiv-to-‚Ñï (succ h') (succ b') ‚Åª¬π ‚ü©
         pos (succ h') ‚Ñ§* pos (succ b') ‚àé

  I : (x , a) ‚Ñö‚Çô‚âà (y , b) ‚Üí ((x' , a') , p) ‚â° ((y' , b') , p')
  I e = to-subtype-‚â° (Œª z ‚Üí is-in-lowest-terms-is-prop fe z) (equiv-with-lowest-terms-is-equal (x' , a') (y' , b') f p p')
   where
    f : x' ‚Ñ§* (pos (succ b')) ‚â° y' ‚Ñ§* (pos (succ a'))
    f = ‚Ñ§-mult-left-cancellable (x' ‚Ñ§* pos (succ b')) (y' ‚Ñ§* pos (succ a')) (pos (succ h)) (pos-succ-not-zero h) g
     where
      g : pos (succ h) ‚Ñ§* (x' ‚Ñ§* (pos (succ b'))) ‚â° pos (succ h) ‚Ñ§* (y' ‚Ñ§* (pos (succ a')))
      g = ‚Ñ§-mult-left-cancellable (pos (succ h) ‚Ñ§* ((x' ‚Ñ§* pos (succ b')))) (pos (succ h) ‚Ñ§* (y' ‚Ñ§* pos (succ a'))) (pos (succ h')) (pos-succ-not-zero h') k
       where
        k : pos (succ h') ‚Ñ§* (pos (succ h) ‚Ñ§* (x' ‚Ñ§* (pos (succ b')))) ‚â° pos (succ h') ‚Ñ§* (pos (succ h) ‚Ñ§* (y' ‚Ñ§* (pos (succ a'))))
        k = pos (succ h') ‚Ñ§* (pos (succ h) ‚Ñ§* (x' ‚Ñ§* pos (succ b')))       ‚â°‚ü® ap (pos (succ h') ‚Ñ§*_) (‚Ñ§*-assoc (pos (succ h)) x' (pos (succ b'))) ‚ü©
            pos (succ h') ‚Ñ§* ((pos (succ h) ‚Ñ§* x') ‚Ñ§* pos (succ b'))       ‚â°‚ü® ap (Œª z ‚Üí pos (succ h') ‚Ñ§* (z ‚Ñ§* pos (succ b'))) (Œ±‚Çö‚ÇÅ ‚Åª¬π) ‚ü©
            pos (succ h') ‚Ñ§* (x ‚Ñ§* pos (succ b'))                          ‚â°‚ü® ‚Ñ§-mult-rearrangement''' (pos (succ h')) x (pos (succ b')) ‚ü©
            x ‚Ñ§* (pos (succ h') ‚Ñ§* pos (succ b'))                          ‚â°‚ü® ap (x ‚Ñ§*_) (Œ≤‚Çö‚ÇÇ' ‚Åª¬π) ‚ü©
            x ‚Ñ§* pos (succ b)                                              ‚â°‚ü® e ‚ü©
            y ‚Ñ§* pos (succ a)                                              ‚â°‚ü® ap‚ÇÇ (Œª z z' ‚Üí z ‚Ñ§* z') Œ≤‚Çö‚ÇÅ Œ±‚Çö‚ÇÇ' ‚ü©
            pos (succ h') ‚Ñ§* y' ‚Ñ§* (pos (succ h) ‚Ñ§* pos (succ a'))         ‚â°‚ü® ‚Ñ§*-assoc (pos (succ h')) y' (pos (succ h) ‚Ñ§* pos (succ a')) ‚Åª¬π ‚ü©
            pos (succ h') ‚Ñ§* (y' ‚Ñ§* (pos (succ h) ‚Ñ§* pos (succ a')))       ‚â°‚ü® ap (pos (succ h') ‚Ñ§*_) (‚Ñ§-mult-rearrangement''' y' (pos (succ h)) (pos (succ a'))) ‚ü©
            pos (succ h') ‚Ñ§* (pos (succ h) ‚Ñ§* (y' ‚Ñ§* pos (succ a')))       ‚àé

  II : to‚Ñö (x , a) ‚â° to‚Ñö (y , b) ‚Üí (x , a) ‚Ñö‚Çô‚âà (y , b)
  II e = x ‚Ñ§* pos (succ b)                                              ‚â°‚ü® ap‚ÇÇ (Œª z z' ‚Üí z ‚Ñ§* z') Œ±‚Çö‚ÇÅ (ap pos Œ≤‚Çö‚ÇÇ) ‚ü©
         ((pos (succ h) ‚Ñ§* x') ‚Ñ§* pos (succ h' ‚Ñï* succ b'))             ‚â°‚ü® ap‚ÇÇ (Œª z z' ‚Üí ((pos (succ h) ‚Ñ§* z) ‚Ñ§* pos (succ h' ‚Ñï* succ z'))) (pr‚ÇÅ iii) ((pr‚ÇÇ iii) ‚Åª¬π) ‚ü©
         ((pos (succ h) ‚Ñ§* y') ‚Ñ§* pos (succ h' ‚Ñï* succ a'))             ‚â°‚ü® ap (((pos (succ h) ‚Ñ§* y')) ‚Ñ§*_) (pos-multiplication-equiv-to-‚Ñï (succ h') (succ a')) ‚Åª¬π ‚ü©
         ((pos (succ h) ‚Ñ§* y') ‚Ñ§* (pos (succ h') ‚Ñ§* pos (succ a')))     ‚â°‚ü® ‚Ñ§-mult-rearrangement'' (pos (succ h')) (pos (succ h)) y' (pos (succ a')) ‚ü©
         (((pos (succ h') ‚Ñ§* y')) ‚Ñ§* (pos (succ h) ‚Ñ§* pos (succ a')))   ‚â°‚ü® ap (((pos (succ h') ‚Ñ§* y')) ‚Ñ§*_) (pos-multiplication-equiv-to-‚Ñï (succ h) (succ a')) ‚ü© 
         ((pos (succ h') ‚Ñ§* y')) ‚Ñ§* pos (succ h ‚Ñï* succ a')             ‚â°‚ü® ap‚ÇÇ (Œª z z' ‚Üí z ‚Ñ§* z') (pr‚ÇÅ (pr‚ÇÇ (pr‚ÇÇ Œ≤)) ‚Åª¬π) (ap pos (pr‚ÇÇ (pr‚ÇÇ (pr‚ÇÇ Œ±)) ‚Åª¬π)) ‚ü©
         y ‚Ñ§* pos (succ a) ‚àé
    where
     i : Œ£ Œ¥ Íûâ (x' , a') ‚â° (y' , b') , transport is-in-lowest-terms Œ¥ (pr‚ÇÇ (to‚Ñö (x , a))) ‚â° pr‚ÇÇ (to‚Ñö (y , b))
     i = from-Œ£-‚â° e

     ii : x' , a' ‚â° y' , b'
     ii = pr‚ÇÅ i

     iii : (x' ‚â° y') √ó (a' ‚â° b')
     iii = from-√ó-‚â°' ii

‚âà-to‚Ñö : (p : ‚Ñö‚Çô) ‚Üí p ‚Ñö‚Çô‚âà to‚Ñö‚Çô (to‚Ñö p)
‚âà-to‚Ñö (x , a) = conclusion
 where
  right-l : Œ£ ((x' , a') , p) Íûâ ‚Ñö , (Œ£ h Íûâ ‚Ñï , (x ‚â° (pos (succ h)) ‚Ñ§* x') √ó (succ a ‚â° (succ h) ‚Ñï* succ a'))
  right-l = to‚Ñölemma (x , a)

  right : ‚Ñö
  right = to‚Ñö (x , a)

  x' : ‚Ñ§
  x' = pr‚ÇÅ (pr‚ÇÅ right)
  a' : ‚Ñï
  a' = pr‚ÇÇ (pr‚ÇÅ right)

  h : ‚Ñï
  h = pr‚ÇÅ (pr‚ÇÇ right-l) 
    
  conclusion : x ‚Ñ§* pos (succ a') ‚â° x' ‚Ñ§* pos (succ a)
  conclusion = x ‚Ñ§* pos (succ a')                    ‚â°‚ü® ap (_‚Ñ§* pos (succ a')) (pr‚ÇÅ (pr‚ÇÇ (pr‚ÇÇ right-l))) ‚ü©
               (pos (succ h)) ‚Ñ§* x' ‚Ñ§* pos (succ a') ‚â°‚ü® ap (_‚Ñ§* pos (succ a')) (‚Ñ§*-comm (pos (succ h)) x') ‚ü©
               x' ‚Ñ§* pos (succ h) ‚Ñ§* pos (succ a')   ‚â°‚ü® ‚Ñ§*-assoc x' (pos (succ h)) (pos (succ a')) ‚Åª¬π ‚ü©
               x' ‚Ñ§* (pos (succ h) ‚Ñ§* pos (succ a')) ‚â°‚ü® ap (x' ‚Ñ§*_) (pos-multiplication-equiv-to-‚Ñï (succ h) (succ a')) ‚ü©
               x' ‚Ñ§* pos ((succ h) ‚Ñï* succ a')       ‚â°‚ü® ap (x' ‚Ñ§*_) (ap pos (pr‚ÇÇ (pr‚ÇÇ (pr‚ÇÇ right-l))) ‚Åª¬π ) ‚ü©
               x' ‚Ñ§* pos (succ a) ‚àé

‚Ñö+-comm : (a b : ‚Ñö) ‚Üí a + b ‚â° b + a
‚Ñö+-comm ((x , a) , p) ((y , b) , q) = ap to‚Ñö I
 where
  I : ((x , a) ‚Ñö‚Çô+ (y , b)) ‚â° ((y , b) ‚Ñö‚Çô+ (x , a))
  I = ‚Ñö‚Çô+-comm (x , a) (y , b)

to‚Ñö-over-addition : Fun-Ext ‚Üí (p q : ‚Ñö‚Çô) ‚Üí to‚Ñö (p ‚Ñö‚Çô+ q) ‚â° to‚Ñö p + to‚Ñö q
to‚Ñö-over-addition fe (x , a) (y , b) = helper I
 where
  p' = to‚Ñö (x , a)
  q' = to‚Ñö (y , b)

  x' y' : ‚Ñ§
  x' = pr‚ÇÅ (pr‚ÇÅ p')
  y' = pr‚ÇÅ (pr‚ÇÅ q')
  
  a' b' : ‚Ñï
  a' = pr‚ÇÇ (pr‚ÇÅ p')
  b' = pr‚ÇÇ (pr‚ÇÅ q')

  helper : ((x , a) ‚Ñö‚Çô+ (y , b)) ‚Ñö‚Çô‚âà ((x' , a') ‚Ñö‚Çô+ (y' , b')) ‚Üí to‚Ñö ((x , a) ‚Ñö‚Çô+ (y , b)) ‚â° (to‚Ñö (x , a) + to‚Ñö (y , b))
  helper = pr‚ÇÅ (equiv-equality fe ((x , a) ‚Ñö‚Çô+ (y , b)) ((x' , a') ‚Ñö‚Çô+ (y' , b')))

  aux‚ÇÅ : (x , a) ‚Ñö‚Çô‚âà (x' , a')
  aux‚ÇÅ = ‚âà-to‚Ñö (x , a)

  aux‚ÇÇ : (y , b) ‚Ñö‚Çô‚âà (y' , b')
  aux‚ÇÇ = ‚âà-to‚Ñö (y , b)

  aux‚ÇÉ : ((x , a) ‚Ñö‚Çô+ (y , b)) ‚Ñö‚Çô‚âà ((x' , a') ‚Ñö‚Çô+ (y , b))
  aux‚ÇÉ = ‚âà-addition (x , a) (x' , a') (y , b) aux‚ÇÅ

  aux‚ÇÑ : ((y' , b') ‚Ñö‚Çô+ (x' , a')) ‚Ñö‚Çô‚âà ((y , b) ‚Ñö‚Çô+ (x' , a'))
  aux‚ÇÑ = ‚âà-addition (y' , b') (y , b) (x' , a') (‚âà-sym (y , b) (y' , b') aux‚ÇÇ)

  aux‚ÇÖ : ((y , b) ‚Ñö‚Çô+ (x' , a')) ‚Ñö‚Çô‚âà ((y' , b') ‚Ñö‚Çô+ (x' , a'))
  aux‚ÇÖ = ‚âà-sym ((y' , b') ‚Ñö‚Çô+ (x' , a')) ((y , b) ‚Ñö‚Çô+ (x' , a')) aux‚ÇÑ

  aux‚ÇÜ : ((x' , a') ‚Ñö‚Çô+ (y , b)) ‚Ñö‚Çô‚âà ((x' , a') ‚Ñö‚Çô+ (y' , b'))
  aux‚ÇÜ = transport‚ÇÇ _‚Ñö‚Çô‚âà_ (‚Ñö‚Çô+-comm (y , b) (x' , a')) (‚Ñö‚Çô+-comm (y' , b') (x' , a')) aux‚ÇÖ
  
  I : ((x , a) ‚Ñö‚Çô+ (y , b)) ‚Ñö‚Çô‚âà ((x' , a') ‚Ñö‚Çô+ (y' , b'))
  I = ‚âà-trans ((x , a) ‚Ñö‚Çô+ (y , b)) ((x' , a') ‚Ñö‚Çô+ (y , b)) ((x' , a') ‚Ñö‚Çô+ (y' , b')) aux‚ÇÉ aux‚ÇÜ

q-has-qn : Fun-Ext ‚Üí (q : ‚Ñö) ‚Üí Œ£ q' Íûâ ‚Ñö‚Çô , q ‚â° to‚Ñö q'
q-has-qn fe (q , p) = q , (to-subtype-‚â° (is-in-lowest-terms-is-prop fe) (equiv-with-lowest-terms-is-equal q q' (‚âà-to‚Ñö q) p (pr‚ÇÇ right)))
 where
  right : ‚Ñö
  right = to‚Ñö q

  q' : ‚Ñö‚Çô
  q' = pr‚ÇÅ right
  
‚Ñö+-assoc : Fun-Ext ‚Üí (p q r : ‚Ñö) ‚Üí (p + q) + r ‚â° p + (q + r)
‚Ñö+-assoc fe (x , p) (y , q) (z , r) = V
 where
  I II : ‚Ñö
  I = to‚Ñö (x ‚Ñö‚Çô+ y)
  II = to‚Ñö (y ‚Ñö‚Çô+ z) 

  III : Œ£ r' Íûâ ‚Ñö‚Çô , (z , r ‚â° to‚Ñö r')
  III = q-has-qn fe ((z , r))

  IV : Œ£ p' Íûâ ‚Ñö‚Çô , (x , p ‚â° to‚Ñö p')
  IV = q-has-qn fe ((x , p))

  V : (to‚Ñö (x ‚Ñö‚Çô+ y) + (z , r)) ‚â° ((x , p) + ((y , q) + (z , r)))
  V = (I + (z , r))                     ‚â°‚ü® ap (I +_) (pr‚ÇÇ III) ‚ü©
        (I + to‚Ñö (pr‚ÇÅ III))                ‚â°‚ü® to‚Ñö-over-addition fe (x ‚Ñö‚Çô+ y) (pr‚ÇÅ III) ‚Åª¬π  ‚ü©
        to‚Ñö ((x ‚Ñö‚Çô+ y) ‚Ñö‚Çô+ z)             ‚â°‚ü® ap to‚Ñö (‚Ñö‚Çô+-assoc x y z) ‚ü©
        to‚Ñö (x ‚Ñö‚Çô+ (y ‚Ñö‚Çô+ z))             ‚â°‚ü® to‚Ñö-over-addition fe (pr‚ÇÅ IV) (y ‚Ñö‚Çô+ z) ‚ü©
        (to‚Ñö (pr‚ÇÅ IV) + II)                ‚â°‚ü® ap (_+ II) (pr‚ÇÇ IV ‚Åª¬π) ‚ü©
        ((x , p) + II) ‚àé

_*_ : ‚Ñö ‚Üí ‚Ñö ‚Üí ‚Ñö
(p , _) * (q , _) = to‚Ñö (p ‚Ñö‚Çô* q)

to‚Ñö-over-mult : Fun-Ext ‚Üí (p q : ‚Ñö‚Çô) ‚Üí to‚Ñö (p ‚Ñö‚Çô* q) ‚â° to‚Ñö p * to‚Ñö q
to‚Ñö-over-mult fe (x , a) (y , b) = helper I
 where
  p' = to‚Ñö (x , a)
  q' = to‚Ñö (y , b)

  x' y' : ‚Ñ§
  x' = pr‚ÇÅ (pr‚ÇÅ p')
  y' = pr‚ÇÅ (pr‚ÇÅ q')
  
  a' b' : ‚Ñï
  a' = pr‚ÇÇ (pr‚ÇÅ p')
  b' = pr‚ÇÇ (pr‚ÇÅ q') 
   
  helper : ((x , a) ‚Ñö‚Çô* (y , b)) ‚Ñö‚Çô‚âà ((x' , a') ‚Ñö‚Çô* (y' , b')) ‚Üí to‚Ñö ((x , a) ‚Ñö‚Çô* (y , b)) ‚â° to‚Ñö ((x' , a') ‚Ñö‚Çô* (y' , b'))
  helper = pr‚ÇÅ (equiv-equality fe ((x , a) ‚Ñö‚Çô* (y , b)) ((x' , a') ‚Ñö‚Çô* (y' , b')))

  aux‚ÇÅ : (x , a) ‚Ñö‚Çô‚âà (x' , a')
  aux‚ÇÅ = ‚âà-to‚Ñö (x , a)

  aux‚ÇÇ : (y , b) ‚Ñö‚Çô‚âà (y' , b')
  aux‚ÇÇ = ‚âà-to‚Ñö (y , b)

  aux‚ÇÉ : ((x , a) ‚Ñö‚Çô* (y , b)) ‚Ñö‚Çô‚âà ((x' , a') ‚Ñö‚Çô* (y , b))
  aux‚ÇÉ = ‚âà-over-* (x , a) (x' , a') (y , b) aux‚ÇÅ

  aux‚ÇÑ : ((y' , b') ‚Ñö‚Çô* (x' , a')) ‚Ñö‚Çô‚âà ((y , b) ‚Ñö‚Çô* (x' , a'))
  aux‚ÇÑ = ‚âà-over-* (y' , b') (y , b) (x' , a') (‚âà-sym (y , b ) (y' , b') aux‚ÇÇ)

  aux‚ÇÖ : ((y , b) ‚Ñö‚Çô* (x' , a')) ‚Ñö‚Çô‚âà ((y' , b') ‚Ñö‚Çô* (x' , a'))
  aux‚ÇÖ = ‚âà-sym ((y' , b') ‚Ñö‚Çô* (x' , a')) ((y , b) ‚Ñö‚Çô* (x' , a')) aux‚ÇÑ

  aux‚ÇÜ : ((x' , a') ‚Ñö‚Çô* (y , b)) ‚Ñö‚Çô‚âà ((x' , a') ‚Ñö‚Çô* (y' , b'))
  aux‚ÇÜ = transport‚ÇÇ _‚Ñö‚Çô‚âà_ (‚Ñö‚Çô*-comm (y , b) (x' , a')) (‚Ñö‚Çô*-comm (y' , b') (x' , a')) aux‚ÇÖ

  I : ((x , a) ‚Ñö‚Çô* (y , b)) ‚Ñö‚Çô‚âà ((x' , a') ‚Ñö‚Çô* (y' , b'))
  I = ‚âà-trans ((x , a) ‚Ñö‚Çô* (y , b)) ((x' , a') ‚Ñö‚Çô* (y , b)) ((x' , a') ‚Ñö‚Çô* (y' , b')) aux‚ÇÉ aux‚ÇÜ

‚Ñö*-comm : (p q : ‚Ñö) ‚Üí p * q ‚â° q * p
‚Ñö*-comm (p , _) (q , _) = ap to‚Ñö (‚Ñö‚Çô*-comm p q)

‚Ñö*-assoc : Fun-Ext ‚Üí (p q r : ‚Ñö) ‚Üí (p * q) * r ‚â° p * (q * r)
‚Ñö*-assoc fe (x , p) (y , q) (z , r) = III
 where
  left : ‚Ñö
  left = (x , p) * (y , q)

  right : ‚Ñö
  right = (y , q) * (z , r)

  I : Œ£ l Íûâ ‚Ñö‚Çô , (z , r ‚â° to‚Ñö l)
  I = q-has-qn fe (z , r)

  II : Œ£ t Íûâ ‚Ñö‚Çô , (x , p ‚â° to‚Ñö t)
  II = q-has-qn fe (x , p)

  l t : ‚Ñö‚Çô
  l = pr‚ÇÅ I
  t = pr‚ÇÅ II

  III : to‚Ñö (x ‚Ñö‚Çô* y) * (z , r) ‚â° ((x , p) * to‚Ñö (y ‚Ñö‚Çô* z))
  III = (left * (z , r))      ‚â°‚ü® ap (left *_) (pr‚ÇÇ I) ‚ü©
        left * to‚Ñö z          ‚â°‚ü® to‚Ñö-over-mult fe (x ‚Ñö‚Çô* y) z ‚Åª¬π ‚ü©
        to‚Ñö ((x ‚Ñö‚Çô* y) ‚Ñö‚Çô* z) ‚â°‚ü® ap to‚Ñö (‚Ñö‚Çô*-assoc x y z) ‚ü©
        to‚Ñö (x ‚Ñö‚Çô* (y ‚Ñö‚Çô* z)) ‚â°‚ü® to‚Ñö-over-mult fe x (y ‚Ñö‚Çô* z) ‚ü©
        (to‚Ñö x * right)       ‚â°‚ü® ap (_* right) (pr‚ÇÇ II ‚Åª¬π) ‚ü©
        ((x , p) * right) ‚àé

_<_ : ‚Ñö ‚Üí ‚Ñö ‚Üí ùì§‚ÇÄ Ãá
(p , œà) < (q , Œ∂) = p ‚Ñö‚Çô< q

‚Ñö<-is-prop : (p q : ‚Ñö) ‚Üí is-prop (p < q)
‚Ñö<-is-prop (p , Œ±) (q , Œ≤) = ‚Ñö‚Çô<-is-prop p q

‚Ñö<-trans : (p q r : ‚Ñö) ‚Üí p < q ‚Üí q < r ‚Üí p < r
‚Ñö<-trans (p , Œ±) (q , Œ≤) (c , Œ≥) x y = ‚Ñö‚Çô-trans p q c x y

_‚â§_ : ‚Ñö ‚Üí ‚Ñö ‚Üí ùì§‚ÇÄ Ãá
p ‚â§ q = (p < q) ‚àî (p ‚â° q)
{-
‚Ñö‚â§-is-prop : (p q : ‚Ñö) ‚Üí is-prop (p ‚â§ q)
‚Ñö‚â§-is-prop (p , œà) (q , Œ∑) = -- ‚Ñö‚Çô‚â§-is-prop p q
-}
<-lemma : (p q : ‚Ñö‚Çô) ‚Üí p ‚Ñö‚Çô< q ‚Üí to‚Ñö p < to‚Ñö q 
<-lemma (x , a) (y , b) l = ordering-right-cancellable (x' ‚Ñ§* pos (succ b')) (y' ‚Ñ§* (pos (succ a'))) (pos (succ h ‚Ñï* succ h')) IV V
 where
  I : Œ£ ((x' , a') , p) Íûâ ‚Ñö , (Œ£ h Íûâ ‚Ñï , (x ‚â° (pos (succ h)) ‚Ñ§* x') √ó (succ a ‚â° (succ h) ‚Ñï* succ a'))
  I = to‚Ñölemma (x , a)

  II : Œ£ ((y' , b') , p) Íûâ ‚Ñö , (Œ£ h' Íûâ ‚Ñï , (y ‚â° (pos (succ h')) ‚Ñ§* y') √ó (succ b ‚â° (succ h') ‚Ñï* succ b'))
  II = to‚Ñölemma (y , b)

  x' y' : ‚Ñ§
  x' = pr‚ÇÅ (pr‚ÇÅ (pr‚ÇÅ I))
  y' = pr‚ÇÅ (pr‚ÇÅ (pr‚ÇÅ II))

  a' b' : ‚Ñï
  a' = pr‚ÇÇ (pr‚ÇÅ (pr‚ÇÅ I))
  b' = pr‚ÇÇ (pr‚ÇÅ (pr‚ÇÅ II))

  h h' : ‚Ñï
  h = pr‚ÇÅ (pr‚ÇÇ I)
  h' = pr‚ÇÅ (pr‚ÇÇ II)

  Œ± : x ‚â° (pos (succ h)) ‚Ñ§* x'
  Œ± = pr‚ÇÅ (pr‚ÇÇ (pr‚ÇÇ I))

  Œ≤ : succ a ‚â° (succ h) ‚Ñï* succ a'
  Œ≤ = pr‚ÇÇ (pr‚ÇÇ (pr‚ÇÇ I))

  Œ±' : y ‚â° (pos (succ h')) ‚Ñ§* y'
  Œ±' = pr‚ÇÅ (pr‚ÇÇ (pr‚ÇÇ II))

  Œ≤' : succ b ‚â° (succ h') ‚Ñï* succ b'
  Œ≤' = pr‚ÇÇ (pr‚ÇÇ (pr‚ÇÇ II))

  III : greater-than-zero (pos (succ h) ‚Ñ§* pos (succ h'))
  III = greater-than-zero-mult-trans (pos (succ h)) (pos (succ h')) (pos-succ-greater-than-zero h) (pos-succ-greater-than-zero h')

  IV : greater-than-zero (pos (succ h ‚Ñï* succ h'))
  IV = transport (Œª z ‚Üí greater-than-zero z) (pos-multiplication-equiv-to-‚Ñï (succ h) (succ h')) III

  V : ((x' ‚Ñ§* pos (succ b')) ‚Ñ§* pos (succ h ‚Ñï* succ h')) ‚Ñ§< ((y' ‚Ñ§* pos (succ a')) ‚Ñ§* pos (succ h ‚Ñï* succ h'))
  V = transport‚ÇÇ (Œª z z' ‚Üí z ‚Ñ§< z') VI VII l
   where
    VI : x ‚Ñ§* pos (succ b) ‚â° x' ‚Ñ§* pos (succ b') ‚Ñ§* pos (succ h ‚Ñï* succ h')
    VI = x ‚Ñ§* pos (succ b)                                         ‚â°‚ü® ap‚ÇÇ (Œª z z' ‚Üí z ‚Ñ§* z') Œ± (ap pos Œ≤') ‚ü©
          pos (succ h) ‚Ñ§* x' ‚Ñ§* pos (succ h' ‚Ñï* succ b')            ‚â°‚ü® ap (pos (succ h) ‚Ñ§* x' ‚Ñ§*_) (pos-multiplication-equiv-to-‚Ñï (succ h') (succ b') ‚Åª¬π) ‚ü©
          pos (succ h) ‚Ñ§* x' ‚Ñ§* (pos (succ h') ‚Ñ§* (pos (succ b')))  ‚â°‚ü® ap‚ÇÇ (Œª z z' ‚Üí z ‚Ñ§* z') (‚Ñ§*-comm (pos (succ h)) x') (‚Ñ§*-comm (pos (succ h')) (pos (succ b'))) ‚ü©
          x' ‚Ñ§* pos (succ h) ‚Ñ§* (pos (succ b') ‚Ñ§* pos (succ h'))    ‚â°‚ü® ‚Ñ§*-assoc x' (pos (succ h)) (pos (succ b') ‚Ñ§* pos (succ h')) ‚Åª¬π ‚ü©
          x' ‚Ñ§* (pos (succ h) ‚Ñ§* (pos (succ b') ‚Ñ§* pos (succ h')))  ‚â°‚ü® ap (x' ‚Ñ§*_) (‚Ñ§-mult-rearrangement''' (pos (succ h)) (pos (succ b')) (pos (succ h'))) ‚ü©
          x' ‚Ñ§* (pos (succ b') ‚Ñ§* (pos (succ h) ‚Ñ§* pos (succ h')))  ‚â°‚ü® ‚Ñ§*-assoc x' (pos (succ b')) (pos (succ h) ‚Ñ§* pos (succ h')) ‚ü©
          x' ‚Ñ§* pos (succ b') ‚Ñ§* (pos (succ h) ‚Ñ§* pos (succ h'))    ‚â°‚ü® ap ( x' ‚Ñ§* pos (succ b') ‚Ñ§*_) (pos-multiplication-equiv-to-‚Ñï (succ h) (succ h')) ‚ü©
          x' ‚Ñ§* pos (succ b') ‚Ñ§* pos (succ h ‚Ñï* succ h') ‚àé

    VII : y ‚Ñ§* pos (succ a) ‚â° y' ‚Ñ§* pos (succ a') ‚Ñ§* pos (succ h ‚Ñï* succ h')
    VII = y ‚Ñ§* pos (succ a)                                         ‚â°‚ü® ap‚ÇÇ (Œª z z' ‚Üí z ‚Ñ§* z') Œ±' (ap pos Œ≤) ‚ü©
           pos (succ h') ‚Ñ§* y' ‚Ñ§* pos (succ h ‚Ñï* succ a')            ‚â°‚ü® ap (pos (succ h') ‚Ñ§* y' ‚Ñ§*_) (pos-multiplication-equiv-to-‚Ñï (succ h) (succ a') ‚Åª¬π) ‚ü©
           pos (succ h') ‚Ñ§* y' ‚Ñ§* (pos (succ h) ‚Ñ§* pos (succ a'))    ‚â°‚ü® ap‚ÇÇ (Œª z z' ‚Üí z ‚Ñ§* z') (‚Ñ§*-comm (pos (succ h')) y') (‚Ñ§*-comm (pos (succ h)) (pos (succ a'))) ‚ü©
           y' ‚Ñ§* pos (succ h') ‚Ñ§* (pos (succ a') ‚Ñ§* pos (succ h))    ‚â°‚ü® ‚Ñ§*-assoc y' (pos (succ h')) (pos (succ a') ‚Ñ§* pos (succ h)) ‚Åª¬π ‚ü©
           y' ‚Ñ§* (pos (succ h') ‚Ñ§* (pos (succ a') ‚Ñ§* pos (succ h)))  ‚â°‚ü® ap (y' ‚Ñ§*_) (‚Ñ§-mult-rearrangement''' (pos (succ h')) (pos (succ a')) (pos (succ h))) ‚ü©
           y' ‚Ñ§* (pos (succ a') ‚Ñ§* (pos (succ h') ‚Ñ§* pos (succ h)))  ‚â°‚ü® ‚Ñ§*-assoc y' (pos (succ a')) (pos (succ h') ‚Ñ§* pos (succ h)) ‚ü©
           y' ‚Ñ§* pos (succ a') ‚Ñ§* (pos (succ h') ‚Ñ§* pos (succ h))    ‚â°‚ü® ap (y' ‚Ñ§* pos (succ a') ‚Ñ§*_) (pos-multiplication-equiv-to-‚Ñï (succ h') (succ h)) ‚ü©
           y' ‚Ñ§* pos (succ a') ‚Ñ§* pos (succ h' ‚Ñï* succ h)            ‚â°‚ü® ap (Œª z ‚Üí y' ‚Ñ§* pos (succ a') ‚Ñ§* pos z) (mult-commutativity (succ h') (succ h)) ‚ü©
           y' ‚Ñ§* pos (succ a') ‚Ñ§* pos (succ h ‚Ñï* succ h') ‚àé

‚Ñö-no-max-element : (p : ‚Ñö) ‚Üí Œ£ q Íûâ ‚Ñö , (p < q)
‚Ñö-no-max-element ((x , a) , Œ±) = q , III
 where
  q : ‚Ñö 
  q = to‚Ñö ((succ‚Ñ§ x) , a)

  x' : ‚Ñ§
  x' = pr‚ÇÅ (pr‚ÇÅ q)
  a' : ‚Ñï
  a' = pr‚ÇÇ (pr‚ÇÅ q)

  I : succ‚Ñ§ x ‚Ñ§* pos (succ a') ‚â° x' ‚Ñ§* pos (succ a)
  I = ‚âà-to‚Ñö ((succ‚Ñ§ x) , a)

  II : (x ‚Ñ§* pos (succ a')) ‚Ñ§< (succ‚Ñ§ x ‚Ñ§* pos (succ a'))
  II = positive-multiplication-preserves-order x (succ‚Ñ§ x) (pos (succ a')) (pos-succ-greater-than-zero a') (<-incr‚Ñ§ x)

  III : x ‚Ñ§* pos (succ a') ‚Ñ§< (x' ‚Ñ§* pos (succ a))
  III = transport (x ‚Ñ§* pos (succ a') ‚Ñ§<_) I II

‚Ñö-no-least-element : (q : ‚Ñö) ‚Üí Œ£ p Íûâ ‚Ñö , p < q
‚Ñö-no-least-element ((x , a) , Œ±) = p , III
 where
  p : ‚Ñö
  p = to‚Ñö ((pred‚Ñ§ x) , a)

  x' : ‚Ñ§
  x' = pr‚ÇÅ (pr‚ÇÅ p)
  a' : ‚Ñï
  a' = pr‚ÇÇ (pr‚ÇÅ p)

  I : pred‚Ñ§ x ‚Ñ§* pos (succ a') ‚â° x' ‚Ñ§* pos (succ a)
  I = ‚âà-to‚Ñö ((pred‚Ñ§ x) , a)

  II : (pred‚Ñ§ x ‚Ñ§* pos (succ a')) ‚Ñ§< (x ‚Ñ§* pos (succ a'))
  II = positive-multiplication-preserves-order (pred‚Ñ§ x) x (pos (succ a')) (pos-succ-greater-than-zero a') (<-pred‚Ñ§ x)

  III : x' ‚Ñ§* pos (succ a) ‚Ñ§< (x ‚Ñ§* pos (succ a'))
  III = transport (_‚Ñ§< x ‚Ñ§* pos (succ a')) I II

‚Ñö-trichotomous-lemma : Fun-Ext ‚Üí ((p , Œ±) (q , Œ≤) : ‚Ñö) ‚Üí p ‚Ñö‚Çô‚âà q ‚Üí p , Œ± ‚â° q , Œ≤
‚Ñö-trichotomous-lemma fe (p , Œ±) (q , Œ≤) e = to-subtype-‚â° (Œª - ‚Üí is-in-lowest-terms-is-prop fe -) (equiv-with-lowest-terms-is-equal p q e Œ± Œ≤)

‚Ñö-trichotomous : Fun-Ext ‚Üí (p q : ‚Ñö) ‚Üí (p < q) ‚àî (p ‚â° q) ‚àî (q < p)
‚Ñö-trichotomous fe ((x , a) , Œ±) ((y , b) , Œ≤) = f (‚Ñ§-trichotomous (x ‚Ñ§* pos (succ b)) (y ‚Ñ§* pos (succ a)))
 where
  f : (x ‚Ñ§* pos (succ b)) ‚Ñ§< (y ‚Ñ§* pos (succ a))
     ‚àî (x ‚Ñ§* pos (succ b) ‚â° y ‚Ñ§* pos (succ a))
     ‚àî (y ‚Ñ§* pos (succ a)) ‚Ñ§< (x ‚Ñ§* pos (succ b))
    ‚Üí  ((x , a) , Œ±) < ((y , b) , Œ≤)
     ‚àî ((x , a) , Œ± ‚â° (y , b) , Œ≤)
     ‚àî ((y , b) , Œ≤) < ((x , a) , Œ±)
  f (inl z)       = inl z
  f (inr (inl z)) = inr (inl (‚Ñö-trichotomous-lemma fe ((x , a) , Œ±) ((y , b) , Œ≤) z))
  f (inr (inr z)) = inr (inr z)
{-
‚Ñö-dichotomous : Fun-Ext ‚Üí (p q : ‚Ñö) ‚Üí (p ‚â§ q) ‚àî (q < p)
‚Ñö-dichotomous fe p q = I (‚Ñö-trichotomous fe p q)
 where
  I : (p < q) ‚àî (p ‚â° q) ‚àî (q < p) ‚Üí (p ‚â§ q) ‚àî (q < p)
  I (inl x)       = inl (inl x)
  I (inr (inl x)) = inl (inr (‚Ñö‚â°-to-‚Ñö‚Çô‚â° p q x))
  I (inr (inr x)) = inr x
-}
located-property : Fun-Ext ‚Üí (p q x : ‚Ñö) ‚Üí p < q ‚Üí (p < x) ‚àî (x < q) 
located-property fe p q x l = f (‚Ñö-trichotomous fe x q)
 where
  f : (x < q) ‚àî (x ‚â° q) ‚àî (q < x) ‚Üí (p < x) ‚àî (x < q) 
  f (inl z)       = inr z
  f (inr (inl z)) = inl (transport (p <_) (z ‚Åª¬π) l)
  f (inr (inr z)) = inl (‚Ñö<-trans p q x l z)


open MoreNaturalProperties
open NaturalsAddition renaming (_+_ to _‚Ñï+_) --Type Topology

rounded-lemma‚ÇÄ : (a : ‚Ñï) ‚Üí succ (2 ‚Ñï* pred (succ a)) ‚â° pred (2 ‚Ñï* (succ a))
rounded-lemma‚ÇÄ zero = refl
rounded-lemma‚ÇÄ (succ a) = succ (2 ‚Ñï* pred (succ (succ a))) ‚â°‚ü® ap (Œª - ‚Üí succ (2 ‚Ñï* -)) (pred-succ a) ‚ü©
                   succ (2 ‚Ñï* succ a)                ‚â°‚ü® pred-succ (2 ‚Ñï* succ a) ‚Åª¬π ‚ü©
                   pred (succ (succ (2 ‚Ñï* succ a)))  ‚â°‚ü® refl ‚ü©
                   pred (2 ‚Ñï* succ a ‚Ñï+ 2)           ‚â°‚ü® refl ‚ü©
                   pred (2 ‚Ñï* (succ a) ‚Ñï+ 2 ‚Ñï* 1)    ‚â°‚ü® ap pred (distributivity-mult-over-nat 2 (succ a) 1 ‚Åª¬π) ‚ü©
                   pred (2 ‚Ñï+ (2 ‚Ñï* (succ a)))       ‚â°‚ü® refl ‚ü©
                   pred (2 ‚Ñï* succ (succ a)) ‚àé

rounded-lemma : (p q : ‚Ñö) ‚Üí p < q ‚Üí Œ£ x Íûâ ‚Ñö , (p < x) √ó (x < q)
rounded-lemma ((x , a) , Œ±) ((y , b) , Œ≤) l = midpoint , firstly , secondly
 where
  midpoint : ‚Ñö
  midpoint = to‚Ñö (half-‚Ñö‚Çô ((x , a) ‚Ñö‚Çô+ (y , b)))

  z : ‚Ñ§
  z = pr‚ÇÅ (pr‚ÇÅ midpoint)
  c : ‚Ñï
  c = pr‚ÇÇ (pr‚ÇÅ midpoint)

  z' : ‚Ñ§
  z' = pr‚ÇÅ (half-‚Ñö‚Çô ((x , a) ‚Ñö‚Çô+ (y , b)))

  z'' : z' ‚â° x ‚Ñ§* pos (succ b) ‚Ñ§+ y ‚Ñ§* pos (succ a)
  z'' = refl

  c' : ‚Ñï
  c' = pr‚ÇÇ (half-‚Ñö‚Çô ((x , a) ‚Ñö‚Çô+ (y , b)))

  c'' : c' ‚â° succ (2 ‚Ñï* pred (succ a ‚Ñï* succ b))
  c'' = refl

  I : (z' , c') ‚Ñö‚Çô‚âà (z , c)
  I = ‚âà-to‚Ñö (half-‚Ñö‚Çô ((x , a) ‚Ñö‚Çô+ (y , b)))

  II : z' ‚Ñ§* pos (succ c) ‚â° z ‚Ñ§* pos (succ c')
  II = I

  III : Œ£ k Íûâ ‚Ñï , succ k ‚â° succ a ‚Ñï* succ b
  III = pos-mult-is-succ a b

  k : ‚Ñï
  k = pr‚ÇÅ III

  a' b' k' c''' : ‚Ñ§
  a' = pos (succ a)
  b' = pos (succ b)
  k' = pos (succ k)
  c''' = pos (succ c')
  
  IV : (x : ‚Ñ§) ‚Üí  x ‚Ñ§* pos (succ (succ (2 ‚Ñï* pred (succ a ‚Ñï* succ b)))) ‚â° x ‚Ñ§* a' ‚Ñ§* b' ‚Ñ§+ x ‚Ñ§* (a') ‚Ñ§* b'
  IV x = x ‚Ñ§* pos (succ (succ (2 ‚Ñï* pred (succ a ‚Ñï* succ b))))    ‚â°‚ü® ap (Œª - ‚Üí x ‚Ñ§* pos (succ (succ (2 ‚Ñï* pred -)))) ((pr‚ÇÇ III) ‚Åª¬π) ‚ü©
       x ‚Ñ§* pos (succ (succ (2 ‚Ñï* pred (succ k))))                ‚â°‚ü® ap (Œª - ‚Üí x ‚Ñ§* pos (succ -)) (rounded-lemma‚ÇÄ k) ‚ü©
       x ‚Ñ§* pos (succ (pred (2 ‚Ñï* succ k)))                       ‚â°‚ü® ap (Œª - ‚Üí x ‚Ñ§* pos -) (succ-pred' (2 ‚Ñï* succ k) Œª w ‚Üí ‚Ñï-positive-multiplication-not-zero 1 k w) ‚ü©
       x ‚Ñ§* pos (2 ‚Ñï* succ k)                                     ‚â°‚ü® ap (Œª - ‚Üí x ‚Ñ§* pos -) (mult-commutativity 2 (succ k)) ‚ü©
       x ‚Ñ§* pos (succ k ‚Ñï+ succ k)                                ‚â°‚ü® ap (Œª - ‚Üí x ‚Ñ§* -) (pos-addition-equiv-to-‚Ñï (succ k) (succ k)  ‚Åª¬π) ‚ü©
       x ‚Ñ§* (k' ‚Ñ§+ k')                                            ‚â°‚ü® distributivity-mult-over-‚Ñ§' (k') (k') x ‚ü©
       x ‚Ñ§* k' ‚Ñ§+ x ‚Ñ§* k'                                         ‚â°‚ü® ap (Œª - ‚Üí x ‚Ñ§* pos - ‚Ñ§+ x ‚Ñ§* pos -) (pr‚ÇÇ III) ‚ü©
       x ‚Ñ§* pos (succ a ‚Ñï* succ b) ‚Ñ§+ x ‚Ñ§* pos (succ a ‚Ñï* succ b) ‚â°‚ü® ap (Œª - ‚Üí (x ‚Ñ§* -) ‚Ñ§+ (x ‚Ñ§* -)) (pos-multiplication-equiv-to-‚Ñï (succ a) (succ b) ‚Åª¬π) ‚ü©
       x ‚Ñ§* (a' ‚Ñ§* b') ‚Ñ§+ x ‚Ñ§* (a' ‚Ñ§* b')                          ‚â°‚ü® ap (Œª - ‚Üí - ‚Ñ§+ -) (‚Ñ§*-assoc x (a') (b')) ‚ü©
       x ‚Ñ§* a' ‚Ñ§* b' ‚Ñ§+ x ‚Ñ§* a' ‚Ñ§* b' ‚àé

  V : (x ‚Ñ§* b' ‚Ñ§+ y ‚Ñ§* a') ‚Ñ§* a' ‚â° x ‚Ñ§* a' ‚Ñ§* b' ‚Ñ§+ y ‚Ñ§* (a') ‚Ñ§* a'
  V = (x ‚Ñ§* b' ‚Ñ§+ y ‚Ñ§* a') ‚Ñ§* a' ‚â°‚ü® distributivity-mult-over-‚Ñ§ (x ‚Ñ§* b') ( y ‚Ñ§* a') (a') ‚ü©
         x ‚Ñ§* b' ‚Ñ§* a' ‚Ñ§+ y ‚Ñ§* a' ‚Ñ§* a' ‚â°‚ü® ap (Œª - ‚Üí - ‚Ñ§+ y ‚Ñ§* a' ‚Ñ§* a') (‚Ñ§-mult-rearrangement x (b') (a'))  ‚ü©
         x ‚Ñ§* a' ‚Ñ§* b' ‚Ñ§+ y ‚Ñ§* a' ‚Ñ§* a' ‚àé

  VI : (x ‚Ñ§* a' ‚Ñ§* b' ‚Ñ§+ x ‚Ñ§* a' ‚Ñ§* b') ‚Ñ§< (x ‚Ñ§* a' ‚Ñ§* b' ‚Ñ§+ y ‚Ñ§* a' ‚Ñ§* a')
  VI = ‚Ñ§<-adding'' (x ‚Ñ§* a' ‚Ñ§* b') (y ‚Ñ§* a' ‚Ñ§* a') (x ‚Ñ§* a' ‚Ñ§* b') ii
   where
    i : (x ‚Ñ§* b' ‚Ñ§* a') ‚Ñ§< (y ‚Ñ§* a' ‚Ñ§* a')
    i = positive-multiplication-preserves-order (x ‚Ñ§* b') (y ‚Ñ§* a') (a') (pos-succ-greater-than-zero a) l

    ii : (x ‚Ñ§* a' ‚Ñ§* b') ‚Ñ§< (y ‚Ñ§* a' ‚Ñ§* a')
    ii = transport (_‚Ñ§< y ‚Ñ§* a' ‚Ñ§* a') (‚Ñ§-mult-rearrangement x (b') (a')) i

  VII : (x ‚Ñ§* pos (succ (succ (2 ‚Ñï* pred (succ a ‚Ñï* succ b))))) ‚Ñ§< ((x ‚Ñ§* b' ‚Ñ§+ y ‚Ñ§* a') ‚Ñ§* a')
  VII = transport‚ÇÇ _‚Ñ§<_ (IV x ‚Åª¬π) (V ‚Åª¬π) VI

  VIII : x ‚Ñ§* c''' ‚Ñ§< z' ‚Ñ§* a'
  VIII = VII

  IX : (x ‚Ñ§* c''' ‚Ñ§* pos (succ c)) ‚Ñ§< (z' ‚Ñ§* a' ‚Ñ§* pos (succ c)) 
  IX = positive-multiplication-preserves-order (x ‚Ñ§* c''') (z' ‚Ñ§* a') (pos (succ c)) (pos-succ-greater-than-zero c) VIII

  X : (x ‚Ñ§* pos (succ c) ‚Ñ§* c''') ‚Ñ§< (z ‚Ñ§* a' ‚Ñ§* c''')
  X = transport‚ÇÇ _‚Ñ§<_ i ii IX
   where
    i : x ‚Ñ§* c''' ‚Ñ§* pos (succ c) ‚â° x ‚Ñ§* pos (succ c) ‚Ñ§* c'''
    i = ‚Ñ§-mult-rearrangement x (c''') (pos (succ c)) 

    ii : z' ‚Ñ§* a' ‚Ñ§* pos (succ c) ‚â° z ‚Ñ§* a' ‚Ñ§* c'''
    ii = z' ‚Ñ§* a' ‚Ñ§* pos (succ c) ‚â°‚ü® ‚Ñ§-mult-rearrangement z' (a') (pos (succ c)) ‚ü©
         z' ‚Ñ§* pos (succ c) ‚Ñ§* a' ‚â°‚ü® ap (_‚Ñ§* a') II ‚ü©
         z ‚Ñ§* c''' ‚Ñ§* a' ‚â°‚ü® ‚Ñ§-mult-rearrangement z (c''') (a') ‚ü©
         z ‚Ñ§* a' ‚Ñ§* c''' ‚àé

  firstly : (x ‚Ñ§* pos (succ c)) ‚Ñ§< (z ‚Ñ§* a')
  firstly = ordering-right-cancellable (x ‚Ñ§* pos (succ c)) (z ‚Ñ§* a') (c''') (pos-succ-greater-than-zero c') X

  XI : x ‚Ñ§* b' ‚Ñ§* b' ‚Ñ§+ y ‚Ñ§* a' ‚Ñ§* b' ‚â° (x ‚Ñ§* (b') ‚Ñ§+ y ‚Ñ§* a') ‚Ñ§* b'
  XI = x ‚Ñ§* b' ‚Ñ§* b' ‚Ñ§+ y ‚Ñ§* a' ‚Ñ§* b' ‚â°‚ü® distributivity-mult-over-‚Ñ§ (x ‚Ñ§* b') ( y ‚Ñ§* a') (b') ‚Åª¬π ‚ü©
         (x ‚Ñ§* b' ‚Ñ§+ y ‚Ñ§* a') ‚Ñ§* b' ‚àé

  XII : y ‚Ñ§* a' ‚Ñ§* b' ‚Ñ§+ y ‚Ñ§* (a') ‚Ñ§* b' ‚â° y ‚Ñ§* pos (succ (succ (2 ‚Ñï* pred (succ a ‚Ñï* (succ b)))))
  XII = IV y ‚Åª¬π

  XIII : x ‚Ñ§* b' ‚Ñ§* b' ‚Ñ§+ y ‚Ñ§* a' ‚Ñ§* b' ‚Ñ§< y ‚Ñ§* a' ‚Ñ§* b' ‚Ñ§+ y ‚Ñ§* a' ‚Ñ§* b'
  XIII = ‚Ñ§<-adding' (x ‚Ñ§* b' ‚Ñ§* b') (y ‚Ñ§* a' ‚Ñ§* b') (y ‚Ñ§* a' ‚Ñ§* b') i
   where
    i : (x ‚Ñ§* b' ‚Ñ§* b') ‚Ñ§< (y ‚Ñ§* a' ‚Ñ§* b')
    i = positive-multiplication-preserves-order (x ‚Ñ§* b') (y ‚Ñ§* a') (b') (pos-succ-greater-than-zero b) l

  XIV : (z' ‚Ñ§* b') ‚Ñ§< (y ‚Ñ§* c''')
  XIV = transport‚ÇÇ _‚Ñ§<_ XI XII XIII

  XV : (z' ‚Ñ§* b' ‚Ñ§* pos (succ c)) ‚Ñ§< (y ‚Ñ§* c''' ‚Ñ§* pos (succ c))
  XV = positive-multiplication-preserves-order (z' ‚Ñ§* b') (y ‚Ñ§* c''') (pos (succ c)) (pos-succ-greater-than-zero c') XIV

  XVI : (z ‚Ñ§* b') ‚Ñ§* c''' ‚Ñ§< (y ‚Ñ§* pos (succ c)) ‚Ñ§* c'''
  XVI = transport‚ÇÇ _‚Ñ§<_ i ii XV
   where
    i : z' ‚Ñ§* b' ‚Ñ§* pos (succ c) ‚â° z ‚Ñ§* b' ‚Ñ§* c'''
    i = z' ‚Ñ§* b' ‚Ñ§* pos (succ c) ‚â°‚ü® ‚Ñ§-mult-rearrangement z' (b') (pos (succ c)) ‚ü©
        z' ‚Ñ§* pos (succ c) ‚Ñ§* b' ‚â°‚ü® ap (_‚Ñ§* b') II ‚ü©
        z ‚Ñ§* c''' ‚Ñ§* b' ‚â°‚ü® ‚Ñ§-mult-rearrangement z (c''') (b') ‚ü©
        z ‚Ñ§* b' ‚Ñ§* c''' ‚àé

    ii : y ‚Ñ§* c''' ‚Ñ§* pos (succ c) ‚â° y ‚Ñ§* pos (succ c) ‚Ñ§* c'''
    ii = ‚Ñ§-mult-rearrangement y (c''') (pos (succ c))

  secondly : (z ‚Ñ§* b') ‚Ñ§< (y ‚Ñ§* pos (succ c))
  secondly = ordering-right-cancellable (z ‚Ñ§* b') (y ‚Ñ§* pos (succ c)) (c''') (pos-succ-greater-than-zero c') XVI

‚Ñö-zero-not-one : Fun-Ext ‚Üí ¬¨ (zero-‚Ñö ‚â° 1‚Ñö)
‚Ñö-zero-not-one fe e = positive-not-zero 0 (pos-lc V ‚Åª¬π)
 where
  I : ((pos 0 , 0) ‚Ñö‚Çô‚âà (pos 1 , 0)) ‚áî to‚Ñö (pos 0 , 0) ‚â° to‚Ñö (pos 1 , 0) 
  I = equiv-equality fe ((pos 0) , 0) ((pos 1) , 0)

  II : to‚Ñö (pos 0 , 0) ‚â° to‚Ñö (pos 1 , 0) ‚Üí (pos 0 , 0) ‚Ñö‚Çô‚âà (pos 1 , 0)
  II = pr‚ÇÇ I

  III : (pos 0 , 0) ‚Ñö‚Çô‚âà (pos 1 , 0)
  III = II e

  IV : pos 0 ‚Ñ§* pos 1 ‚â° pos 1 ‚Ñ§* pos 1
  IV = III

  V : pos 0 ‚â° pos 1
  V = pos 0          ‚â°‚ü® refl ‚ü©
      pos 0 ‚Ñ§* pos 1 ‚â°‚ü® IV   ‚ü©
      pos 1 ‚Ñ§* pos 1 ‚â°‚ü® refl ‚ü©
      pos 1          ‚àé

‚Ñö-zero-left-neutral : Fun-Ext ‚Üí (q : ‚Ñö) ‚Üí zero-‚Ñö + q ‚â° q
‚Ñö-zero-left-neutral fe q = II
 where
  I : Œ£ q' Íûâ ‚Ñö‚Çô , q ‚â° to‚Ñö q'
  I = q-has-qn fe q

  q' : ‚Ñö‚Çô
  q' = pr‚ÇÅ I

  II : (zero-‚Ñö + q) ‚â° q
  II = zero-‚Ñö + q               ‚â°‚ü® refl ‚ü©
       to‚Ñö ((pos 0 , 0) ‚Ñö‚Çô+ q') ‚â°‚ü® ap to‚Ñö (‚Ñö‚Çô+-comm (pos 0 , 0) q') ‚ü©
       to‚Ñö (q' ‚Ñö‚Çô+ (pos 0 , 0)) ‚â°‚ü® ap to‚Ñö (‚Ñö‚Çô-zero-right-neutral q') ‚ü©
       to‚Ñö q'                   ‚â°‚ü® pr‚ÇÇ I ‚Åª¬π ‚ü©
       q                        ‚àé

‚Ñö-zero-right-neutral : Fun-Ext ‚Üí (q : ‚Ñö) ‚Üí q + zero-‚Ñö ‚â° q
‚Ñö-zero-right-neutral fe q = ‚Ñö+-comm q zero-‚Ñö ‚àô (‚Ñö-zero-left-neutral fe q)

‚Ñö-mult-left-id : Fun-Ext ‚Üí (q : ‚Ñö) ‚Üí 1‚Ñö * q ‚â° q
‚Ñö-mult-left-id fe q = II
 where
  I : Œ£ q' Íûâ ‚Ñö‚Çô , q ‚â° to‚Ñö q'
  I = q-has-qn fe q 
  
  q' : ‚Ñö‚Çô
  q' = pr‚ÇÅ I

  II : (1‚Ñö * q) ‚â° q
  II = (1‚Ñö * q)                    ‚â°‚ü® refl ‚ü©
        to‚Ñö ((pos 1 , 0) ‚Ñö‚Çô* q')   ‚â°‚ü® ap to‚Ñö (‚Ñö‚Çô-mult-left-id q') ‚ü©
        to‚Ñö q'                     ‚â°‚ü® pr‚ÇÇ I ‚Åª¬π ‚ü©
        q ‚àé

‚Ñö-mult-right-id : Fun-Ext ‚Üí (q : ‚Ñö) ‚Üí q * 1‚Ñö ‚â° q
‚Ñö-mult-right-id fe q = ‚Ñö*-comm q 1‚Ñö ‚àô ‚Ñö-mult-left-id fe q 

‚Ñö-distributivity : Fun-Ext ‚Üí (p q r : ‚Ñö) ‚Üí p * (q + r) ‚â° (p * q) + (p * r) 
‚Ñö-distributivity fe p q r = II
 where
  pnc : Œ£ p' Íûâ ‚Ñö‚Çô , p ‚â° to‚Ñö p'
  pnc = q-has-qn fe p

  qnc : Œ£ q' Íûâ ‚Ñö‚Çô , q ‚â° to‚Ñö q'
  qnc = q-has-qn fe q

  rnc : Œ£ r' Íûâ ‚Ñö‚Çô , r ‚â° to‚Ñö r'
  rnc = q-has-qn fe r

  p' q' r' : ‚Ñö‚Çô
  p' = pr‚ÇÅ pnc
  q' = pr‚ÇÅ qnc
  r' = pr‚ÇÅ rnc

  I : (p' ‚Ñö‚Çô* (q' ‚Ñö‚Çô+ r')) ‚Ñö‚Çô‚âà ((p' ‚Ñö‚Çô* q') ‚Ñö‚Çô+ (p' ‚Ñö‚Çô* r')) ‚Üí to‚Ñö (p' ‚Ñö‚Çô* (q' ‚Ñö‚Çô+ r')) ‚â° to‚Ñö ((p' ‚Ñö‚Çô* q') ‚Ñö‚Çô+ (p' ‚Ñö‚Çô* r')) 
  I = lr-implication (equiv-equality fe (p' ‚Ñö‚Çô* (q' ‚Ñö‚Çô+ r')) ((p' ‚Ñö‚Çô* q') ‚Ñö‚Çô+ (p' ‚Ñö‚Çô* r')))

  II : p * (q + r) ‚â° (p * q) + (p * r)
  II = p * (q + r)                             ‚â°‚ü® refl ‚ü©
       p * to‚Ñö (q' ‚Ñö‚Çô+ r')                     ‚â°‚ü® ap (Œª - ‚Üí - * to‚Ñö (q' ‚Ñö‚Çô+ r')) (pr‚ÇÇ pnc) ‚ü©
       to‚Ñö p' * to‚Ñö (q' ‚Ñö‚Çô+ r')                ‚â°‚ü® to‚Ñö-over-mult fe p' (q' ‚Ñö‚Çô+ r') ‚Åª¬π ‚ü©
       to‚Ñö (p' ‚Ñö‚Çô* (q' ‚Ñö‚Çô+ r'))                ‚â°‚ü® I (‚Ñö-dist-lemma p' q' r') ‚ü©
       to‚Ñö ((p' ‚Ñö‚Çô* q') ‚Ñö‚Çô+ (p' ‚Ñö‚Çô* r'))       ‚â°‚ü® to‚Ñö-over-addition fe (p' ‚Ñö‚Çô* q') (p' ‚Ñö‚Çô* r') ‚ü©
       to‚Ñö (p' ‚Ñö‚Çô* q') + to‚Ñö (p' ‚Ñö‚Çô* r')       ‚â°‚ü® refl ‚ü©
       (p * q) + (p * r)  ‚àé

‚Ñö‚Çô- : ‚Ñö‚Çô ‚Üí ‚Ñö‚Çô
‚Ñö‚Çô- (x , a) = ‚Ñ§- x , a

-_ : ‚Ñö ‚Üí ‚Ñö
- ((x , a) , p) = to‚Ñö (‚Ñö‚Çô- (x , a))

to‚Ñö-over-minus : Fun-Ext ‚Üí ((x , a) : ‚Ñö‚Çô) ‚Üí (- to‚Ñö (x , a)) ‚â° to‚Ñö (‚Ñ§- x , a) 
to‚Ñö-over-minus fe (x , a) = IV
 where
  p : ‚Ñö
  p = to‚Ñö (x , a)

  x' : ‚Ñ§
  x' = pr‚ÇÅ (pr‚ÇÅ p)
  a' : ‚Ñï
  a' = pr‚ÇÇ (pr‚ÇÅ p)

  helper : (‚Ñ§- x' , a') ‚Ñö‚Çô‚âà (‚Ñ§- x , a) ‚Üí to‚Ñö (‚Ñ§- x' , a') ‚â° to‚Ñö (‚Ñ§- x , a)
  helper = pr‚ÇÅ (equiv-equality fe (‚Ñ§- x' , a') (‚Ñ§- x , a))

  I : (x , a) ‚Ñö‚Çô‚âà (x' , a')
  I = ‚âà-to‚Ñö (x , a)

  II : (x' , a') ‚Ñö‚Çô‚âà (x , a)
  II = ‚âà-sym (x , a) (x' , a') I

  III : x' ‚Ñ§* pos (succ a) ‚â° x ‚Ñ§* pos (succ a') ‚Üí (‚Ñ§- x' , a') ‚Ñö‚Çô‚âà (‚Ñ§- x , a)
  III e = (‚Ñ§- x') ‚Ñ§* pos (succ a)   ‚â°‚ü® subtraction-dist-over-mult' x' (pos (succ a)) ‚ü©
          ‚Ñ§- (x' ‚Ñ§* pos (succ a))   ‚â°‚ü® ap ‚Ñ§-_ e ‚ü©
          ‚Ñ§- (x ‚Ñ§* pos (succ a'))   ‚â°‚ü® subtraction-dist-over-mult' x (pos (succ a')) ‚Åª¬π ‚ü©
          (‚Ñ§- x) ‚Ñ§* pos (succ a') ‚àé

  IV : (- to‚Ñö (x , a)) ‚â° to‚Ñö (‚Ñ§- x , a) 
  IV = (- to‚Ñö (x , a))       ‚â°‚ü® refl ‚ü©
        (- p)                ‚â°‚ü® refl ‚ü©
        to‚Ñö (‚Ñ§- x' , a')     ‚â°‚ü® helper (III II) ‚ü©
        to‚Ñö (‚Ñ§- x , a)  ‚àé 

‚Ñö-minus-dist : Fun-Ext ‚Üí (p q : ‚Ñö) ‚Üí (- p) + (- q) ‚â° - (p + q)
‚Ñö-minus-dist fe ((x , a) , p) ((y , b) , q) = II
 where
  pnc : Œ£ p' Íûâ ‚Ñö‚Çô , ((x , a) , p) ‚â° to‚Ñö p'
  pnc = q-has-qn fe ((x , a) , p)

  qnc : Œ£ q' Íûâ ‚Ñö‚Çô , ((y , b) , q) ‚â° to‚Ñö q'
  qnc = q-has-qn fe ((y , b) , q)

  p' q' : ‚Ñö‚Çô
  p' = pr‚ÇÅ pnc
  q' = pr‚ÇÅ qnc

  x' y' : ‚Ñ§
  x' = pr‚ÇÅ p'
  y' = pr‚ÇÅ q'

  a' b' : ‚Ñï
  a' = pr‚ÇÇ p'
  b' = pr‚ÇÇ q'

  pqnc : Œ£ pq Íûâ ‚Ñö‚Çô , (to‚Ñö (p' ‚Ñö‚Çô+ q')) ‚â° to‚Ñö pq
  pqnc = q-has-qn fe (to‚Ñö (p' ‚Ñö‚Çô+ q'))

  pq : ‚Ñö‚Çô
  pq = pr‚ÇÅ pqnc

  z : ‚Ñ§
  z = pr‚ÇÅ pq

  c : ‚Ñï
  c = pr‚ÇÇ pq

  I : ((‚Ñ§- x , a) ‚Ñö‚Çô+ (‚Ñ§- y , b)) ‚Ñö‚Çô‚âà (((‚Ñ§- x') , a') ‚Ñö‚Çô+ ((‚Ñ§- y') , b')) ‚Üí to‚Ñö ((‚Ñ§- x , a) ‚Ñö‚Çô+ (‚Ñ§- y , b)) ‚â° to‚Ñö (((‚Ñ§- x') , a') ‚Ñö‚Çô+ ((‚Ñ§- y') , b')) 
  I = lr-implication (equiv-equality fe ((‚Ñ§- x , a) ‚Ñö‚Çô+ (‚Ñ§- y , b)) (((‚Ñ§- x') , a') ‚Ñö‚Çô+ ((‚Ñ§- y') , b')))

  II : (- ((x , a) , p)) + (- ((y , b) , q)) ‚â° - (((x , a) , p) + ((y , b) , q))
  II = ((- ((x , a) , p)) + (- ((y , b) , q)))                                                      ‚â°‚ü® refl ‚ü©
       (to‚Ñö ((‚Ñ§- x) , a) + to‚Ñö ((‚Ñ§- y) , b))                                                        ‚â°‚ü® to‚Ñö-over-addition fe (‚Ñ§- x , a) (‚Ñ§- y , b) ‚Åª¬π  ‚ü©
       to‚Ñö ((‚Ñ§- x , a) ‚Ñö‚Çô+ (‚Ñ§- y , b))                                                              ‚â°‚ü® I refl ‚ü©
       to‚Ñö (((‚Ñ§- x') , a') ‚Ñö‚Çô+ ((‚Ñ§- y') , b'))                                                      ‚â°‚ü® ap‚ÇÇ (Œª Œ± Œ≤ ‚Üí to‚Ñö (Œ± ‚Ñ§+ Œ≤ ,  pred (succ a' ‚Ñï* succ b'))) (subtraction-dist-over-mult' x' (pos (succ b'))) (subtraction-dist-over-mult' y' (pos (succ a'))) ‚ü©
       to‚Ñö (((‚Ñ§- x' ‚Ñ§* pos (succ b')) ‚Ñ§+ (‚Ñ§- y' ‚Ñ§* pos (succ a'))) , ( pred (succ a' ‚Ñï* succ b'))) ‚â°‚ü® ap (Œª - ‚Üí to‚Ñö (- , pred (succ a' ‚Ñï* succ b'))) (subtraction-dist (x' ‚Ñ§* pos (succ b')) (y' ‚Ñ§* pos (succ a'))) ‚ü©
       to‚Ñö ((‚Ñ§- x' ‚Ñ§* pos (succ b') ‚Ñ§+ y' ‚Ñ§* pos (succ a')) , ( pred (succ a' ‚Ñï* succ b')))        ‚â°‚ü® to‚Ñö-over-minus fe ((x' ‚Ñ§* pos (succ b') ‚Ñ§+ y' ‚Ñ§* pos (succ a') , pred (succ a' ‚Ñï* succ b'))) ‚Åª¬π ‚ü©
       (- to‚Ñö (x' ‚Ñ§* pos (succ b') ‚Ñ§+ y' ‚Ñ§* pos (succ a') , pred (succ a' ‚Ñï* succ b')))            ‚â°‚ü® refl ‚ü©
       (- to‚Ñö (p' ‚Ñö‚Çô+ q'))                                                                          ‚â°‚ü® refl ‚ü©
       (- (((x , a) , p) + ((y , b) , q))) ‚àé

‚Ñö-minus-zero-is-zero : zero-‚Ñö ‚â° - zero-‚Ñö 
‚Ñö-minus-zero-is-zero = refl

‚Ñö+-inverse-lemma : ((x , a) : ‚Ñö‚Çô) ‚Üí ((‚Ñ§- x , a) ‚Ñö‚Çô+ (x , a)) ‚Ñö‚Çô‚âà (pos zero , zero)
‚Ñö+-inverse-lemma (x , a) = I
 where
  I : ((‚Ñ§- x , a) ‚Ñö‚Çô+ (x , a)) ‚Ñö‚Çô‚âà (pos zero , zero)
  I = ((‚Ñ§- x) ‚Ñ§* pos (succ a) ‚Ñ§+ (x ‚Ñ§* pos (succ a))) ‚Ñ§* pos 1 ‚â°‚ü® ‚Ñ§-mult-right-id ((‚Ñ§- x) ‚Ñ§* pos (succ a) ‚Ñ§+ (x ‚Ñ§* pos (succ a))) ‚ü©
      ((‚Ñ§- x) ‚Ñ§* pos (succ a) ‚Ñ§+ (x ‚Ñ§* pos (succ a)))          ‚â°‚ü® distributivity-mult-over-‚Ñ§ (‚Ñ§- x) x (pos (succ a)) ‚Åª¬π ‚ü©
      ((‚Ñ§- x) ‚Ñ§+ x) ‚Ñ§* pos (succ a)                            ‚â°‚ü® ap (Œª - ‚Üí - ‚Ñ§* pos (succ a)) (‚Ñ§+-comm (‚Ñ§- x) x)  ‚ü©
      (x ‚Ñ§+ (‚Ñ§- x)) ‚Ñ§* pos (succ a)                            ‚â°‚ü® ap (Œª - ‚Üí - ‚Ñ§* pos (succ a)) (‚Ñ§-sum-of-inverse-is-zero x) ‚ü©
      pos 0 ‚Ñ§* pos (succ a)                                    ‚â°‚ü® ‚Ñ§-zero-left-is-zero (pos (succ a)) ‚ü©
      pos 0                                                    ‚â°‚ü® ‚Ñ§-zero-left-is-zero (pos (succ (pred (succ a ‚Ñï* succ a)))) ‚Åª¬π  ‚ü©
      pos zero ‚Ñ§* pos (succ (pred (succ a ‚Ñï* succ a)))     ‚àé

‚Ñö-inverse-sum-to-zero : Fun-Ext ‚Üí (q : ‚Ñö) ‚Üí q + (- q) ‚â° zero-‚Ñö
‚Ñö-inverse-sum-to-zero fe ((x , a) , p) = Œ≥
 where
  -qnc : Œ£ (x' , y') Íûâ ‚Ñö‚Çô , to‚Ñö (‚Ñ§- x , a) ‚â° to‚Ñö (x' , y') 
  -qnc = q-has-qn fe (to‚Ñö (‚Ñ§- x , a))

  x' : ‚Ñ§
  x' = pr‚ÇÅ (pr‚ÇÅ -qnc)

  y' : ‚Ñï
  y' = pr‚ÇÇ (pr‚ÇÅ -qnc)

  I : ((x , a) ‚Ñö‚Çô+ (x' , y')) ‚Ñö‚Çô‚âà (pos zero , zero) ‚Üí to‚Ñö ((x , a) ‚Ñö‚Çô+ (x' , y')) ‚â° to‚Ñö ((pos zero , zero))
  I = lr-implication (equiv-equality fe ((x , a) ‚Ñö‚Çô+ (x' , y')) (pos zero , zero))

  II : (x , a) ‚Ñö‚Çô+ (x' , y') ‚Ñö‚Çô‚âà ((x' , y') ‚Ñö‚Çô+ (x , a))
  II = ‚âà-addition-comm (x , a) (x' , y')

  III·µ¢ : (x' , y') ‚Ñö‚Çô‚âà (‚Ñ§- x , a)
  III·µ¢ = ‚âà-sym (‚Ñ§- x , a) (x' , y') (rl-implication (equiv-equality fe (‚Ñ§- x , a) (x' , y')) (pr‚ÇÇ -qnc))

  III : ((x' , y') ‚Ñö‚Çô+ (x , a)) ‚Ñö‚Çô‚âà ((‚Ñ§- x , a) ‚Ñö‚Çô+ (x , a))
  III = ‚âà-addition (x' , y') (‚Ñ§- x , a) (x , a) III·µ¢

  IV·µ¢ : (x , a) ‚Ñö‚Çô+ (x' , y') ‚Ñö‚Çô‚âà ((‚Ñ§- x , a) ‚Ñö‚Çô+ (x , a))
  IV·µ¢ = ‚âà-trans ((x , a) ‚Ñö‚Çô+ (x' , y')) ((x' , y') ‚Ñö‚Çô+ (x , a)) ((‚Ñ§- x , a) ‚Ñö‚Çô+ (x , a)) II III

  IV : ((‚Ñ§- x , a) ‚Ñö‚Çô+ (x , a)) ‚Ñö‚Çô‚âà (pos zero , zero)
  IV = ‚Ñö+-inverse-lemma (x , a)

  V : ((x , a) ‚Ñö‚Çô+ (x' , y')) ‚Ñö‚Çô‚âà (pos zero , zero)
  V = ‚âà-trans ((x , a) ‚Ñö‚Çô+ (x' , y')) ((‚Ñ§- x , a) ‚Ñö‚Çô+ (x , a)) ((pos zero , zero)) IV·µ¢ IV

  Œ≥ : (((x , a) , p) + (- ((x , a) , p))) ‚â° zero-‚Ñö
  Œ≥ = (((x , a) , p) + (- ((x , a) , p)))     ‚â°‚ü® refl ‚ü©
      (((x , a) , p) + to‚Ñö (‚Ñ§- x , a))        ‚â°‚ü® refl ‚ü©
      to‚Ñö ((x , a) ‚Ñö‚Çô+ (x' , y'))             ‚â°‚ü® I V ‚ü©
      to‚Ñö (pos zero , zero)                   ‚â°‚ü® refl ‚ü©
      zero-‚Ñö ‚àé

‚Ñö-inverse-sum-to-zero' : Fun-Ext ‚Üí (q : ‚Ñö) ‚Üí (- q) + q ‚â° zero-‚Ñö
‚Ñö-inverse-sum-to-zero' fe q = ‚Ñö+-comm (- q) q ‚àô ‚Ñö-inverse-sum-to-zero fe q

‚Ñö+-inverse : Fun-Ext ‚Üí (q : ‚Ñö) ‚Üí Œ£ q' Íûâ ‚Ñö , q + q' ‚â° zero-‚Ñö
‚Ñö+-inverse fe q = (- q) , (‚Ñö-inverse-sum-to-zero fe q)

‚Ñö+-inverse' : Fun-Ext ‚Üí (q : ‚Ñö) ‚Üí Œ£ q' Íûâ ‚Ñö , q' + q ‚â° zero-‚Ñö
‚Ñö+-inverse' fe q = f (‚Ñö+-inverse fe q)
  where
   f : Œ£ q' Íûâ ‚Ñö , q + q' ‚â° zero-‚Ñö ‚Üí Œ£ q' Íûâ ‚Ñö , q' + q ‚â° zero-‚Ñö
   f (q' , e) = q' , (‚Ñö+-comm q' q ‚àô e)

open NaturalsDivision

numerator-zero-is-zero : Fun-Ext ‚Üí (((x , a) , p) : ‚Ñö) ‚Üí x ‚â° pos zero ‚Üí ((x , a) , p) ‚â° zero-‚Ñö
numerator-zero-is-zero fe ((negsucc x    , a) , p) e = ùüò-elim (neg-not-positive e)
numerator-zero-is-zero fe ((pos zero , a) , icd , f) e = to-subtype-‚â° (is-in-lowest-terms-is-prop fe) I
 where
  I : pos zero , a ‚â° pos zero , 0
  I = ap‚ÇÇ _,_ refl (succ-lc II)
   where    
    II : succ a ‚â° 1
    II = ‚à£-anti (succ a) 1 (f (succ a) ((0 , refl) , 1 , refl)) (pr‚ÇÇ icd)
numerator-zero-is-zero fe ((pos (succ x) , a) , p) e = ùüò-elim (positive-not-zero x (pos-lc e))

--Maybe consider implementation of division and it's properties
multiplicative-inverse : Fun-Ext ‚Üí (q : ‚Ñö) ‚Üí ¬¨ (q ‚â° zero-‚Ñö) ‚Üí ‚Ñö 
multiplicative-inverse fe ((pos zero     , a) , p) nz = ùüò-elim (nz (numerator-zero-is-zero fe (((pos zero , a) , p)) refl))
multiplicative-inverse fe ((pos (succ x) , a) , p) nz = to‚Ñö ((pos (succ a)) , x)
multiplicative-inverse fe ((negsucc x    , a) , p) nz = to‚Ñö ((negsucc  a) , x)

‚Ñö*-inverse-lemma‚ÇÄ : Fun-Ext ‚Üí ((x , a) : ‚Ñö‚Çô) ‚Üí x ‚â° pos (succ a) ‚Üí to‚Ñö (x , a) ‚â° 1‚Ñö
‚Ñö*-inverse-lemma‚ÇÄ fe (negsucc x    , a) e = ùüò-elim (neg-not-positive e)
‚Ñö*-inverse-lemma‚ÇÄ fe (pos 0        , a) e = ùüò-elim (zero-not-positive a (pos-lc e))
‚Ñö*-inverse-lemma‚ÇÄ fe (pos (succ x) , a) e = I II
 where
  I : (pos (succ x) , a) ‚Ñö‚Çô‚âà (pos 1 , 0) ‚Üí to‚Ñö (pos (succ x) , a) ‚â° to‚Ñö (pos 1 , 0)
  I = lr-implication (equiv-equality fe (pos (succ x) , a) (pos (succ 0) , 0))

  II : (pos (succ x) , a) ‚Ñö‚Çô‚âà (pos 1 , 0)
  II = pos (succ x) ‚â°‚ü® e ‚ü©
       pos (succ a) ‚â°‚ü® ‚Ñ§-mult-left-id (pos (succ a)) ‚Åª¬π ‚ü©
       pos 1 ‚Ñ§* pos (succ a) ‚àé

‚Ñö*-inverse-lemma‚ÇÅ : Fun-Ext ‚Üí (((x , a) , p) : ‚Ñö) ‚Üí ((x , a) , p) ‚â° to‚Ñö (x , a)
‚Ñö*-inverse-lemma‚ÇÅ fe ((x , a) , p) = II
 where
  I : (x , a) ‚Ñö‚Çô‚âà to‚Ñö‚Çô (to‚Ñö (x , a))
  I = ‚âà-to‚Ñö (x , a)

  II : ((x , a) , p) ‚â° to‚Ñö (x , a)
  II = to-subtype-‚â° (is-in-lowest-terms-is-prop fe) (equiv-with-lowest-terms-is-equal (x , a) (pr‚ÇÅ (to‚Ñö (x , a))) I p (pr‚ÇÇ (to‚Ñö (x , a))))

‚Ñö*-inverse-product-is-one : (fe : Fun-Ext) ‚Üí (q : ‚Ñö) ‚Üí (nz : ¬¨ (q ‚â° zero-‚Ñö)) ‚Üí q * multiplicative-inverse fe q nz ‚â° 1‚Ñö
‚Ñö*-inverse-product-is-one fe ((pos zero     , a) , p) nz = ùüò-elim (nz (numerator-zero-is-zero fe ((pos zero , a) , p) refl))
‚Ñö*-inverse-product-is-one fe ((pos (succ x) , a) , p) nz = Œ≥
 where
  œà : pos (succ x) ‚Ñ§* pos (succ a) ‚â° pos (succ (pred (succ a ‚Ñï* succ x)))
  œà = pos (succ x) ‚Ñ§* pos (succ a) ‚â°‚ü® ‚Ñ§*-comm (pos (succ x)) (pos (succ a)) ‚ü©
      pos (succ a) ‚Ñ§* pos (succ x) ‚â°‚ü® denom-setup a x ‚Åª¬π ‚ü©
      pos (succ (pred (succ a ‚Ñï* succ x))) ‚àé

  Œ≥ : ((pos (succ x) , a) , p) * to‚Ñö ((pos (succ a)) , x) ‚â° 1‚Ñö
  Œ≥ = ((pos (succ x) , a) , p) * to‚Ñö ((pos (succ a)) , x)    ‚â°‚ü® ap (_* to‚Ñö (pos (succ a) , x)) (‚Ñö*-inverse-lemma‚ÇÅ fe ((pos (succ x) , a) , p)) ‚ü©
      to‚Ñö (pos (succ x) , a) * to‚Ñö (pos (succ a) , x)        ‚â°‚ü® to‚Ñö-over-mult fe (pos (succ x) , a) (pos (succ a) , x) ‚Åª¬π ‚ü©
      to‚Ñö ((pos (succ x) , a) ‚Ñö‚Çô* (pos (succ a) , x))        ‚â°‚ü® refl ‚ü©
      to‚Ñö ((pos (succ x) ‚Ñ§* pos (succ a)) , (pred (succ a ‚Ñï* succ x))) ‚â°‚ü® ‚Ñö*-inverse-lemma‚ÇÄ fe ((pos (succ x) ‚Ñ§* pos (succ a)) , (pred (succ a ‚Ñï* succ x))) œà ‚ü©
      to‚Ñö (pos 1 , 0)                                        ‚â°‚ü® refl ‚ü©
      1‚Ñö                                                     ‚àé
‚Ñö*-inverse-product-is-one fe ((negsucc x    , a) , p) nz = Œ≥
 where
  œà : negsucc x ‚Ñ§* negsucc a ‚â° pos (succ (pred (succ a ‚Ñï* succ x)))
  œà = negsucc x ‚Ñ§* negsucc a       ‚â°‚ü® minus-times-minus-is-positive (pos (succ x)) (pos (succ a)) ‚ü©
      pos (succ x) ‚Ñ§* pos (succ a) ‚â°‚ü® ‚Ñ§*-comm (pos (succ x)) (pos (succ a)) ‚ü©
      pos (succ a) ‚Ñ§* pos (succ x) ‚â°‚ü® denom-setup a x ‚Åª¬π ‚ü©
      pos (succ (pred (succ a ‚Ñï* succ x))) ‚àé
 
  Œ≥ : (((negsucc x , a) , p) * to‚Ñö ((negsucc  a) , x)) ‚â° 1‚Ñö
  Œ≥ = ((negsucc x , a) , p) * to‚Ñö (negsucc a , x) ‚â°‚ü®  ap (_* to‚Ñö (negsucc a , x)) (‚Ñö*-inverse-lemma‚ÇÅ fe ((negsucc x , a) , p)) ‚ü©
      (to‚Ñö (negsucc x , a) * to‚Ñö (negsucc a , x)) ‚â°‚ü® to‚Ñö-over-mult fe (negsucc x , a) (negsucc a , x) ‚Åª¬π ‚ü©
      to‚Ñö ((negsucc x , a) ‚Ñö‚Çô* (negsucc a , x))   ‚â°‚ü® ‚Ñö*-inverse-lemma‚ÇÄ fe (negsucc x ‚Ñ§* negsucc a , pred (succ a ‚Ñï* succ x)) œà ‚ü©
      1‚Ñö ‚àé

‚Ñö*-inverse : Fun-Ext ‚Üí (q : ‚Ñö) ‚Üí ¬¨ (q ‚â° zero-‚Ñö) ‚Üí Œ£ q' Íûâ ‚Ñö , q * q' ‚â° 1‚Ñö
‚Ñö*-inverse fe q nz = (multiplicative-inverse fe q nz) , ‚Ñö*-inverse-product-is-one fe q nz

open Groups --TypeTopology

‚Ñö+-is-group : Fun-Ext ‚Üí Group-structure ‚Ñö
‚Ñö+-is-group fe = _+_ , (‚Ñö-is-set fe , (‚Ñö+-assoc fe) , (zero-‚Ñö , ‚Ñö-zero-left-neutral fe , ‚Ñö-zero-right-neutral fe , Œª x ‚Üí - x , ((‚Ñö+-comm (- x) x ‚àô ‚Ñö-inverse-sum-to-zero fe x) , ‚Ñö-inverse-sum-to-zero fe x)))

‚Ñö*-is-group : Fun-Ext ‚Üí ((q : ‚Ñö) ‚Üí ¬¨ (q ‚â° zero-‚Ñö)) ‚Üí Group-structure ‚Ñö
‚Ñö*-is-group fe nz = _*_ , (‚Ñö-is-set fe) , (‚Ñö*-assoc fe) , (1‚Ñö , ‚Ñö-mult-left-id fe , ‚Ñö-mult-right-id fe , Œª x ‚Üí (multiplicative-inverse fe x (nz x)) , ((‚Ñö*-comm (multiplicative-inverse fe x (nz x)) x ‚àô  ‚Ñö*-inverse-product-is-one fe x (nz x)) , ‚Ñö*-inverse-product-is-one fe x (nz x)))

open FieldAxioms

‚Ñö-is-field : Fun-Ext ‚Üí Field-structure ‚Ñö
‚Ñö-is-field fe = (_+_ , _*_) , ‚Ñö-is-set fe
                            , ‚Ñö+-assoc fe
                            , ‚Ñö*-assoc fe
                            , ‚Ñö+-comm
                            , ‚Ñö*-comm
                            , ‚Ñö-distributivity fe
                            , (zero-‚Ñö , 1‚Ñö) , ‚Ñö-zero-not-one fe
                                            , ‚Ñö-zero-left-neutral fe
                                            , ‚Ñö+-inverse fe
                                            , ‚Ñö-mult-left-id fe
                                            , ‚Ñö*-inverse fe

‚Ñö-addition-preserves-order : (p q r : ‚Ñö) ‚Üí p < q ‚Üí (p + r) < (q + r)
‚Ñö-addition-preserves-order ((x , a) , p) ((y , b) , q) ((z , c) , r) (n , g , e) = <-lemma ((x , a) ‚Ñö‚Çô+ (z , c)) ((y , b) ‚Ñö‚Çô+ (z , c)) (‚Ñö‚Çô-addition-preserves-order (x , a) (y , b) (z , c) (n , g , e))

‚Ñö-pos-multiplication-preserves-order : (p q : ‚Ñö) ‚Üí zero-‚Ñö < p ‚Üí zero-‚Ñö < q ‚Üí zero-‚Ñö < (p * q)
‚Ñö-pos-multiplication-preserves-order ((x , a) , p) ((y , b) , q) (n‚ÇÅ , g‚ÇÅ , l‚ÇÅ) (n‚ÇÇ , g‚ÇÇ , l‚ÇÇ) = <-lemma (pos 0 , 0) ((x , a) ‚Ñö‚Çô* (y , b)) (‚Ñö‚Çô-pos-multiplication-preserves-order (x , a) (y , b) ((n‚ÇÅ , g‚ÇÅ , l‚ÇÅ)) ((n‚ÇÇ , g‚ÇÇ , l‚ÇÇ)))

‚Ñö-is-ordered-field : (fe : Fun-Ext) ‚Üí Ordered-field-structure ‚Ñö (‚Ñö-is-field fe)
‚Ñö-is-ordered-field fe = _<_ , ‚Ñö-addition-preserves-order , ‚Ñö-pos-multiplication-preserves-order

‚Ñö<-adding : (p q r s : ‚Ñö) ‚Üí p < q ‚Üí r < s ‚Üí (p + r) < (q + s)
‚Ñö<-adding p q r s l‚ÇÅ l‚ÇÇ = ‚Ñö<-trans (p + r) (q + r) (q + s) I III
 where
  I : (p + r) < (q + r)
  I = ‚Ñö-addition-preserves-order p q r l‚ÇÅ 

  II : (r + q) < (s + q)
  II = ‚Ñö-addition-preserves-order r s q l‚ÇÇ

  III : (q + r) < (q + s)
  III = transport‚ÇÇ _<_ (‚Ñö+-comm r q) (‚Ñö+-comm s q) II

‚Ñö<-adding-zero : (p q : ‚Ñö) ‚Üí zero-‚Ñö < p ‚Üí zero-‚Ñö < q ‚Üí zero-‚Ñö < (p + q)
‚Ñö<-adding-zero p q l‚ÇÅ l‚ÇÇ = ‚Ñö<-adding zero-‚Ñö p zero-‚Ñö q l‚ÇÅ l‚ÇÇ

‚Ñö<-not-itself : (p : ‚Ñö) ‚Üí ¬¨ (p < p)
‚Ñö<-not-itself ((x , a) , p) (negsucc k , gtz , e) = ùüò-elim gtz
‚Ñö<-not-itself ((x , a) , p) (pos 0 , gtz , e) = ùüò-elim gtz
‚Ñö<-not-itself ((x , a) , p) (pos (succ k) , gtz , e) = ùüò-elim (zero-not-positive k (pos-lc II ‚Åª¬π))
 where
  I : x ‚Ñ§* pos (succ a) ‚Ñ§+ pos (succ k) ‚â° x ‚Ñ§* pos (succ a) ‚Ñ§+ pos 0
  I = e
  II : pos (succ k) ‚â° pos 0
  II = ‚Ñ§+-lc (pos (succ k)) (pos 0) (x ‚Ñ§* pos (succ a)) e

‚Ñö<-subtraction : Fun-Ext ‚Üí (r p q : ‚Ñö) ‚Üí p < q ‚Üí (r + (p + (- q))) < r
‚Ñö<-subtraction fe r p q l = transport ((r + (p + (- q))) <_) (‚Ñö-zero-right-neutral fe r) IV
 where
  I : (r + p) < (r + q)
  I = transport‚ÇÇ _<_ (‚Ñö+-comm p r) (‚Ñö+-comm q r) (‚Ñö-addition-preserves-order p q r l)

  II : ((r + p) + (- q)) < ((r + q) + (- q))
  II = ‚Ñö-addition-preserves-order (r + p) (r + q) (- q) I

  III : (r + (p + (- q))) < (r + (q + (- q)))
  III = transport‚ÇÇ _<_ (‚Ñö+-assoc fe r p (- q)) (‚Ñö+-assoc fe r q (- q)) II

  IV : (r + (p + (- q))) < (r + zero-‚Ñö)
  IV = transport (Œª Œ± ‚Üí (r + (p + (- q))) < (r + Œ±)) (‚Ñö-inverse-sum-to-zero fe q) III

‚Ñö<-subtraction' : Fun-Ext ‚Üí (r p q : ‚Ñö) ‚Üí p < q ‚Üí r < (r + (q + (- p)))
‚Ñö<-subtraction' fe r p q l = transport (_< (r + (q + (- p)))) (‚Ñö-zero-right-neutral fe r) IV
 where
  I : (r + p) < (r + q)
  I = transport‚ÇÇ _<_ (‚Ñö+-comm p r) (‚Ñö+-comm q r) (‚Ñö-addition-preserves-order p q r l)

  II : ((r + p) + (- p)) < ((r + q) + (- p))
  II = ‚Ñö-addition-preserves-order (r + p) (r + q) (- p) I

  III : (r + (p + (- p))) < (r + (q + (- p)))
  III = transport‚ÇÇ _<_ (‚Ñö+-assoc fe r p (- p)) (‚Ñö+-assoc fe r q (- p)) II

  IV : (r + zero-‚Ñö) < (r + (q + (- p)))
  IV = transport (Œª Œ± ‚Üí (r + Œ±) < (r + (q + (- p)))) (‚Ñö-inverse-sum-to-zero fe p) III

‚Ñö<-subtraction'' : Fun-Ext ‚Üí (p q : ‚Ñö) ‚Üí (p < q) ‚Üí Œ£ k Íûâ ‚Ñö , (zero-‚Ñö < k) √ó (k ‚â° (q + (- p)))
‚Ñö<-subtraction'' fe p q l = k , I
 where
  k : ‚Ñö
  k = q + (- p)

  I : zero-‚Ñö < k √ó (k ‚â° q + (- p))
  I = II , refl
   where
    II : zero-‚Ñö < k
    II = transport (zero-‚Ñö <_) III (‚Ñö<-subtraction' fe zero-‚Ñö p q l)
     where
      III : (zero-‚Ñö + (q + (- p))) ‚â° (q + (- p))
      III = (zero-‚Ñö + (q + (- p))) ‚â°‚ü® ‚Ñö-zero-left-neutral fe (q + (- p)) ‚ü©
            (q + (- p))            ‚â°‚ü® refl ‚ü©
            k                      ‚àé

‚Ñö<-subtraction''' : Fun-Ext ‚Üí (p q : ‚Ñö) ‚Üí (p < q) ‚Üí zero-‚Ñö < (q + (- p))
‚Ñö<-subtraction''' fe p q l = transport (zero-‚Ñö <_) ii i
 where
  I : Œ£ k Íûâ ‚Ñö , (zero-‚Ñö < k) √ó (k ‚â° (q + (- p)))
  I = ‚Ñö<-subtraction'' fe p q l
  k : ‚Ñö
  k = pr‚ÇÅ I
  i : zero-‚Ñö < k
  i = pr‚ÇÅ (pr‚ÇÇ I)
  ii : k ‚â° (q + (- p))
  ii = pr‚ÇÇ (pr‚ÇÇ I)
  
‚Ñö-minus-minus : Fun-Ext ‚Üí (p : ‚Ñö) ‚Üí p ‚â° (- (- p))
‚Ñö-minus-minus fe p = IV
 where
  p-constructed : Œ£ (x , a) Íûâ ‚Ñö‚Çô , p ‚â° to‚Ñö (x , a)
  p-constructed = q-has-qn fe p

  x = pr‚ÇÅ (pr‚ÇÅ p-constructed)
  a = pr‚ÇÇ (pr‚ÇÅ p-constructed)

  I : (- to‚Ñö (x , a)) ‚â° to‚Ñö (‚Ñ§- x , a)
  I = to‚Ñö-over-minus fe (x , a)

  II : - to‚Ñö (‚Ñ§- x , a) ‚â° to‚Ñö ((‚Ñ§- (‚Ñ§- x)) , a)
  II = to‚Ñö-over-minus fe (‚Ñ§- x , a)

  III : to‚Ñö ((‚Ñ§- (‚Ñ§- x)) , a) ‚â° to‚Ñö (x , a)
  III = ap (Œª k ‚Üí to‚Ñö (k , a)) (minus-minus-is-plus x)

  IV : p ‚â° (- (- p))
  IV = p                     ‚â°‚ü® pr‚ÇÇ p-constructed ‚ü©
       to‚Ñö (x , a)           ‚â°‚ü® III ‚Åª¬π ‚ü©
       to‚Ñö (‚Ñ§- (‚Ñ§- x) , a)   ‚â°‚ü® II ‚Åª¬π ‚ü©
       (- to‚Ñö (‚Ñ§- x , a))    ‚â°‚ü® ap -_ (I ‚Åª¬π) ‚ü©
       (- (- to‚Ñö (x , a)))   ‚â°‚ü® ap (Œª k ‚Üí - (- k)) (pr‚ÇÇ p-constructed ‚Åª¬π) ‚ü©
       (- (- p)) ‚àé

‚Ñö-zero-less-than-positive : (x y : ‚Ñï) ‚Üí zero-‚Ñö < to‚Ñö ((pos (succ x)) , y)
‚Ñö-zero-less-than-positive x y = <-lemma (pos 0 , 0) (pos (succ x) , y) ((pos (succ x)) , (‚ãÜ , I))
 where
  I : pos 0 ‚Ñ§* pos (succ y) ‚Ñ§+ pos (succ x) ‚â° pos (succ x) ‚Ñ§* pos 1
  I = pos 0 ‚Ñ§* pos (succ y) ‚Ñ§+ pos (succ x) ‚â°‚ü® ap (_‚Ñ§+ (pos (succ x))) (‚Ñ§-zero-left-is-zero (pos (succ y))) ‚ü©
      pos 0 ‚Ñ§+ pos (succ x)                 ‚â°‚ü® ‚Ñ§-zero-left-neutral (pos (succ x)) ‚ü©
      pos (succ x)                          ‚â°‚ü® ‚Ñ§-mult-right-id (pos (succ x)) ‚ü©
      pos (succ x) ‚Ñ§* pos 1 ‚àé



{- 
lim : (f : ‚Ñï ‚Üí ‚Ñö) ‚Üí ùì§‚ÇÄ Ãá 
lim f = ‚àÄ (Œµ : ‚Ñï) ‚Üí (n : ‚Ñï) ‚Üí  Œ£ N Íûâ ‚Ñï , ((N ‚Ñï< n) ‚Üí f n ‚Ñö< to‚Ñö (pos Œµ , zero))

conv : (f : ‚Ñï ‚Üí ‚Ñö) ‚Üí ùì§‚ÇÄ Ãá
conv f = ‚àÄ (Œµ : ‚Ñö) ‚Üí zero-‚Ñö ‚Ñö< Œµ ‚Üí (n : ‚Ñï) ‚Üí Œ£ N Íûâ ‚Ñï , ((N ‚Ñï< n) ‚Üí f n ‚Ñö< Œµ)

sandwich' : (f g : ‚Ñï ‚Üí ‚Ñö) ‚Üí (Œ£ M Íûâ ‚Ñï , ((m : ‚Ñï) ‚Üí (M ‚Ñï< m) ‚Üí (f m ‚Ñö< g m))) ‚Üí conv g ‚Üí conv f
sandwich' f g (n' , h) conv-g = I
 where
  I : conv f
  I Œµ l n = II (conv-g Œµ l n) 
   where
    II : (Œ£ N Íûâ ‚Ñï , (N ‚Ñï< n ‚Üí g n ‚Ñö< Œµ)) ‚Üí Œ£ N Íûâ ‚Ñï , (N ‚Ñï< n ‚Üí f n ‚Ñö< Œµ)
    II (N , Œ±) = N , III
     where
      III : _ ‚Ñï< n ‚Üí f n ‚Ñö< Œµ
      III l‚ÇÇ = ‚Ñö<-trans (f n) (g n) Œµ (h n {!!}) (Œ± l‚ÇÇ)

sandwich : (f g : ‚Ñï ‚Üí ‚Ñö) ‚Üí ((n : ‚Ñï) ‚Üí f n ‚Ñö< g n) ‚Üí lim g ‚Üí lim f 
sandwich f g h g-holds = I
 where
  I : ‚àÄ (Œµ : ‚Ñï) ‚Üí (n : ‚Ñï) ‚Üí  Œ£ N Íûâ ‚Ñï , ((N ‚Ñï< n) ‚Üí f n ‚Ñö< to‚Ñö (pos Œµ , zero))
  I Œµ n = II (g-holds Œµ n)
   where
    II : Œ£ N Íûâ ‚Ñï , (N ‚Ñï< n ‚Üí g n ‚Ñö< to‚Ñö (pos Œµ , zero)) ‚Üí Œ£ N Íûâ ‚Ñï , ((N ‚Ñï< n) ‚Üí f n ‚Ñö< to‚Ñö (pos Œµ , zero))
    II (N , l‚ÇÇ) = N , III
     where
      III : N ‚Ñï< n ‚Üí f n ‚Ñö< to‚Ñö (pos Œµ , zero)
      III l = ‚Ñö<-trans (f n) (g n) (to‚Ñö (pos Œµ , zero)) (h n) (l‚ÇÇ l)

1/n : ‚Ñï ‚Üí ‚Ñö
1/n zero = to‚Ñö (pos 2 , 0)
1/n (succ n) = to‚Ñö (pos 1 , n)

two-thirds-goes-down : lim ‚ü®2/3‚ü©^_
two-thirds-goes-down = sandwich (‚ü®2/3‚ü©^_) 1/n I II
 where
  I : (n : ‚Ñï) ‚Üí (‚ü®2/3‚ü©^ n) ‚Ñö< 1/n n
  I = induction base step
   where
    base : (‚ü®2/3‚ü©^ 0) ‚Ñö< 1/n 0
    base = (pos 1) , (‚ãÜ , refl)

    step : (k : ‚Ñï) ‚Üí (‚ü®2/3‚ü©^ k) ‚Ñö< 1/n k ‚Üí (‚ü®2/3‚ü©^ succ k) ‚Ñö< 1/n (succ k)
    step zero IH     = (pos 1) , (‚ãÜ , refl)
    step (succ k) IH = {!!}
  II : lim 1/n
  II = Œª Œµ n ‚Üí {!!} , {!!}
-}




{-
‚Ñö-lim : (a : (‚Ñï ‚Üí ‚Ñö)) ‚Üí {!!}
‚Ñö-lim = {!!}
-}

-- approximate-half : Œ£ h Íûâ ‚Ñö , (zero-‚Ñö < (h + h)) √ó ((h + h) < 1‚Ñö)
-- approximate-half = {!!}

{-
‚Ñö<-to-+ : (p q r : ‚Ñö) ‚Üí (p + q) < r ‚Üí Œ£ (p' , q') Íûâ ‚Ñö √ó ‚Ñö , p' + q' ‚â° r
‚Ñö<-to-+ p q r = {!!}
-}
{-

‚Ñö-half : Fun-Ext ‚Üí (p : ‚Ñö) ‚Üí Œ£ p' Íûâ ‚Ñö , ((p' < p) √ó (p' + p' ‚â° p))
‚Ñö-half fe ((x , a) , p) = (to‚Ñö (x , (pred (2 ‚Ñï* succ a)))) , (I , II)
 where
  I : to‚Ñö (x , pred (2 ‚Ñï* succ a)) < ((x , a) , p)
  I = {!!}

  II : (to‚Ñö (x , pred (2 ‚Ñï* succ a)) + to‚Ñö (x , pred (2 ‚Ñï* succ a))) ‚â° (x , a) , p
  II = (to‚Ñö (x , pred (2 ‚Ñï* succ a)) + to‚Ñö (x , pred (2 ‚Ñï* succ a))) ‚â°‚ü® to‚Ñö-over-addition fe (x , pred (2 ‚Ñï* succ a)) (x , pred (2 ‚Ñï* succ a)) ‚Åª¬π ‚ü©
       to‚Ñö ((x , pred (2 ‚Ñï* succ a)) ‚Ñö‚Çô+ (x , pred (2 ‚Ñï* succ a)))   ‚â°‚ü® {!!} ‚ü©
       {!!}                                                              ‚â°‚ü® {!!} ‚ü©
       (x , a) , p ‚àé
-}

\end{code}
