Andrew Sneap - 8th January 2022

\begin{code}

{-# OPTIONS --without-K --exact-split --safe #-}

open import SpartanMLTT renaming (_+_ to _‚àî_ ; * to ‚ãÜ) --TypeTopology
open import UF-Base -- TypeTopology
open import UF-FunExt -- TypeTopology
open import UF-PropTrunc -- TypeTopology
open import UF-Powerset --TypeTopology
open import UF-Subsingletons --TypeTopology

open import Rationals
open import RationalsOrder

module RationalsExtension
  (pt : propositional-truncations-exist)
  (fe : Fun-Ext)
  -- (pe : propext ùì§‚ÇÄ)
 where

open PropositionalTruncation pt

open import DedekindReals pt fe 


\end{code}

The proof is simple, and doesn't require condition (1) from the jamboard.

\begin{code}

order-preserving-and-bijection-statement : (f g : ‚Ñö ‚Üí ‚Ñö) ‚Üí ùì§‚ÇÄ Ãá
order-preserving-and-bijection-statement f g = ((p q : ‚Ñö) ‚Üí p < q ‚áî f p < f q)
                                             ‚Üí ((r : ‚Ñö) ‚Üí (g (f r) ‚â° r) √ó (f (g r) ‚â° r))
                                             ‚Üí ((p q : ‚Ñö) ‚Üí p < q ‚áî g p < g q)

order-preserving-and-bijection : (f : ‚Ñö ‚Üí ‚Ñö)
                               ‚Üí (g : ‚Ñö ‚Üí ‚Ñö) 
                               ‚Üí ((p q : ‚Ñö) ‚Üí p < q ‚áî f p < f q)
                               ‚Üí ((r : ‚Ñö) ‚Üí (g (f r) ‚â° r) √ó (f (g r) ‚â° r))
                               ‚Üí ((p q : ‚Ñö) ‚Üí p < q ‚áî g p < g q)
order-preserving-and-bijection f g f-preserves-order f-g-bijection = Œ≥
 where
  Œ≥ : (p q : ‚Ñö) ‚Üí (p < q) ‚áî (g p < g q)
  Œ≥ p q = I , II
   where
    Œ± : (g p < g q) ‚áî (f (g p) < f (g q))
    Œ± = f-preserves-order (g p) (g q)
    
    I : p < q ‚Üí g p < g q
    I l = (rl-implication Œ±) i
     where
      i : f (g p) < f (g q)
      i = transport‚ÇÇ _<_ (pr‚ÇÇ (f-g-bijection p) ‚Åª¬π) (pr‚ÇÇ (f-g-bijection q) ‚Åª¬π) l


    II : g p < g q ‚Üí p < q
    II l = transport‚ÇÇ _<_ (pr‚ÇÇ (f-g-bijection p)) (pr‚ÇÇ (f-g-bijection q)) i
     where
      i : f (g p) < f (g q)
      i = (lr-implication Œ±) l

\end{code}
The code without the unneeded assumption. 
\begin{code}

order-preserving-and-bijection' : (f : ‚Ñö ‚Üí ‚Ñö)
                               ‚Üí (g : ‚Ñö ‚Üí ‚Ñö) 
                               ‚Üí ((p q : ‚Ñö) ‚Üí p < q ‚áî f p < f q)
                               ‚Üí ((r : ‚Ñö) ‚Üí (f (g r) ‚â° r))
                               ‚Üí ((p q : ‚Ñö) ‚Üí p < q ‚áî g p < g q)
order-preserving-and-bijection' f g f-preserves-order f-g-bijection = Œ≥
 where
  Œ≥ : (p q : ‚Ñö) ‚Üí (p < q) ‚áî (g p < g q)
  Œ≥ p q = I , II
   where
    Œ± : (g p < g q) ‚áî (f (g p) < f (g q))
    Œ± = f-preserves-order (g p) (g q)

    f-preserves-order-forward : f (g p) < f (g q) ‚Üí g p < g q
    f-preserves-order-forward = rl-implication Œ±

    f-preserves-order-backward : g p < g q ‚Üí f (g p) < f (g q)
    f-preserves-order-backward = lr-implication Œ±
    
    I : p < q ‚Üí g p < g q
    I l = f-preserves-order-forward i
     where
      i : f (g p) < f (g q)
      i = transport‚ÇÇ _<_ ((f-g-bijection p) ‚Åª¬π) ((f-g-bijection q) ‚Åª¬π) l

    II : g p < g q ‚Üí p < q
    II l = transport‚ÇÇ _<_ (f-g-bijection p) (f-g-bijection q) i
     where
      i : f (g p) < f (g q)
      i = f-preserves-order-backward l

f-bar : (f g : ‚Ñö ‚Üí ‚Ñö)
      ‚Üí ((p q : ‚Ñö) ‚Üí p < q ‚áî f p < f q)
      ‚Üí ((r : ‚Ñö) ‚Üí (g (f r) ‚â° r) √ó (f (g r) ‚â° r))
      ‚Üí ‚Ñù ‚Üí ‚Ñù
f-bar f g f-order-preserving f-g-bijective ((L , R) , inhabited-left-x , inhabited-right-x , rounded-left-x , rounded-right-x , disjoint-x , located-x) = (left , right) , inhabited-left' , inhabited-right' , rounded-left' , rounded-right' , disjoint' , located'
 where
  x : ‚Ñù
  x = ((L , R) , inhabited-left-x , inhabited-right-x , rounded-left-x , rounded-right-x , disjoint-x , located-x)
  
  left : ‚Ñö-subset-of-propositions
  left p = (g p ‚àà L) , ‚àà-is-prop L (g p)
  right : ‚Ñö-subset-of-propositions
  right q = g q ‚àà R , ‚àà-is-prop R (g q)

  inhabited-left' : inhabited-left left
  inhabited-left' = ‚à•‚à•-functor I inhabited-left-x
   where
    I : Œ£ p Íûâ ‚Ñö , p ‚àà L ‚Üí Œ£ p' Íûâ ‚Ñö , p' ‚àà left 
    I (p , p-L) = (f p) , transport (_‚àà L) (pr‚ÇÅ (f-g-bijective p) ‚Åª¬π) p-L

  inhabited-right' : inhabited-right right
  inhabited-right' = ‚à•‚à•-functor I inhabited-right-x
   where
    I : Œ£ q Íûâ ‚Ñö , q ‚àà R ‚Üí Œ£ q' Íûâ ‚Ñö , q' ‚àà right
    I (q , q-R) = f q , transport (_‚àà R) (pr‚ÇÅ (f-g-bijective q) ‚Åª¬π) q-R

  rounded-left' : rounded-left left
  rounded-left' k = I , II
   where
    I : k ‚àà left ‚Üí ‚àÉ p Íûâ ‚Ñö , (k < p) √ó p ‚àà left
    I k-L = ‚à•‚à•-functor iii ii
     where
      i : f (g k) ‚â° k
      i = pr‚ÇÇ (f-g-bijective k)
      ii : ‚àÉ q Íûâ ‚Ñö , (g k < q) √ó q ‚àà L
      ii = (pr‚ÇÅ (rounded-left-x (g k))) k-L
      iii : Œ£ q Íûâ ‚Ñö , (g k < q) √ó q ‚àà L ‚Üí Œ£ p Íûâ ‚Ñö , (k < p) √ó p ‚àà left
      iii (q , (l , q-L)) = (f q) , vii , vi
       where
        iv : (g k < q) ‚Üí (f (g k) < f q)
        iv = pr‚ÇÅ (f-order-preserving (g k) q)
        v : g (f q) ‚àà L
        v = transport (_‚àà L) (pr‚ÇÅ (f-g-bijective q) ‚Åª¬π) q-L
        vi : g (f q) ‚àà L
        vi = transport (_‚àà L) (pr‚ÇÅ (f-g-bijective q) ‚Åª¬π) q-L
        vii : k < f q
        vii = transport (_< f q) i (iv l)
    II : ‚àÉ p Íûâ ‚Ñö , (k < p) √ó p ‚àà left ‚Üí k ‚àà left
    II e = ‚à•‚à•-rec (‚àà-is-prop left k) i e
     where
      i : Œ£ p Íûâ ‚Ñö , (k < p) √ó p ‚àà left ‚Üí k ‚àà left
      i (p , (l , p-L)) = iv ‚à£ (g p) , iii , p-L ‚à£
       where
        ii : (k < p) ‚áî (g k < g p)
        ii = order-preserving-and-bijection f g f-order-preserving f-g-bijective k p
        iii : g k < g p
        iii = (pr‚ÇÅ ii) l
        iv : ‚àÉ p' Íûâ ‚Ñö , (g k < p') √ó p' ‚àà L ‚Üí g k ‚àà L
        iv = pr‚ÇÇ (rounded-left-x (g k))

  rounded-right' : rounded-right right
  rounded-right' k = I , II
   where
    I : k ‚àà right ‚Üí ‚àÉ q Íûâ ‚Ñö , (q < k) √ó q ‚àà right
    I k-R = ‚à•‚à•-functor ii i
     where
      i : ‚àÉ q Íûâ ‚Ñö , (q < g k) √ó q ‚àà R
      i = pr‚ÇÅ (rounded-right-x (g k)) k-R
      ii : Œ£ p Íûâ ‚Ñö , (p < g k) √ó p ‚àà R ‚Üí Œ£ q Íûâ ‚Ñö , (q < k) √ó q ‚àà right
      ii (p , (l , p-R)) = (f p) , (transport (f p <_) iv iii) , transport (_‚àà R) (pr‚ÇÅ (f-g-bijective p) ‚Åª¬π) p-R
       where
        iii : (f p < f (g k))
        iii = (pr‚ÇÅ (f-order-preserving p (g k))) l
        iv : f (g k) ‚â° k
        iv = pr‚ÇÇ (f-g-bijective k)
    II : ‚àÉ q Íûâ ‚Ñö , (q < k) √ó q ‚àà right ‚Üí k ‚àà right
    II e = ‚à•‚à•-rec (‚àà-is-prop right k) i e
     where
      i : Œ£ q Íûâ ‚Ñö , (q < k) √ó q ‚àà right ‚Üí k ‚àà right
      i (q , (l , q-R)) = iv ‚à£ (g q) , (iii , q-R) ‚à£
       where
        ii : (q < k) ‚áî (g q < g k)
        ii = order-preserving-and-bijection f g f-order-preserving f-g-bijective q k
        iii : g q < g k
        iii = (pr‚ÇÅ ii) l
        iv : ‚àÉ q Íûâ ‚Ñö , (q < g k) √ó q ‚àà R ‚Üí g k ‚àà R
        iv = pr‚ÇÇ (rounded-right-x (g k))

  disjoint' : disjoint left right
  disjoint' p q l = (pr‚ÇÇ I) II
   where
    I : (p < q) ‚áî (g p < g q)
    I = order-preserving-and-bijection f g f-order-preserving f-g-bijective p q
    II : g p < g q
    II = disjoint-x (g p) (g q) l
    
  located' : located left right
  located' p q l = III
   where
    I : (p < q) ‚áî (g p < g q)
    I = order-preserving-and-bijection f g f-order-preserving f-g-bijective p q
    II : p < q ‚Üí g p < g q
    II = pr‚ÇÅ I
    III : g p ‚àà L ‚à® g q ‚àà R
    III = located-x (g p) (g q) (II l)
 
single-extension : (f : ‚Ñö ‚Üí ‚Ñù) ‚Üí (‚Ñù ‚Üí ‚Ñù)
single-extension f = {!!}

embed : (‚Ñö ‚Üí ‚Ñö) ‚Üí (‚Ñù ‚Üí ‚Ñù)
embed = single-extension ‚àò (embedding-‚Ñö-to-‚Ñù ‚àò_)


