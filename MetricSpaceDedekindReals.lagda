\begin{code}
{-# OPTIONS --without-K --exact-split #-}

open import SpartanMLTT renaming (_+_ to _‚àî_ ; * to ‚ãÜ)  -- TypeTopology

open import UF-Base
open import UF-FunExt -- TypeTopology
open import UF-Powerset -- TypeTopology
open import UF-PropTrunc -- TypeTopology
open import UF-Subsingletons -- TypeTopology

open import DedekindRealsProperties
open import MetricSpaceAltDef
open import RationalsAddition
open import Rationals
open import RationalsAbs
open import RationalsNegation
open import RationalsOrder

module MetricSpaceDedekindReals
        (pt : propositional-truncations-exist)
        (fe : Fun-Ext)
        (pe : Prop-Ext)
 where

open PropositionalTruncation pt

open import DedekindReals pe pt fe
open import MetricSpaceRationals fe
open import RationalsMinMax fe

B-‚Ñù : (x y : ‚Ñù) ‚Üí (Œµ : ‚Ñö) ‚Üí 0‚Ñö < Œµ ‚Üí ùì§‚ÇÄ Ãá
B-‚Ñù ((Lx , Rx) , _) ((Ly , Ry) , _) Œµ l =
 ‚àÉ (p , q , u , v) Íûâ ‚Ñö √ó ‚Ñö √ó ‚Ñö √ó ‚Ñö , p ‚àà Lx √ó u ‚àà Ly √ó q ‚àà Rx √ó v ‚àà Ry √ó B-‚Ñö (min p u) (max q v) Œµ l

‚Ñù-m1a-lemma : (((Lx , Rx) , _) ((Ly , Ry) , _) : ‚Ñù) ‚Üí ((Œµ : ‚Ñö) ‚Üí (Œµ>0 : 0‚Ñö < Œµ) ‚Üí ‚àÉ (p , q , u , v) Íûâ ‚Ñö √ó ‚Ñö √ó ‚Ñö √ó ‚Ñö , p ‚àà Lx √ó u ‚àà Ly √ó q ‚àà Rx √ó v ‚àà Ry √ó B-‚Ñö (min p u) (max q v) Œµ Œµ>0) ‚Üí Lx ‚äÜ Ly
‚Ñù-m1a-lemma ((Lx , Rx) , inhabited-left-x , inhabited-right-x , rounded-left-x , rounded-right-x , disjoint-x , located-x) ((Ly , Ry) , inhabited-left-y , inhabited-right-y , rounded-left-y , rounded-right-y , disjoint-y , located-y) f k kLx = ‚à•‚à•-rec Ly-is-prop Œ± obtain-k'
 where
  Ly-is-prop : is-prop (k ‚àà Ly)
  Ly-is-prop = (‚àà-is-prop Ly k)

  obtain-k' : ‚àÉ k' Íûâ ‚Ñö , (k < k') √ó k' ‚àà Lx
  obtain-k' = (pr‚ÇÅ (rounded-left-x k)) kLx

  Œ± : Œ£ k' Íûâ ‚Ñö , (k < k') √ó k' ‚àà Lx ‚Üí k ‚àà Ly
  Œ± (k' , (k<k' , k'-Lx)) = ‚à•‚à•-rec Ly-is-prop i obtain-info
   where
    Œµ : ‚Ñö
    Œµ = k' - k
    Œµ>0 : 0‚Ñö < Œµ
    Œµ>0 = ‚Ñö<-difference-positive fe k k' k<k'

    obtain-info : ‚àÉ (p , q , u , v) Íûâ ‚Ñö √ó ‚Ñö √ó ‚Ñö √ó ‚Ñö , p ‚àà Lx √ó u ‚àà Ly √ó q ‚àà Rx √ó v ‚àà Ry √ó B-‚Ñö (min p u) (max q v) Œµ Œµ>0
    obtain-info = f Œµ Œµ>0

    i : Œ£ (p , q , u , v) Íûâ ‚Ñö √ó ‚Ñö √ó ‚Ñö √ó ‚Ñö , p ‚àà Lx
                                           √ó u ‚àà Ly
                                           √ó q ‚àà Rx
                                           √ó v ‚àà Ry
                                           √ó B-‚Ñö (min p u) (max q v) Œµ Œµ>0
                                           ‚Üí k ‚àà Ly
    i ((p , q , u , v) , p-Lx , u-Ly , q-Rx , v-Ry , metric)  = if-smaller-than-u ‚à£ u , (k<u , u-Ly) ‚à£
     where
      from-abs : ((- Œµ) < (min p u - max q v)) √ó ((min p u - max q v) < Œµ)
      from-abs = ‚Ñö-abs-<-unpack fe (min p u - max q v) Œµ metric
      add-max : ((- Œµ) + max q v) < (min p u - max q v + max q v)
      add-max = ‚Ñö<-addition-preserves-order (- Œµ) (min p u - max q v) (max q v) (pr‚ÇÅ from-abs)
      simplify-left : (- Œµ) + max q v ‚â° k + (max q v - k')
      simplify-left = (- Œµ) + max q v                ‚â°‚ü® by-definition ‚ü©
                      (- (k' - k)) + max q v         ‚â°‚ü® ap (_+ max q v) (‚Ñö-minus-dist fe k' (- k) ‚Åª¬π) ‚ü©
                      (- k') + (- (- k)) + max q v   ‚â°‚ü® ap (_+ max q v) (‚Ñö+-comm (- k') (- (- k))) ‚ü©
                      (- (- k)) + (- k') + max q v   ‚â°‚ü® ‚Ñö+-assoc fe (- (- k)) (- k') (max q v) ‚ü©
                      (- (- k)) + ((- k') + max q v) ‚â°‚ü® ap‚ÇÇ _+_ (‚Ñö-minus-minus fe k ‚Åª¬π) (‚Ñö+-comm (- k') (max q v)) ‚ü©
                      k + (max q v - k')             ‚àé
      simplify-right : min p u - max q v + max q v ‚â° min p u
      simplify-right = min p u - max q v + max q v       ‚â°‚ü® ‚Ñö+-assoc fe (min p u) (- max q v) (max q v) ‚ü©
                       min p u + ((- max q v) + max q v) ‚â°‚ü® ap (min p u +_) (‚Ñö+-comm (- max q v) (max q v)) ‚ü©
                       min p u + (max q v + (- max q v)) ‚â°‚ü® ap (min p u +_) (‚Ñö-inverse-sum-to-zero fe (max q v)) ‚ü©
                       min p u + 0‚Ñö ‚â°‚ü® ‚Ñö-zero-right-neutral fe (min p u) ‚ü©
                       min p u ‚àé
      simplify : (k + (max q v - k')) < min p u
      simplify = transport‚ÇÇ _<_ simplify-left simplify-right add-max
      left-adds-positive : 0‚Ñö < max q v - k'
      left-adds-positive = which-is-max (max-to-‚â§ q v)
       where
        k<q : k' < q
        k<q = disjoint-x k' q (k'-Lx , q-Rx)
        0<q-k' : 0‚Ñö < (q - k')
        0<q-k' = ‚Ñö<-difference-positive fe k' q k<q
        which-is-max : (q ‚â§ v) √ó (max q v ‚â° v)
                     ‚àî (v ‚â§ q) √ó (max q v ‚â° q)
                     ‚Üí 0‚Ñö < (max q v - k')
        which-is-max (inl (q‚â§v , e)) = ‚Ñö<-difference-positive fe k' (max q v) (transport (k' <_) (e ‚Åª¬π) k<v)
         where    
          k<v : k' < v
          k<v = ‚Ñö<-‚â§-trans fe k' q v k<q q‚â§v
        which-is-max (inr (v‚â§q , e)) = ‚Ñö<-difference-positive fe k' (max q v) (transport (k' <_) (e ‚Åª¬π) k<q)
      k-small : k < k + (max q v - k')
      k-small = ‚Ñö<-addition-preserves-order'' fe k (max q v - k') left-adds-positive
      right-small : min p u ‚â§ u
      right-small = min-split (min-to-‚â§ p u)
       where
        min-split : (p ‚â§ u) √ó (min p u ‚â° p)
                  ‚àî (u ‚â§ p) √ó (min p u ‚â° u)
                  ‚Üí min p u ‚â§ u
        min-split (inl (p‚â§u , e)) = transport (_‚â§ u) (e ‚Åª¬π) p‚â§u
        min-split (inr (u‚â§p , e)) = transport (_‚â§ u) (e ‚Åª¬π) (‚Ñö‚â§-refl u)
      k<minpu : k < min p u
      k<minpu = ‚Ñö<-trans k (k + (max q v - k')) (min p u) k-small simplify
      k<u : k < u
      k<u = ‚Ñö<-‚â§-trans fe k (min p u) u k<minpu right-small
      if-smaller-than-u : ‚àÉ u Íûâ ‚Ñö , (k < u) √ó u ‚àà Ly ‚Üí k ‚àà Ly
      if-smaller-than-u = pr‚ÇÇ (rounded-left-y k)

\end{code}
It's useful to have the second condition before the first in order to abstract a proof in the first condition.
\begin{code}

‚Ñù-m2 : m2 ‚Ñù B-‚Ñù
‚Ñù-m2 ((Lx , Rx) , _) ((Ly , Ry) , _) Œµ l B = ‚à•‚à•-functor Œ± B
 where
  Œ± : Œ£ (p , q , u , v) Íûâ ‚Ñö √ó ‚Ñö √ó ‚Ñö √ó ‚Ñö , p ‚àà Lx √ó u ‚àà Ly √ó q ‚àà Rx √ó v ‚àà Ry √ó B-‚Ñö (min p u) (max q v) Œµ l
    ‚Üí Œ£ (p , q , u , v) Íûâ ‚Ñö √ó ‚Ñö √ó ‚Ñö √ó ‚Ñö , p ‚àà Ly √ó u ‚àà Lx √ó q ‚àà Ry √ó v ‚àà Rx √ó B-‚Ñö (min p u) (max q v) Œµ l
  Œ± ((p , q , u , v) , pLx , uLy , qRx , vRy , B) = (u , v , p , q) , uLy , pLx , vRy , qRx , transport‚ÇÇ (Œª Œ± Œ≤ ‚Üí B-‚Ñö Œ± Œ≤ Œµ l) (min-comm p u) (max-comm q v) B
  
‚Ñù-m1a : m1a ‚Ñù B-‚Ñù
‚Ñù-m1a ((Lx , Rx) , inhabited-left-x , inhabited-right-x , rounded-left-x , rounded-right-x , disjoint-x , located-x) ((Ly , Ry) , inhabited-left-y , inhabited-right-y , rounded-left-y , rounded-right-y , disjoint-y , located-y) f = ‚Ñù-equality-from-left-cut' x y I II
 where
  x = ((Lx , Rx) , inhabited-left-x , inhabited-right-x , rounded-left-x , rounded-right-x , disjoint-x , located-x)
  y = ((Ly , Ry) , inhabited-left-y , inhabited-right-y , rounded-left-y , rounded-right-y , disjoint-y , located-y)

  I : Lx ‚äÜ Ly
  I = ‚Ñù-m1a-lemma x y f

  II : Ly ‚äÜ Lx
  II = ‚Ñù-m1a-lemma y x (Œª Œµ Œµ>0 ‚Üí ‚Ñù-m2 x y Œµ Œµ>0 (f Œµ Œµ>0))

m1b-lemma : (q Œµ : ‚Ñö) ‚Üí 0‚Ñö < q √ó q < Œµ ‚Üí abs q < Œµ
m1b-lemma q Œµ (l‚ÇÅ , l‚ÇÇ) = IV
 where
  I : 0‚Ñö < Œµ 
  I = ‚Ñö<-trans 0‚Ñö q Œµ l‚ÇÅ l‚ÇÇ
  II : ((- Œµ) < 0‚Ñö)
  II = transport (- Œµ <_) ‚Ñö-minus-zero-is-zero i
   where
    i : (- Œµ) < (- 0‚Ñö)
    i = ‚Ñö<-swap fe 0‚Ñö Œµ I
  III : (- Œµ) < q
  III = ‚Ñö<-trans (- Œµ) 0‚Ñö q II l‚ÇÅ
  IV : abs q < Œµ
  IV = ‚Ñö<-to-abs fe q Œµ (III , l‚ÇÇ) 

‚Ñù-m1b : m1b ‚Ñù B-‚Ñù
‚Ñù-m1b ((L , R) , iscut) Œµ l = ‚à•‚à•-functor I (‚Ñù-arithmetically-located fe pt pe ((L , R) , iscut) Œµ l)
 where
  I : (Œ£ (x , y) Íûâ ‚Ñö √ó ‚Ñö , x ‚àà L √ó y ‚àà R √ó (0‚Ñö < (y - x)) √ó ((y - x) < Œµ)) ‚Üí Œ£ (p , q , u , v) Íûâ ‚Ñö √ó ‚Ñö √ó ‚Ñö √ó ‚Ñö , p ‚àà L √ó u ‚àà L √ó q ‚àà R √ó v ‚àà R √ó B-‚Ñö (min p u) (max q v) Œµ l
  I ((x , y) , Lx , Ry , (l‚ÇÅ , l‚ÇÇ)) = (x , y , x , y) , Lx , Lx , Ry , Ry , transport‚ÇÇ (Œª Œ± Œ≤ ‚Üí B-‚Ñö Œ± Œ≤ Œµ l) (min-refl x ‚Åª¬π) (max-refl y ‚Åª¬π) iii
   where
    i : ‚Ñö-metric y x < Œµ 
    i = m1b-lemma (y - x) Œµ (l‚ÇÅ , l‚ÇÇ)
    ii : ‚Ñö-metric y x ‚â° ‚Ñö-metric x y
    ii = ‚Ñö-metric-commutes y x
    iii : ‚Ñö-metric x y < Œµ
    iii = transport (_< Œµ) ii i


‚Ñù-m3 : m3 ‚Ñù B-‚Ñù
‚Ñù-m3 ((Lx , Rx) , iscutx) ((Ly , Ry) , iscuty) Œµ‚ÇÅ Œµ‚ÇÇ l‚ÇÅ l‚ÇÇ l‚ÇÉ B = ‚à•‚à•-functor I B
 where
  I : Œ£ (p , q , u , v) Íûâ ‚Ñö √ó ‚Ñö √ó ‚Ñö √ó ‚Ñö , p ‚àà Lx √ó u ‚àà Ly √ó q ‚àà Rx √ó v ‚àà Ry √ó B-‚Ñö (min p u) (max q v) Œµ‚ÇÅ l‚ÇÅ
    ‚Üí Œ£ (p , q , u , v) Íûâ ‚Ñö √ó ‚Ñö √ó ‚Ñö √ó ‚Ñö , p ‚àà Lx √ó u ‚àà Ly √ó q ‚àà Rx √ó v ‚àà Ry √ó B-‚Ñö (min p u) (max q v) Œµ‚ÇÇ l‚ÇÇ
  I ((p , q , u , v) , pLx , uLy , qRx , vRy , B) = (p , q , u , v) , pLx , uLy , qRx , vRy , ‚Ñö<-trans (‚Ñö-metric (min p u) (max q v)) Œµ‚ÇÅ Œµ‚ÇÇ B l‚ÇÉ
‚Ñù-m4 : m4 ‚Ñù B-‚Ñù
‚Ñù-m4 ((Lx , Rx) , inhabited-left-x , inhabited-right-x , rounded-left-x , rounded-right-x , disjoint-x , located-x)
     ((Ly , Ry) , inhabited-left-y , inhabited-right-y , rounded-left-y , rounded-right-y , disjoint-y , located-y)
     ((Lz , Rz) , inhabited-left-z , inhabited-right-z , rounded-left-z , rounded-right-z , disjoint-z , located-z) Œµ‚ÇÅ Œµ‚ÇÇ l‚ÇÅ l‚ÇÇ B‚ÇÅ B‚ÇÇ = ‚à•‚à•-functor I (binary-choice B‚ÇÅ B‚ÇÇ)
 where
  Œµ : ‚Ñö
  Œµ = Œµ‚ÇÅ + Œµ‚ÇÇ
  Œµ>0 : 0‚Ñö < Œµ     
  Œµ>0 = ‚Ñö<-adding-zero Œµ‚ÇÅ Œµ‚ÇÇ l‚ÇÅ l‚ÇÇ
  
  Œµ>Œµ‚ÇÅ : Œµ‚ÇÅ < Œµ
  Œµ>Œµ‚ÇÅ = ‚Ñö<-addition-preserves-order'' fe Œµ‚ÇÅ Œµ‚ÇÇ l‚ÇÇ
  Œµ>Œµ‚ÇÇ : Œµ‚ÇÇ < Œµ
  Œµ>Œµ‚ÇÇ = transport (Œµ‚ÇÇ <_) (‚Ñö+-comm Œµ‚ÇÇ Œµ‚ÇÅ) (‚Ñö<-addition-preserves-order'' fe Œµ‚ÇÇ Œµ‚ÇÅ l‚ÇÅ)

  I : (Œ£ (p‚ÇÅ , q‚ÇÅ , u‚ÇÅ , v‚ÇÅ) Íûâ ‚Ñö √ó ‚Ñö √ó ‚Ñö √ó ‚Ñö , p‚ÇÅ ‚àà Lx √ó u‚ÇÅ ‚àà Ly √ó q‚ÇÅ ‚àà Rx √ó v‚ÇÅ ‚àà Ry √ó B-‚Ñö (min p‚ÇÅ u‚ÇÅ) (max q‚ÇÅ v‚ÇÅ) Œµ‚ÇÅ l‚ÇÅ)
    √ó (Œ£ (p‚ÇÇ , q‚ÇÇ , u‚ÇÇ , v‚ÇÇ) Íûâ ‚Ñö √ó ‚Ñö √ó ‚Ñö √ó ‚Ñö , p‚ÇÇ ‚àà Ly √ó u‚ÇÇ ‚àà Lz √ó q‚ÇÇ ‚àà Ry √ó v‚ÇÇ ‚àà Rz √ó B-‚Ñö (min p‚ÇÇ u‚ÇÇ) (max q‚ÇÇ v‚ÇÇ) Œµ‚ÇÇ l‚ÇÇ)
    ‚Üí Œ£ (p , q , u , v) Íûâ ‚Ñö √ó ‚Ñö √ó ‚Ñö √ó ‚Ñö , p ‚àà Lx √ó u ‚àà Lz √ó q ‚àà Rx √ó v ‚àà Rz √ó B-‚Ñö (min p u) (max q v) Œµ Œµ>0
  I (((p‚ÇÅ , q‚ÇÅ , u‚ÇÅ , v‚ÇÅ) , p‚ÇÅLx , u‚ÇÅLy , q‚ÇÅRx , v‚ÇÅRy , B‚ÇÉ) , ((p‚ÇÇ , q‚ÇÇ , u‚ÇÇ , v‚ÇÇ) , p‚ÇÇLy , u‚ÇÇLz , q‚ÇÇRy , v‚ÇÇRz , B‚ÇÑ))
   = (min p‚ÇÅ p‚ÇÇ , max q‚ÇÅ q‚ÇÇ , min u‚ÇÅ u‚ÇÇ , max v‚ÇÅ v‚ÇÇ) , II , III , IV , V , VI
    where
     xyl = min p‚ÇÅ u‚ÇÅ
     xyr = max q‚ÇÅ v‚ÇÅ
     yzl = min p‚ÇÇ u‚ÇÇ
     yzr = max q‚ÇÇ v‚ÇÇ
     II : min p‚ÇÅ p‚ÇÇ ‚àà Lx
     II = i (min-to-‚â§ p‚ÇÅ p‚ÇÇ)
      where
       i : (p‚ÇÅ ‚â§ p‚ÇÇ) √ó (min p‚ÇÅ p‚ÇÇ ‚â° p‚ÇÅ) ‚àî (p‚ÇÇ ‚â§ p‚ÇÅ) √ó (min p‚ÇÅ p‚ÇÇ ‚â° p‚ÇÇ) ‚Üí min p‚ÇÅ p‚ÇÇ ‚àà Lx
       i (inl (l , e)) = transport (_‚àà Lx) (e ‚Åª¬π) p‚ÇÅLx
       i (inr (l , e)) = rounded-left-a Lx rounded-left-x (min p‚ÇÅ p‚ÇÇ) p‚ÇÅ (transport (_‚â§ p‚ÇÅ) (e ‚Åª¬π) l) p‚ÇÅLx
     III : min u‚ÇÅ u‚ÇÇ ‚àà Lz
     III = i (min-to-‚â§ u‚ÇÅ u‚ÇÇ)
      where
       i : (u‚ÇÅ ‚â§ u‚ÇÇ) √ó (min u‚ÇÅ u‚ÇÇ ‚â° u‚ÇÅ) ‚àî (u‚ÇÇ ‚â§ u‚ÇÅ) √ó (min u‚ÇÅ u‚ÇÇ ‚â° u‚ÇÇ) ‚Üí min u‚ÇÅ u‚ÇÇ ‚àà Lz
       i (inl (l , e)) = rounded-left-a Lz rounded-left-z (min u‚ÇÅ u‚ÇÇ) u‚ÇÇ (transport (_‚â§ u‚ÇÇ) (e ‚Åª¬π) l) u‚ÇÇLz
       i (inr (l , e)) = transport (_‚àà Lz) (e ‚Åª¬π) u‚ÇÇLz
     IV : max q‚ÇÅ q‚ÇÇ ‚àà Rx
     IV = i (max-to-‚â§ q‚ÇÅ q‚ÇÇ)
      where
       i : (q‚ÇÅ ‚â§ q‚ÇÇ) √ó (max q‚ÇÅ q‚ÇÇ ‚â° q‚ÇÇ) ‚àî (q‚ÇÇ ‚â§ q‚ÇÅ) √ó (max q‚ÇÅ q‚ÇÇ ‚â° q‚ÇÅ) ‚Üí max q‚ÇÅ q‚ÇÇ ‚àà Rx
       i (inl (l , e)) = rounded-right-a Rx rounded-right-x q‚ÇÅ (max q‚ÇÅ q‚ÇÇ) (transport (q‚ÇÅ ‚â§_ ) (e ‚Åª¬π) l) q‚ÇÅRx
       i (inr (l , e)) = transport (_‚àà Rx) (e ‚Åª¬π) q‚ÇÅRx
     V : max v‚ÇÅ v‚ÇÇ ‚àà Rz
     V = i (max-to-‚â§ v‚ÇÅ v‚ÇÇ)
      where
       i : (v‚ÇÅ ‚â§ v‚ÇÇ) √ó (max v‚ÇÅ v‚ÇÇ ‚â° v‚ÇÇ) ‚àî (v‚ÇÇ ‚â§ v‚ÇÅ) √ó (max v‚ÇÅ v‚ÇÇ ‚â° v‚ÇÅ) ‚Üí max v‚ÇÅ v‚ÇÇ ‚àà Rz
       i (inl (l , e)) = transport (_‚àà Rz) (e ‚Åª¬π) v‚ÇÇRz
       i (inr (l , e)) = rounded-right-a Rz rounded-right-z v‚ÇÇ (max v‚ÇÅ v‚ÇÇ) (transport (v‚ÇÇ ‚â§_) (e ‚Åª¬π) l) v‚ÇÇRz
     VI : B-‚Ñö (min (min p‚ÇÅ p‚ÇÇ) (min u‚ÇÅ u‚ÇÇ)) (max (max q‚ÇÅ q‚ÇÇ) (max v‚ÇÅ v‚ÇÇ)) Œµ Œµ>0
     VI = transport‚ÇÇ (Œª Œ± Œ≤ ‚Üí B-‚Ñö Œ± Œ≤ Œµ Œµ>0) (i ‚Åª¬π) (ii ‚Åª¬π) iii
      where
       i : min (min p‚ÇÅ p‚ÇÇ) (min u‚ÇÅ u‚ÇÇ) ‚â° min xyl yzl
       i = min (min p‚ÇÅ p‚ÇÇ) (min u‚ÇÅ u‚ÇÇ) ‚â°‚ü® min-assoc p‚ÇÅ p‚ÇÇ (min u‚ÇÅ u‚ÇÇ) ‚ü©
           min p‚ÇÅ (min p‚ÇÇ (min u‚ÇÅ u‚ÇÇ)) ‚â°‚ü® ap (Œª - ‚Üí min p‚ÇÅ -) (min-comm p‚ÇÇ (min u‚ÇÅ u‚ÇÇ)) ‚ü©
           min p‚ÇÅ (min (min u‚ÇÅ u‚ÇÇ) p‚ÇÇ) ‚â°‚ü® min-assoc p‚ÇÅ (min u‚ÇÅ u‚ÇÇ) p‚ÇÇ ‚Åª¬π ‚ü©
           min (min p‚ÇÅ (min u‚ÇÅ u‚ÇÇ)) p‚ÇÇ ‚â°‚ü® ap (Œª z ‚Üí min z p‚ÇÇ) (min-assoc p‚ÇÅ u‚ÇÅ u‚ÇÇ ‚Åª¬π) ‚ü©
           min (min xyl u‚ÇÇ) p‚ÇÇ ‚â°‚ü® min-assoc xyl u‚ÇÇ p‚ÇÇ  ‚ü©
           min xyl (min u‚ÇÇ p‚ÇÇ) ‚â°‚ü® ap (Œª - ‚Üí min xyl -) (min-comm u‚ÇÇ p‚ÇÇ) ‚ü©
           min xyl yzl ‚àé
       ii : max (max q‚ÇÅ q‚ÇÇ) (max v‚ÇÅ v‚ÇÇ) ‚â° max xyr yzr
       ii = max (max q‚ÇÅ q‚ÇÇ) (max v‚ÇÅ v‚ÇÇ) ‚â°‚ü® max-assoc q‚ÇÅ q‚ÇÇ (max v‚ÇÅ v‚ÇÇ) ‚ü©
            max q‚ÇÅ (max q‚ÇÇ (max v‚ÇÅ v‚ÇÇ)) ‚â°‚ü® ap (Œª - ‚Üí max q‚ÇÅ -) (max-comm q‚ÇÇ (max v‚ÇÅ v‚ÇÇ)) ‚ü©
            max q‚ÇÅ (max (max v‚ÇÅ v‚ÇÇ) q‚ÇÇ) ‚â°‚ü® max-assoc q‚ÇÅ (max v‚ÇÅ v‚ÇÇ) q‚ÇÇ ‚Åª¬π ‚ü©
            max (max q‚ÇÅ (max v‚ÇÅ v‚ÇÇ)) q‚ÇÇ ‚â°‚ü® ap (Œª z ‚Üí max z q‚ÇÇ) (max-assoc q‚ÇÅ v‚ÇÅ v‚ÇÇ ‚Åª¬π) ‚ü©
            max (max xyr v‚ÇÇ) q‚ÇÇ ‚â°‚ü® max-assoc xyr v‚ÇÇ q‚ÇÇ ‚ü©
            max xyr (max v‚ÇÇ q‚ÇÇ) ‚â°‚ü® ap (Œª - ‚Üí max xyr -) (max-comm v‚ÇÇ q‚ÇÇ) ‚ü©
            max xyr yzr ‚àé
       iii : B-‚Ñö (min xyl yzl) (max xyr yzr) Œµ Œµ>0
       iii = iv (min-to-‚â§ xyl yzl) (max-to-‚â§ xyr yzr)
        where
         iv : (xyl ‚â§ yzl) √ó (min xyl yzl ‚â° xyl)
            ‚àî (yzl ‚â§ xyl) √ó (min xyl yzl ‚â° yzl)
            ‚Üí (xyr ‚â§ yzr) √ó (max xyr yzr ‚â° yzr)
            ‚àî (yzr ‚â§ xyr) √ó (max xyr yzr ‚â° xyr)
            ‚Üí B-‚Ñö (min xyl yzl) (max xyr yzr) Œµ Œµ>0
         iv (inl (k‚ÇÅ , e‚ÇÅ)) (inl (k‚ÇÇ , e‚ÇÇ)) = transport‚ÇÇ (Œª Œ± Œ≤ ‚Üí ‚Ñö-metric Œ± Œ≤ < Œµ‚ÇÅ + Œµ‚ÇÇ) (e‚ÇÅ ‚Åª¬π) (e‚ÇÇ ‚Åª¬π) from-inequalities
          where
           from-inequalities : ‚Ñö-metric xyl yzr < (Œµ‚ÇÅ + Œµ‚ÇÇ)
           from-inequalities = inequality-chain-with-metric xyl xyr yzl yzr Œµ‚ÇÅ Œµ‚ÇÇ (v (min-to-‚â§ p‚ÇÇ u‚ÇÇ) (max-to-‚â§ q‚ÇÅ v‚ÇÅ)) k‚ÇÇ B‚ÇÉ B‚ÇÑ
            where
             v : (p‚ÇÇ ‚â§ u‚ÇÇ) √ó (min p‚ÇÇ u‚ÇÇ ‚â° p‚ÇÇ) ‚àî (u‚ÇÇ ‚â§ p‚ÇÇ) √ó (min p‚ÇÇ u‚ÇÇ ‚â° u‚ÇÇ)
               ‚Üí (q‚ÇÅ ‚â§ v‚ÇÅ) √ó (max q‚ÇÅ v‚ÇÅ ‚â° v‚ÇÅ) ‚àî (v‚ÇÅ ‚â§ q‚ÇÅ) √ó (max q‚ÇÅ v‚ÇÅ ‚â° q‚ÇÅ)
               ‚Üí min p‚ÇÇ u‚ÇÇ ‚â§ max q‚ÇÅ v‚ÇÅ
             v (inl (Œ≥‚ÇÅ , Œ¥‚ÇÅ)) (inl (Œ≥‚ÇÇ , Œ¥‚ÇÇ)) = transport‚ÇÇ _‚â§_ (Œ¥‚ÇÅ ‚Åª¬π) (Œ¥‚ÇÇ ‚Åª¬π) (‚Ñö<-coarser-than-‚â§ p‚ÇÇ v‚ÇÅ (disjoint-y p‚ÇÇ v‚ÇÅ (p‚ÇÇLy , v‚ÇÅRy)))
             v (inl (Œ≥‚ÇÅ , Œ¥‚ÇÅ)) (inr (Œ≥‚ÇÇ , Œ¥‚ÇÇ)) = transport‚ÇÇ _‚â§_ (Œ¥‚ÇÅ ‚Åª¬π) (Œ¥‚ÇÇ ‚Åª¬π) (‚Ñö<-coarser-than-‚â§ p‚ÇÇ q‚ÇÅ (disjoint-y p‚ÇÇ q‚ÇÅ (p‚ÇÇLy , (rounded-right-a Ry rounded-right-y v‚ÇÅ q‚ÇÅ Œ≥‚ÇÇ v‚ÇÅRy))))
             v (inr (Œ≥‚ÇÅ , Œ¥‚ÇÅ)) (inl (Œ≥‚ÇÇ , Œ¥‚ÇÇ)) = transport‚ÇÇ _‚â§_ (Œ¥‚ÇÅ ‚Åª¬π) (Œ¥‚ÇÇ ‚Åª¬π) (‚Ñö<-coarser-than-‚â§ u‚ÇÇ v‚ÇÅ (disjoint-y u‚ÇÇ v‚ÇÅ ((rounded-left-a Ly rounded-left-y u‚ÇÇ p‚ÇÇ Œ≥‚ÇÅ p‚ÇÇLy) , v‚ÇÅRy)))
             v (inr (Œ≥‚ÇÅ , Œ¥‚ÇÅ)) (inr (Œ≥‚ÇÇ , Œ¥‚ÇÇ)) = transport‚ÇÇ _‚â§_ (Œ¥‚ÇÅ ‚Åª¬π) (Œ¥‚ÇÇ ‚Åª¬π) (‚Ñö<-coarser-than-‚â§ u‚ÇÇ q‚ÇÅ (disjoint-y u‚ÇÇ q‚ÇÅ ((rounded-left-a Ly rounded-left-y u‚ÇÇ p‚ÇÇ Œ≥‚ÇÅ p‚ÇÇLy) , (rounded-right-a Ry rounded-right-y v‚ÇÅ q‚ÇÅ Œ≥‚ÇÇ v‚ÇÅRy))))
           
         iv (inl (k‚ÇÅ , e‚ÇÅ)) (inr (k‚ÇÇ , e‚ÇÇ)) = ‚Ñö<-trans (abs (min xyl yzl - (max xyr yzr))) Œµ‚ÇÅ Œµ (transport (_< Œµ‚ÇÅ) (v ‚Åª¬π) B‚ÇÉ) Œµ>Œµ‚ÇÅ
          where
          v : abs (min xyl yzl - max xyr yzr) ‚â° abs (xyl - xyr)
          v = ap‚ÇÇ (Œª Œ± Œ≤ ‚Üí abs (Œ± - Œ≤)) e‚ÇÅ e‚ÇÇ
         iv (inr (k‚ÇÅ , e‚ÇÅ)) (inl (k‚ÇÇ , e‚ÇÇ)) = ‚Ñö<-trans (abs (min xyl yzl - (max xyr yzr))) Œµ‚ÇÇ Œµ (transport (_< Œµ‚ÇÇ) (v ‚Åª¬π) B‚ÇÑ) Œµ>Œµ‚ÇÇ
          where
           v : abs (min xyl yzl - max xyr yzr) ‚â° abs (yzl - yzr)
           v = ap‚ÇÇ (Œª Œ± Œ≤ ‚Üí abs (Œ± - Œ≤)) e‚ÇÅ e‚ÇÇ
         iv (inr (k‚ÇÅ , e‚ÇÅ)) (inr (k‚ÇÇ , e‚ÇÇ)) = transport (‚Ñö-metric (min xyl yzl) (max xyr yzr) <_) (‚Ñö+-comm Œµ‚ÇÇ Œµ‚ÇÅ) v
          where
           from-inequalities : ‚Ñö-metric yzl xyr < (Œµ‚ÇÇ + Œµ‚ÇÅ)
           from-inequalities = inequality-chain-with-metric yzl yzr xyl xyr Œµ‚ÇÇ Œµ‚ÇÅ (vi (min-to-‚â§ p‚ÇÅ u‚ÇÅ) (max-to-‚â§ q‚ÇÇ v‚ÇÇ)) k‚ÇÇ B‚ÇÑ B‚ÇÉ
            where
             vi : (p‚ÇÅ ‚â§ u‚ÇÅ) √ó (min p‚ÇÅ u‚ÇÅ ‚â° p‚ÇÅ) ‚àî (u‚ÇÅ ‚â§ p‚ÇÅ) √ó (min p‚ÇÅ u‚ÇÅ ‚â° u‚ÇÅ)
                ‚Üí (q‚ÇÇ ‚â§ v‚ÇÇ) √ó (max q‚ÇÇ v‚ÇÇ ‚â° v‚ÇÇ) ‚àî (v‚ÇÇ ‚â§ q‚ÇÇ) √ó (max q‚ÇÇ v‚ÇÇ ‚â° q‚ÇÇ)
                ‚Üí min p‚ÇÅ u‚ÇÅ ‚â§ max q‚ÇÇ v‚ÇÇ
             vi (inl (Œ≥‚ÇÅ , Œ¥‚ÇÅ)) (inl (Œ≥‚ÇÇ , Œ¥‚ÇÇ)) = transport‚ÇÇ _‚â§_ (Œ¥‚ÇÅ ‚Åª¬π) (Œ¥‚ÇÇ ‚Åª¬π) (‚Ñö<-coarser-than-‚â§ p‚ÇÅ v‚ÇÇ (disjoint-y p‚ÇÅ v‚ÇÇ ((rounded-left-a Ly rounded-left-y p‚ÇÅ u‚ÇÅ Œ≥‚ÇÅ u‚ÇÅLy) , (rounded-right-a Ry rounded-right-y q‚ÇÇ v‚ÇÇ Œ≥‚ÇÇ q‚ÇÇRy))))
             vi (inl (Œ≥‚ÇÅ , Œ¥‚ÇÅ)) (inr (Œ≥‚ÇÇ , Œ¥‚ÇÇ)) = transport‚ÇÇ _‚â§_ (Œ¥‚ÇÅ ‚Åª¬π) (Œ¥‚ÇÇ ‚Åª¬π) (‚Ñö<-coarser-than-‚â§ p‚ÇÅ q‚ÇÇ (disjoint-y p‚ÇÅ q‚ÇÇ ((rounded-left-a Ly rounded-left-y p‚ÇÅ u‚ÇÅ Œ≥‚ÇÅ u‚ÇÅLy) , q‚ÇÇRy)))
             vi (inr (Œ≥‚ÇÅ , Œ¥‚ÇÅ)) (inl (Œ≥‚ÇÇ , Œ¥‚ÇÇ)) = transport‚ÇÇ _‚â§_ (Œ¥‚ÇÅ ‚Åª¬π) (Œ¥‚ÇÇ ‚Åª¬π) (‚Ñö<-coarser-than-‚â§ u‚ÇÅ v‚ÇÇ (disjoint-y u‚ÇÅ v‚ÇÇ (u‚ÇÅLy , (rounded-right-a Ry rounded-right-y q‚ÇÇ v‚ÇÇ Œ≥‚ÇÇ q‚ÇÇRy))))
             vi (inr (Œ≥‚ÇÅ , Œ¥‚ÇÅ)) (inr (Œ≥‚ÇÇ , Œ¥‚ÇÇ)) = transport‚ÇÇ _‚â§_ (Œ¥‚ÇÅ ‚Åª¬π) (Œ¥‚ÇÇ ‚Åª¬π) (‚Ñö<-coarser-than-‚â§ u‚ÇÅ q‚ÇÇ (disjoint-y u‚ÇÅ q‚ÇÇ (u‚ÇÅLy , q‚ÇÇRy)))
           v : ‚Ñö-metric (min xyl yzl) (max xyr yzr) < (Œµ‚ÇÇ + Œµ‚ÇÅ)
           v = transport‚ÇÇ (Œª Œ± Œ≤ ‚Üí ‚Ñö-metric Œ± Œ≤ < Œµ‚ÇÇ + Œµ‚ÇÅ) (e‚ÇÅ ‚Åª¬π) (e‚ÇÇ ‚Åª¬π) from-inequalities

‚Ñù-metric-space : metric-space ‚Ñù
‚Ñù-metric-space = B-‚Ñù , ‚Ñù-m1a , ‚Ñù-m1b , ‚Ñù-m2 , ‚Ñù-m3 , ‚Ñù-m4 



