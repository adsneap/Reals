Andrew Sneap - 27th April 2021

I link to this module within the Natural Numbers section of my report.

\begin{code}

{-# OPTIONS --without-K --exact-split --safe #-}

open import SpartanMLTT renaming (_+_ to _‚àî_ ; * to ‚ãÜ) --TypeTopology

import NaturalsAddition --TypeTopology
import NaturalNumbers-Properties --TypeTopology
import NaturalsOrder --TypeTopoology
import UF-FunExt --TypeTopology
import UF-Subsingletons --TypeTopology
import UF-Subsingletons-FunExt --TypeTopology

import NaturalsDivision
import NaturalsMultiplication
import NaturalsOrderExtended
import MoreNaturalProperties

module HCF where

open NaturalNumbers-Properties -- TypeTopology
open UF-Subsingletons -- TypeTopology

open NaturalsDivision

is-common-divisor : (d x y : ‚Ñï) ‚Üí ùì§‚ÇÄ Ãá
is-common-divisor d x y = (d ‚à£ x) √ó (d ‚à£ y)

is-common-divisor-is-prop : (d x y : ‚Ñï) ‚Üí is-prop (is-common-divisor (succ d) x y)
is-common-divisor-is-prop d x y = √ó-is-prop (d ‚à£ x -is-prop) (d ‚à£ y -is-prop)

is-hcf : (d x y : ‚Ñï) ‚Üí ùì§‚ÇÄ Ãá
is-hcf d x y = (is-common-divisor d x y) √ó ((f : ‚Ñï) ‚Üí  is-common-divisor f x y ‚Üí f ‚à£ d)

is-hcf-gives-is-common-divisor : (d x y : ‚Ñï) ‚Üí is-hcf d x y ‚Üí is-common-divisor d x y
is-hcf-gives-is-common-divisor d x y (a , p) = a

open UF-FunExt --TypeTopology
open UF-Subsingletons-FunExt --TypeTopology

is-hcf-is-prop : Fun-Ext ‚Üí (d x y : ‚Ñï) ‚Üí is-prop (is-hcf (succ d) x y)
is-hcf-is-prop fe d x y p q = √ó-is-prop (is-common-divisor-is-prop d x y) g p q
  where
    h : (f : ‚Ñï) ‚Üí is-common-divisor f x y ‚Üí is-prop (f ‚à£ succ d)
    h 0        i x = ùüò-elim (zero-does-not-divide-positive d x)
    h (succ f) i   = f ‚à£ (succ d) -is-prop
  
    g : is-prop ((f : ‚Ñï) ‚Üí is-common-divisor f x y ‚Üí f ‚à£ succ d)
    g p' q' = Œ†‚ÇÇ-is-prop fe h p' q'

has-hcf : (x y : ‚Ñï) ‚Üí ùì§‚ÇÄ Ãá
has-hcf x y = Œ£ d Íûâ ‚Ñï , is-hcf (succ d) x y

has-hcf-is-prop : Fun-Ext ‚Üí (x y : ‚Ñï) ‚Üí is-prop (has-hcf x y)
has-hcf-is-prop fe x y (a , p , p') (b , q , q') = to-subtype-‚â° I II
 where
  I : (d : ‚Ñï) ‚Üí is-prop (is-hcf (succ d) x y)
  I d = is-hcf-is-prop fe d x y

  II : a ‚â° b
  II = succ-lc (‚à£-anti (succ a) (succ b) Œ± Œ≤)
   where
    Œ± : succ a ‚à£ succ b
    Œ± = q' (succ a) p

    Œ≤ : succ b ‚à£ succ a
    Œ≤ = p' (succ b) q

open NaturalsAddition --TypeTopology
open NaturalsOrder --TypeTopoology

open MoreNaturalProperties
open NaturalsMultiplication
open NaturalsOrderExtended

hcflemma : (a b c d : ‚Ñï) ‚Üí a * b ‚â° a * c + d ‚Üí a ‚à£ d
hcflemma a b c d e = subtraction-gives-factor (dichotomy-split (‚â•-dichotomy b c))
 where
  dichotomy-split : b ‚â• c ‚àî b ‚â§ c ‚Üí (Œ£ f Íûâ ‚Ñï , f + c ‚â° b) ‚àî (Œ£ f Íûâ ‚Ñï , f + b ‚â° c)
  dichotomy-split (inl x) = inl (subtraction c b x)
  dichotomy-split (inr x) = inr (subtraction b c x)

  subtraction-gives-factor : (Œ£ f Íûâ ‚Ñï , f + c ‚â° b) ‚àî (Œ£ f Íûâ ‚Ñï , f + b ‚â° c) ‚Üí a ‚à£ d
  subtraction-gives-factor (inl (f , p)) = f , addition-left-cancellable (a * f) d (a * c) I
   where
    I : a * c + a * f ‚â° a * c + d
    I = a * c + a * f ‚â°‚ü® distributivity-mult-over-nat a c f ‚Åª¬π  ‚ü©
        a * (c + f)   ‚â°‚ü® ap (a *_) (addition-commutativity c f) ‚ü©
        a * (f + c)   ‚â°‚ü® ap (a *_) p                            ‚ü©
        a * b         ‚â°‚ü® e                                      ‚ü©
        a * c + d ‚àé
  subtraction-gives-factor (inr (f , p)) = 0 , (sum-to-zero-gives-zero (a * f) d II ‚Åª¬π)
   where
    I : a * f + d + a * b ‚â° 0 + a * b
    I = a * f + d + a * b ‚â°‚ü® trivial-addition-rearrangement (a * f) d (a * b)         ‚ü©
        a * f + a * b + d ‚â°‚ü® ap (Œª z ‚Üí z + d) (distributivity-mult-over-nat a f b ‚Åª¬π) ‚ü©
        a * (f + b) + d   ‚â°‚ü® ap (Œª z ‚Üí a * z + d) p                                   ‚ü©
        a * c + d         ‚â°‚ü® e ‚Åª¬π                                                     ‚ü©
        a * b             ‚â°‚ü® zero-left-neutral (a * b) ‚Åª¬π                             ‚ü©
        0 + a * b         ‚àé

    II : a * f + d ‚â° 0
    II = addition-right-cancellable (a * f + d) 0 (a * b) I

--using hints from cubical agda and strong induction cornell lecture
HCF : (a b : ‚Ñï) ‚Üí Œ£ h Íûâ ‚Ñï , is-hcf h a b
HCF = course-of-values-induction (Œª n ‚Üí (b : ‚Ñï) ‚Üí Œ£ h Íûâ ‚Ñï , is-hcf h n b) step
 where
  step : (n : ‚Ñï) ‚Üí ((m : ‚Ñï) ‚Üí m < n ‚Üí (b : ‚Ñï) ‚Üí Œ£ h Íûâ ‚Ñï , is-hcf h m b) ‚Üí (b : ‚Ñï) ‚Üí Œ£ h Íûâ ‚Ñï , is-hcf h n b
  step zero IH b = b , ((zero , refl) , 1 , refl) , (Œª x ‚Üí pr‚ÇÇ)
  step (succ n) IH b = I (division b n)
   where
    I : Œ£ q Íûâ ‚Ñï , Œ£ r Íûâ ‚Ñï , (b ‚â° q * succ n + r) √ó (r < succ n) ‚Üí Œ£ h Íûâ ‚Ñï , is-hcf h (succ n) b
    I (q , r , e‚ÇÄ , l) = II (IH r l (succ n))
     where
      II : Œ£ h Íûâ ‚Ñï , is-hcf h r (succ n) ‚Üí Œ£ h Íûâ ‚Ñï , is-hcf h (succ n) b
      II (h , ((x , x‚Çö) , y , y‚Çö) , Œ≥) = h , ((y , y‚Çö) , i) , ii
       where
        i : h ‚à£ b
        i = (q * y + x) , e‚ÇÅ
         where
          e‚ÇÅ : h * (q * y + x) ‚â° b
          e‚ÇÅ = h * (q * y + x)         ‚â°‚ü® distributivity-mult-over-nat h (q * y) x      ‚ü© 
               h * (q * y) + h * x     ‚â°‚ü® ap (Œª z ‚Üí h * (q * y) + z) x‚Çö                 ‚ü©
               h * (q * y) + r         ‚â°‚ü® ap (_+ r) (mult-associativity h q y) ‚Åª¬π       ‚ü©
               h * q * y + r           ‚â°‚ü® ap (Œª z ‚Üí z * y + r) (mult-commutativity h q) ‚ü©
               q * h * y + r           ‚â°‚ü® ap (_+ r) (mult-associativity q h y)          ‚ü©
               q * (h * y) + r         ‚â°‚ü® ap (Œª z ‚Üí q * z + r) y‚Çö                       ‚ü©
               q * succ n + r          ‚â°‚ü® e‚ÇÄ ‚Åª¬π ‚ü©
               b                       ‚àé

        ii : (f : ‚Ñï) ‚Üí is-common-divisor f (succ n) b ‚Üí f ‚à£ h
        ii f ((Œ± , Œ±‚Çö) , Œ≤ , Œ≤‚Çö) = Œ≥ f ((hcflemma f Œ≤ (q * Œ±) r e‚ÇÇ) , (Œ± , Œ±‚Çö))
         where
          e‚ÇÇ : f * Œ≤ ‚â° f * (q * Œ±) + r
          e‚ÇÇ = f * Œ≤           ‚â°‚ü® Œ≤‚Çö                                             ‚ü©
               b               ‚â°‚ü® e‚ÇÄ                                             ‚ü©
               q * succ n + r  ‚â°‚ü® ap (Œª z ‚Üí q * z + r) (Œ±‚Çö ‚Åª¬π)                  ‚ü©
               q * (f * Œ±) + r ‚â°‚ü® ap (_+ r) (mult-associativity q f Œ± ‚Åª¬π)       ‚ü©
               q * f * Œ± + r   ‚â°‚ü® ap (Œª z ‚Üí z * Œ± + r) (mult-commutativity q f) ‚ü©
               f * q * Œ± + r   ‚â°‚ü® ap (_+ r ) (mult-associativity f q Œ±)         ‚ü©
               f * (q * Œ±) + r ‚àé

hcf : (a b : ‚Ñï) ‚Üí ‚Ñï
hcf a b = pr‚ÇÅ (HCF a b)

coprime : (a b : ‚Ñï) ‚Üí ùì§‚ÇÄ Ãá
coprime a b = is-hcf 1 a b

coprime-is-prop : Fun-Ext ‚Üí (a b : ‚Ñï) ‚Üí is-prop (coprime a b)
coprime-is-prop fe a b = is-hcf-is-prop fe zero a b

divbyhcf : (a b : ‚Ñï) ‚Üí Œ£ h Íûâ ‚Ñï , Œ£ x Íûâ ‚Ñï , Œ£ y Íûâ ‚Ñï , ((h * x ‚â° a) √ó (h * y ‚â° b)) √ó coprime x y
divbyhcf zero     b = b , (zero , (1 , ((refl , refl) , ((zero , refl) , 1 , refl) , (Œª x ‚Üí pr‚ÇÇ))))
divbyhcf (succ a) b = I (HCF (succ a) b)
 where
  I : Œ£ c Íûâ ‚Ñï , is-hcf c (succ a) b ‚Üí Œ£ h Íûâ ‚Ñï , Œ£ x Íûâ ‚Ñï , Œ£ y Íûâ ‚Ñï , ((h * x ‚â° (succ a)) √ó (h * y ‚â° b)) √ó coprime x y 
  I (zero , ((x , x‚Çö) , y , y‚Çö) , Œ≥) = have positive-not-zero a which-contradicts II
   where
    II : succ a ‚â° 0
    II = succ a  ‚â°‚ü® x‚Çö ‚Åª¬π                     ‚ü©
         0 * x   ‚â°‚ü® mult-commutativity zero x ‚ü©
         0       ‚àé
  I (succ h , ((x , x‚Çö) , y , y‚Çö) , Œ≥) = (succ h) , (x , (y , ((x‚Çö , y‚Çö) , (((x , mult-commutativity 1 x) , y , (mult-commutativity 1 y)) , II))))
   where
    II : (f' : ‚Ñï) ‚Üí is-common-divisor f' x y ‚Üí f' ‚à£ 1
    II f' ((Œ± , Œ±‚Çö) , Œ≤ , Œ≤‚Çö) = III (Œ≥ (succ h * f') ((Œ± , Œ±‚Çö') , Œ≤ , Œ≤‚Çö'))
     where
      Œ±‚Çö' : succ h * f' * Œ± ‚â° succ a
      Œ±‚Çö' = succ h * f' * Œ±     ‚â°‚ü® mult-associativity (succ h) f' Œ± ‚ü©
            succ h * (f' * Œ±)   ‚â°‚ü® ap (succ h *_) Œ±‚Çö                ‚ü©
            succ h * x          ‚â°‚ü® x‚Çö                               ‚ü©
            succ a              ‚àé

      Œ≤‚Çö' : succ h * f' * Œ≤ ‚â° b
      Œ≤‚Çö' = succ h * f' * Œ≤   ‚â°‚ü® mult-associativity (succ h) f' Œ≤ ‚ü©
            succ h * (f' * Œ≤) ‚â°‚ü® ap (succ h *_) Œ≤‚Çö                ‚ü©
            succ h * y        ‚â°‚ü® y‚Çö                               ‚ü©
            b                 ‚àé

      III : (succ h) * f' ‚à£ (succ h) ‚Üí f' ‚à£ 1
      III (Œ¥ , Œ¥‚Çö) = 1 , product-one-gives-one f' Œ¥ (mult-left-cancellable (f' * Œ¥) 1 h e)
       where
        e : succ h * (f' * Œ¥) ‚â° succ h * 1
        e = succ h * (f' * Œ¥) ‚â°‚ü® mult-associativity (succ h) f' Œ¥ ‚Åª¬π ‚ü©
            succ h * f' * Œ¥   ‚â°‚ü® Œ¥‚Çö ‚ü©
            succ h            ‚àé

hcf-unique : (a b : ‚Ñï) ‚Üí ((h , p) : Œ£ h Íûâ ‚Ñï , is-hcf h a b) ‚Üí ((h' , p') : Œ£ h' Íûâ ‚Ñï , is-hcf h' a b) ‚Üí h ‚â° h'
hcf-unique a b (h , h-icd , f) (h' , h'-icd , f') = ‚à£-anti h h' I II
 where
  I : h ‚à£ h'
  I = f' h h-icd

  II : h' ‚à£ h
  II = f h' h'-icd

\end{code}
