Andrew Sneap - 27th April 2021

I link to this module within the Rationals section of my report.

\begin{code}

{-# OPTIONS --without-K --exact-split --safe #-}

open import SpartanMLTT renaming (_+_ to _‚àî_ ; * to ‚ãÜ) --TypeTopology

import DiscreteAndSeparated --TypeTopology
import NaturalsAddition --TypeTopology
import NaturalNumbers-Properties -- TypeTopology
import UF-Base --TypeTopology
import UF-FunExt --TypeTopology
import UF-Miscelanea --TypeTopology
import UF-Subsingletons --TypeTopology

import Integers
import IntegersHCF
import IntegersOrder
import IntegersProperties
import HCF
import MoreNaturalProperties
import NaturalsDivision
import NaturalsMultiplication 

module ncRationals where

open Integers renaming (_*_ to _‚Ñ§*_ ; _+_ to _‚Ñ§+_)

‚Ñö‚Çô : ùì§‚ÇÄ Ãá
‚Ñö‚Çô = ‚Ñ§ √ó ‚Ñï

open HCF

is-in-lowest-terms : ‚Ñö‚Çô ‚Üí ùì§‚ÇÄ Ãá
is-in-lowest-terms (x , y) = coprime (abs x) (succ y)

open UF-FunExt -- TypeTopology
open UF-Subsingletons --TypeTopology

is-in-lowest-terms-is-prop : Fun-Ext ‚Üí (q : ‚Ñö‚Çô) ‚Üí is-prop (is-in-lowest-terms q)
is-in-lowest-terms-is-prop fe (x , y) = coprime-is-prop fe (abs x) (succ y)

open DiscreteAndSeparated --TypeTopology
open IntegersProperties
open UF-Miscelanea --TypeTopology

‚Ñö‚Çô-is-discrete : is-discrete ‚Ñö‚Çô
‚Ñö‚Çô-is-discrete = Œ£-is-discrete ‚Ñ§-is-discrete Œª _ ‚Üí ‚Ñï-is-discrete

‚Ñö‚Çô-is-set : is-set ‚Ñö‚Çô
‚Ñö‚Çô-is-set = discrete-types-are-sets ‚Ñö‚Çô-is-discrete

open NaturalsMultiplication renaming (_*_ to _‚Ñï*_)

_‚Ñö‚Çô'+_ : ‚Ñö‚Çô ‚Üí ‚Ñö‚Çô ‚Üí ‚Ñö‚Çô
(x , a) ‚Ñö‚Çô'+ (y , b) = (x ‚Ñ§* pos b) ‚Ñ§+ (y ‚Ñ§* pos a) , a ‚Ñï* b 

open UF-Base --TypeTopology

‚Ñö‚Çô'+-comm : (a b : ‚Ñö‚Çô) ‚Üí a ‚Ñö‚Çô'+ b ‚â° b ‚Ñö‚Çô'+ a
‚Ñö‚Çô'+-comm (x , a) (y , b) = ap‚ÇÇ (Œª z z' ‚Üí z , z') (‚Ñ§+-comm (x ‚Ñ§* pos b) (y ‚Ñ§* pos a)) (mult-commutativity a b)

‚Ñö‚Çô'+-assoc : (a b c : ‚Ñö‚Çô) ‚Üí (a ‚Ñö‚Çô'+ b) ‚Ñö‚Çô'+ c ‚â° a ‚Ñö‚Çô'+ (b ‚Ñö‚Çô'+ c)
‚Ñö‚Çô'+-assoc (x , y) (x' , y') (x'' , y'') = ap‚ÇÇ (Œª z z' ‚Üí z , z') I II
 where
  I : (((x ‚Ñ§* (pos y')) ‚Ñ§+ (x' ‚Ñ§* (pos y))) ‚Ñ§* pos y'') ‚Ñ§+ (x'' ‚Ñ§* pos (y ‚Ñï* y')) ‚â° (x ‚Ñ§* pos (y' ‚Ñï* y'')) ‚Ñ§+ (((x' ‚Ñ§* pos y'') ‚Ñ§+ (x'' ‚Ñ§* pos y')) ‚Ñ§* pos y)
  I = (x ‚Ñ§* pos y' ‚Ñ§+ x' ‚Ñ§* pos y) ‚Ñ§* pos y'' ‚Ñ§+ x'' ‚Ñ§* pos (y ‚Ñï* y')                  ‚â°‚ü® ap‚ÇÇ (Œª z z' ‚Üí z ‚Ñ§+ z') (distributivity-mult-over-‚Ñ§ (x ‚Ñ§* pos y') (x' ‚Ñ§* pos y) (pos y'')) (ap (x'' ‚Ñ§*_) (pos-multiplication-equiv-to-‚Ñï y y') ‚Åª¬π)                            ‚ü©
      x ‚Ñ§* pos y' ‚Ñ§* pos y'' ‚Ñ§+ x' ‚Ñ§* pos y ‚Ñ§* pos y'' ‚Ñ§+ x'' ‚Ñ§* (pos y ‚Ñ§* pos y')     ‚â°‚ü® ‚Ñ§+-assoc ((x ‚Ñ§* pos y') ‚Ñ§* pos y'') ((x' ‚Ñ§* pos y) ‚Ñ§* pos y'') ((x'' ‚Ñ§* (pos y ‚Ñ§* pos y')))                                                                                 ‚ü© 
      x ‚Ñ§* pos y' ‚Ñ§* pos y'' ‚Ñ§+ (x' ‚Ñ§* pos y ‚Ñ§* pos y'' ‚Ñ§+ x'' ‚Ñ§* (pos y ‚Ñ§* pos y'))   ‚â°‚ü® ap‚ÇÇ (Œª z z' ‚Üí z ‚Ñ§+ z') (‚Ñ§*-assoc x (pos y') (pos y'') ‚Åª¬π) (ap‚ÇÇ (Œª z z' ‚Üí z ‚Ñ§+ z') (ap (_‚Ñ§* pos y'') (‚Ñ§*-comm x' (pos y))) (ap (x'' ‚Ñ§*_) (‚Ñ§*-comm (pos y) (pos y'))))         ‚ü©
      x ‚Ñ§* (pos y' ‚Ñ§* pos y'') ‚Ñ§+ (pos y ‚Ñ§* x' ‚Ñ§* pos y'' ‚Ñ§+ x'' ‚Ñ§* (pos y' ‚Ñ§* pos y)) ‚â°‚ü® ap‚ÇÇ (Œª z z' ‚Üí z ‚Ñ§+ z') (ap (x ‚Ñ§*_) (pos-multiplication-equiv-to-‚Ñï y' y'')) (ap‚ÇÇ (Œª z z' ‚Üí z ‚Ñ§+ z') (ap (_‚Ñ§* pos y'') (‚Ñ§*-comm (pos y) x')) (‚Ñ§*-assoc x'' (pos y') (pos y)))  ‚ü©
      x ‚Ñ§* pos (y' ‚Ñï* y'') ‚Ñ§+ (x' ‚Ñ§* pos y ‚Ñ§* pos y'' ‚Ñ§+ x'' ‚Ñ§* pos y' ‚Ñ§* pos y)       ‚â°‚ü® ap ((x ‚Ñ§* pos (y' ‚Ñï* y'')) ‚Ñ§+_) (ap‚ÇÇ (Œª z z' ‚Üí z ‚Ñ§+ z') (ap (_‚Ñ§* pos y'') (‚Ñ§*-comm x' (pos y))) (‚Ñ§*-comm (x'' ‚Ñ§* pos y') (pos y)))                                          ‚ü©
      x ‚Ñ§* pos (y' ‚Ñï* y'') ‚Ñ§+ (pos y ‚Ñ§* x' ‚Ñ§* pos y'' ‚Ñ§+ pos y ‚Ñ§* (x'' ‚Ñ§* pos y'))     ‚â°‚ü® ap (Œª z ‚Üí  ((x ‚Ñ§* pos (y' ‚Ñï* y'')) ‚Ñ§+ (z ‚Ñ§+ (pos y ‚Ñ§* (x'' ‚Ñ§* pos y'))))) (‚Ñ§*-assoc (pos y) x' (pos y'') ‚Åª¬π)                                                                ‚ü©
      x ‚Ñ§* pos (y' ‚Ñï* y'') ‚Ñ§+ (pos y ‚Ñ§* (x' ‚Ñ§* pos y'') ‚Ñ§+ pos y ‚Ñ§* (x'' ‚Ñ§* pos y'))   ‚â°‚ü® ap ((x ‚Ñ§* pos (y' ‚Ñï* y'')) ‚Ñ§+_) (distributivity-mult-over-‚Ñ§' (x' ‚Ñ§* pos y'') (x'' ‚Ñ§* pos y') (pos y) ‚Åª¬π)                                                                    ‚ü©
      x ‚Ñ§* pos (y' ‚Ñï* y'') ‚Ñ§+ pos y ‚Ñ§* (x' ‚Ñ§* pos y'' ‚Ñ§+ x'' ‚Ñ§* pos y')                ‚â°‚ü® ap ((x ‚Ñ§* pos (y' ‚Ñï* y'')) ‚Ñ§+_) (‚Ñ§*-comm (pos y) ((x' ‚Ñ§* pos y'') ‚Ñ§+ (x'' ‚Ñ§* pos y')))                                                                                      ‚ü©
      x ‚Ñ§* pos (y' ‚Ñï* y'') ‚Ñ§+ (x' ‚Ñ§* pos y'' ‚Ñ§+ x'' ‚Ñ§* pos y') ‚Ñ§* pos y                ‚àé 

  II : y ‚Ñï* y' ‚Ñï* y'' ‚â° y ‚Ñï* (y' ‚Ñï* y'')
  II = mult-associativity y y' y''

open NaturalNumbers-Properties  --TypeTopology

_+_ : ‚Ñö‚Çô ‚Üí ‚Ñö‚Çô ‚Üí ‚Ñö‚Çô
(x , y) + (x' , y') = f ((x , succ y) ‚Ñö‚Çô'+ (x' , succ y')) --(x ‚Ñ§* pos (succ y')) ‚Ñ§+ (x' ‚Ñ§* pos (succ y)) , pred (succ y ‚Ñï* succ y')
 where
  f : ‚Ñö‚Çô ‚Üí ‚Ñö‚Çô
  f (a , b) = a , (pred b)

open NaturalsAddition renaming (_+_ to _‚Ñï+_) --TypeTopology
open MoreNaturalProperties 

‚Ñö‚Çô+-comm : (p q : ‚Ñö‚Çô) ‚Üí p + q ‚â° q + p
‚Ñö‚Çô+-comm (x , a) (y , b) = ap‚ÇÇ _,_ (ap pr‚ÇÅ e) (ap pred (ap pr‚ÇÇ e))
 where
  e : ((x , succ a) ‚Ñö‚Çô'+ (y , succ b)) ‚â° ((y , succ b) ‚Ñö‚Çô'+ (x , succ a))
  e = ‚Ñö‚Çô'+-comm (x , (succ a)) (y , (succ b))
    
‚Ñö‚Çô+-assoc-lemma : (x y : ‚Ñï) ‚Üí Œ£ z Íûâ ‚Ñï , succ z ‚â° (succ x) ‚Ñï* (succ y) 
‚Ñö‚Çô+-assoc-lemma x = induction base step
 where
  base : Œ£ z Íûâ ‚Ñï , succ z ‚â° succ x ‚Ñï* 1
  base = x , refl

  step : (k : ‚Ñï)
       ‚Üí Œ£ z Íûâ ‚Ñï , succ z ‚â° succ x ‚Ñï* succ k
       ‚Üí Œ£ z Íûâ ‚Ñï , succ z ‚â° succ x ‚Ñï* succ (succ k)
  step k (z , p) = (x ‚Ñï+ 1) ‚Ñï+ z , I
   where
    I : succ (x ‚Ñï+ 1 ‚Ñï+ z) ‚â° succ x ‚Ñï* succ (succ k)
    I = succ (x ‚Ñï+ 1 ‚Ñï+ z) ‚â°‚ü® addition-right-succ (succ x) z ‚Åª¬π ‚ü©
        succ x ‚Ñï+ succ z                     ‚â°‚ü® ap (succ x ‚Ñï+_) p ‚ü©
        succ x ‚Ñï+ (succ x ‚Ñï+ succ x ‚Ñï* k)    ‚â°‚ü® refl              ‚ü©
        succ x ‚Ñï* succ (succ k)              ‚àé

denom-setup : (a b : ‚Ñï) ‚Üí  pos (succ (pred (succ a ‚Ñï* succ b))) ‚â° pos (succ a) ‚Ñ§* pos (succ b)
denom-setup a b = pos (succ (pred (succ a ‚Ñï* succ b))) ‚â°‚ü® ap pos (succ-pred-multiplication a b ‚Åª¬π) ‚ü©
                  pos (succ a ‚Ñï* succ b)               ‚â°‚ü® pos-multiplication-equiv-to-‚Ñï (succ a) (succ b) ‚Åª¬π ‚ü©
                  pos (succ a) ‚Ñ§* pos (succ b) ‚àé

‚Ñö‚Çô+-assoc : (a b c : ‚Ñö‚Çô) ‚Üí (a + b) + c ‚â° a + (b + c)
‚Ñö‚Çô+-assoc (x , a) (y , b) (z , c) = ap‚ÇÇ _,_ I II
 where
  left : ‚Ñö‚Çô
  left = (x , a) + (y , b)
  
  right : ‚Ñö‚Çô
  right = (y , b) + (z , c)

  Œ± Œ¥ : ‚Ñ§
  Œ± = pr‚ÇÅ left
  Œ¥ = pr‚ÇÅ right

  Œ≤ Œ≥ : ‚Ñï
  Œ≤ = pr‚ÇÇ left
  Œ≥ = pr‚ÇÇ right

  e : (((x , succ a) ‚Ñö‚Çô'+ (y , succ b)) ‚Ñö‚Çô'+ (z , succ c)) ‚â° ((x , succ a) ‚Ñö‚Çô'+ ((y , succ b) ‚Ñö‚Çô'+ (z , succ c)))
  e = (‚Ñö‚Çô'+-assoc (x , (succ a)) (y , succ b) (z , succ c))
  
  I : Œ± ‚Ñ§* pos (succ c) ‚Ñ§+ z ‚Ñ§* pos (succ (pred (succ a ‚Ñï* succ b))) ‚â° x ‚Ñ§* pos (succ (pred (succ b ‚Ñï* succ c))) ‚Ñ§+ Œ¥ ‚Ñ§* pos (succ a)
  I = Œ± ‚Ñ§* pos (succ c) ‚Ñ§+ z ‚Ñ§* pos (succ (pred (succ a ‚Ñï* succ b))) ‚â°‚ü® ap (Œª - ‚Üí Œ± ‚Ñ§* pos (succ c) ‚Ñ§+ z ‚Ñ§* pos -) ((succ-pred-multiplication a b ‚Åª¬π)) ‚ü©
      Œ± ‚Ñ§* pos (succ c) ‚Ñ§+ z ‚Ñ§* pos (succ a ‚Ñï* succ b)                 ‚â°‚ü® ap pr‚ÇÅ e ‚ü©
      x ‚Ñ§* pos (succ b ‚Ñï* succ c) ‚Ñ§+ Œ¥ ‚Ñ§* pos (succ a)                 ‚â°‚ü® ap (Œª - ‚Üí  x ‚Ñ§* pos - ‚Ñ§+ Œ¥ ‚Ñ§* pos (succ a)) (succ-pred-multiplication b c) ‚ü©
      x ‚Ñ§* pos (succ (pred (succ b ‚Ñï* succ c))) ‚Ñ§+ Œ¥ ‚Ñ§* pos (succ a) ‚àé

  II : pred (succ (pred (succ a ‚Ñï* (succ b))) ‚Ñï* succ c) ‚â° pred (succ a ‚Ñï* succ (pred (succ b ‚Ñï+ succ b ‚Ñï* c)))
  II = pred (succ (pred (succ a ‚Ñï* succ b)) ‚Ñï* succ c) ‚â°‚ü® ap (Œª - ‚Üí pred (- ‚Ñï* succ c)) (succ-pred-multiplication a b ‚Åª¬π) ‚ü©
       pred ((succ a ‚Ñï* succ b) ‚Ñï* succ c) ‚â°‚ü® ap pred (ap pr‚ÇÇ e) ‚ü©
       pred (succ a ‚Ñï* (succ b ‚Ñï* succ c)) ‚â°‚ü® ap (Œª - ‚Üí pred (succ a ‚Ñï* -)) (succ-pred-multiplication b c) ‚ü©
       pred (succ a ‚Ñï* succ (pred (succ b ‚Ñï* succ c))) ‚àé

open IntegersOrder renaming (_<_ to _‚Ñ§<_ ; _>_ to _‚Ñ§>_) 

_<_ _>_ : ‚Ñö‚Çô ‚Üí ‚Ñö‚Çô ‚Üí ùì§‚ÇÄ Ãá
(x , a) < (y , b) = (x ‚Ñ§* pos (succ b)) ‚Ñ§< (y ‚Ñ§* pos (succ a))
p > q = q < p

‚Ñö‚Çô<-is-prop : (p q : ‚Ñö‚Çô) ‚Üí is-prop (p < q)
‚Ñö‚Çô<-is-prop (x , a) (y , b) = ‚Ñ§<-is-prop (x ‚Ñ§* pos (succ b)) (y ‚Ñ§* pos (succ a))

‚Ñö‚Çô-trans : (p q r : ‚Ñö‚Çô) ‚Üí p < q ‚Üí q < r ‚Üí p < r
‚Ñö‚Çô-trans (x , a) (y , b) (z , c) Œ± Œ≤ = ordering-right-cancellable (x ‚Ñ§* pos (succ c)) (z ‚Ñ§* pos (succ a)) (pos (succ b)) ‚ãÜ I
 where
  I : ((x ‚Ñ§* pos (succ c)) ‚Ñ§* pos (succ b)) ‚Ñ§< ((z ‚Ñ§* pos (succ a)) ‚Ñ§* pos (succ b))
  I = ‚Ñ§<-trans ((x ‚Ñ§* pos (succ c)) ‚Ñ§* pos (succ b)) ((y ‚Ñ§* pos (succ a)) ‚Ñ§* pos (succ c)) ((z ‚Ñ§* pos (succ a)) ‚Ñ§* pos (succ b)) i ii
   where
    i : ((x ‚Ñ§* pos (succ c)) ‚Ñ§* pos (succ b)) ‚Ñ§< ((y ‚Ñ§* pos (succ a)) ‚Ñ§+ ((y ‚Ñ§* pos (succ a)) ‚Ñ§* pos c))
    i = transport (Œª z ‚Üí z ‚Ñ§< ((y ‚Ñ§* pos (succ a)) ‚Ñ§+ ((y ‚Ñ§* pos (succ a)) ‚Ñ§* pos c))) œï Œ∏
     where
      œï : ((x ‚Ñ§* pos (succ b)) ‚Ñ§* pos (succ c)) ‚â° ((x ‚Ñ§* pos (succ c)) ‚Ñ§* pos (succ b))
      œï = ‚Ñ§-mult-rearrangement x (pos (succ b)) (pos (succ c))

      Œ∏ : ((x ‚Ñ§* pos (succ b)) ‚Ñ§* pos (succ c)) ‚Ñ§< ((y ‚Ñ§* pos (succ a)) ‚Ñ§* pos (succ c))
      Œ∏ = positive-multiplication-preserves-order (x ‚Ñ§* pos (succ b)) (y ‚Ñ§* pos (succ a)) (pos (succ c)) ‚ãÜ Œ±
    ii : ((y ‚Ñ§* pos (succ a)) ‚Ñ§* pos (succ c)) ‚Ñ§< ((z ‚Ñ§* pos (succ a)) ‚Ñ§* pos (succ b))
    ii = transport‚ÇÇ (Œª s s' ‚Üí s ‚Ñ§< s') Œ≥‚ÇÅ Œ≥‚ÇÇ Œ≥‚ÇÉ
     where
      Œ≥‚ÇÅ : ((y ‚Ñ§* pos (succ c)) ‚Ñ§* pos (succ a)) ‚â° ((y ‚Ñ§* pos (succ a)) ‚Ñ§* pos (succ c))
      Œ≥‚ÇÅ = ‚Ñ§-mult-rearrangement y (pos (succ c)) (pos (succ a))

      Œ≥‚ÇÇ : ((z ‚Ñ§* pos (succ b)) ‚Ñ§* pos (succ a)) ‚â° ((z ‚Ñ§* pos (succ a)) ‚Ñ§* pos (succ b))
      Œ≥‚ÇÇ = ‚Ñ§-mult-rearrangement z (pos (succ b)) (pos (succ a))

      Œ≥‚ÇÉ : ((y ‚Ñ§* pos (succ c)) ‚Ñ§* pos (succ a)) ‚Ñ§< ((z ‚Ñ§* pos (succ b)) ‚Ñ§* pos (succ a))
      Œ≥‚ÇÉ = positive-multiplication-preserves-order (y ‚Ñ§* pos (succ c)) (z ‚Ñ§* pos (succ b)) (pos (succ a)) ‚ãÜ Œ≤

‚Ñö‚Çô-less-than-pos-addition : (p (y , b) : ‚Ñö‚Çô) ‚Üí greater-than-zero y ‚Üí p < (p + (y , b))
‚Ñö‚Çô-less-than-pos-addition (x , a) (y , b) p = f (III) 
 where
  a' b' : ‚Ñ§
  a' = pos (succ a)
  b' = pos (succ b)

  III : Œ£ c Íûâ ‚Ñ§ , greater-than-zero c √ó (x ‚Ñ§* (a' ‚Ñ§* b') ‚Ñ§+ c ‚â° x ‚Ñ§* (a' ‚Ñ§* b') ‚Ñ§+ (y ‚Ñ§* a') ‚Ñ§* a')
  III = ‚Ñ§<-less-than-pos-addition (x ‚Ñ§* (a' ‚Ñ§* b')) ((y ‚Ñ§* a') ‚Ñ§* a') (greater-than-zero-mult-trans (y ‚Ñ§* a') (a') (greater-than-zero-mult-trans y (a') p (pos-succ-greater-than-zero a)) (pos-succ-greater-than-zero a))

  f : Œ£ c Íûâ ‚Ñ§ , greater-than-zero c √ó (x ‚Ñ§* (a' ‚Ñ§* b') ‚Ñ§+ c ‚â° x ‚Ñ§* (a' ‚Ñ§* b') ‚Ñ§+ (y ‚Ñ§* a') ‚Ñ§* a')
    ‚Üí Œ£ c Íûâ ‚Ñ§ , greater-than-zero c √ó (x ‚Ñ§* pos (succ (pred (succ a ‚Ñï* succ b))) ‚Ñ§+ c ‚â° (x ‚Ñ§* b' ‚Ñ§+ (y ‚Ñ§* a')) ‚Ñ§* a')
  f (c , (g , p)) = c , g , transport‚ÇÇ (Œª z z' ‚Üí z ‚â° z') IV V p
   where
    VI : succ (pred (succ a ‚Ñï* succ b)) ‚â° succ a ‚Ñï* succ b
    VI = succ-pred-multiplication a b ‚Åª¬π

    IV : x ‚Ñ§* (a' ‚Ñ§* b') ‚Ñ§+ c ‚â° x ‚Ñ§* pos (succ (pred (succ a ‚Ñï* succ b))) ‚Ñ§+ c
    IV = x ‚Ñ§* (a' ‚Ñ§* b') ‚Ñ§+ c        ‚â°‚ü® ap (Œª z ‚Üí x ‚Ñ§* z ‚Ñ§+ c) (pos-multiplication-equiv-to-‚Ñï (succ a) (succ b)) ‚ü©
         x ‚Ñ§* pos (succ a ‚Ñï* succ b) ‚Ñ§+ c                ‚â°‚ü® ap (Œª z ‚Üí (x ‚Ñ§* z) ‚Ñ§+ c) (ap pos (VI ‚Åª¬π)) ‚ü©
         x ‚Ñ§* pos (succ (pred (succ a ‚Ñï* succ b))) ‚Ñ§+ c ‚àé

    V : x ‚Ñ§* (a' ‚Ñ§* b') ‚Ñ§+ y ‚Ñ§* a' ‚Ñ§* a' ‚â° (x ‚Ñ§* b' ‚Ñ§+ y ‚Ñ§* a') ‚Ñ§* a'
    V = x ‚Ñ§* (a' ‚Ñ§* b') ‚Ñ§+ y ‚Ñ§* a' ‚Ñ§* a' ‚â°‚ü® ap (Œª z ‚Üí x ‚Ñ§* z ‚Ñ§+ y ‚Ñ§* a' ‚Ñ§* a') (‚Ñ§*-comm (a') (b')) ‚ü©
        x ‚Ñ§* (b' ‚Ñ§* a') ‚Ñ§+ y ‚Ñ§* a' ‚Ñ§* a' ‚â°‚ü®  ap (_‚Ñ§+ y ‚Ñ§* a' ‚Ñ§* a') (‚Ñ§*-assoc x (b') (a')) ‚ü©
        (x ‚Ñ§* b') ‚Ñ§* a' ‚Ñ§+ y ‚Ñ§* a' ‚Ñ§* a' ‚â°‚ü® distributivity-mult-over-‚Ñ§ (x ‚Ñ§+ x ‚Ñ§* pos b) (y ‚Ñ§+ y ‚Ñ§* pos a) (a') ‚Åª¬π ‚ü©
        (x ‚Ñ§* b' ‚Ñ§+ y ‚Ñ§* a') ‚Ñ§* a'                 ‚àé

_*_ : ‚Ñö‚Çô ‚Üí ‚Ñö‚Çô ‚Üí ‚Ñö‚Çô
(x , a) * (y , b) = (x ‚Ñ§* y) , (pred (succ a ‚Ñï* succ b))

infixl 33 _+_
infixl 34 _*_

‚Ñö‚Çô*-comm : (p q : ‚Ñö‚Çô) ‚Üí p * q ‚â° q * p
‚Ñö‚Çô*-comm (x , a) (y , b) = ap‚ÇÇ _,_ I II
 where
  I : x ‚Ñ§* y ‚â° y ‚Ñ§* x
  I = ‚Ñ§*-comm x y

  II : pred (succ a ‚Ñï* succ b) ‚â° pred (succ b ‚Ñï* succ a)
  II = ap pred (mult-commutativity (succ a) (succ b))

‚Ñö‚Çô*-assoc : (p q r : ‚Ñö‚Çô) ‚Üí (p * q) * r ‚â° p * (q * r)
‚Ñö‚Çô*-assoc (x , a) (y , b) (z , c) = ap‚ÇÇ _,_ I II
 where
  I : x ‚Ñ§* y ‚Ñ§* z ‚â° x ‚Ñ§* (y ‚Ñ§* z)
  I = ‚Ñ§*-assoc x y z ‚Åª¬π

  a' b' c' : ‚Ñï
  a' = succ a
  b' = succ b
  c' = succ c

  II : pred (succ (pred (a' ‚Ñï* b')) ‚Ñï* c') ‚â° pred (a' ‚Ñï* succ (pred (b' ‚Ñï* c')))
  II = pred (succ (pred (a' ‚Ñï* b')) ‚Ñï* c') ‚â°‚ü® ap (Œª - ‚Üí pred (- ‚Ñï* c')) (succ-pred-multiplication a b ‚Åª¬π) ‚ü©
       pred ((a' ‚Ñï* b') ‚Ñï* c') ‚â°‚ü® ap pred (mult-associativity a' b' c') ‚ü©
       pred (a' ‚Ñï* (b' ‚Ñï* c')) ‚â°‚ü® ap (Œª - ‚Üí pred (a' ‚Ñï* -)) (succ-pred-multiplication b c) ‚ü©
       pred (a' ‚Ñï* succ (pred (b' ‚Ñï* c'))) ‚àé

‚Ñö‚Çô-zero-right-neutral : (q : ‚Ñö‚Çô) ‚Üí q + (pos 0 , 0) ‚â° q
‚Ñö‚Çô-zero-right-neutral (x , a) = (x , a) + (pos 0 , 0)                ‚â°‚ü® refl ‚ü©
                                 x ‚Ñ§+ (pos 0 ‚Ñ§* pos (succ a)) , a    ‚â°‚ü® ap (Œª - ‚Üí x ‚Ñ§+ - , a) (‚Ñ§*-comm (pos 0) (pos (succ a))) ‚ü©
                                 x ‚Ñ§+ pos 0 , a                      ‚â°‚ü® ap (Œª - ‚Üí - , a) refl ‚ü©
                                 x , a ‚àé

‚Ñö‚Çô-mult-left-id : (q : ‚Ñö‚Çô) ‚Üí (pos 1 , 0) * q ‚â° q
‚Ñö‚Çô-mult-left-id (x , a) = (pos 1 , 0) * (x , a)             ‚â°‚ü® refl ‚ü©
                          pos 1 ‚Ñ§* x , pred (1 ‚Ñï* succ a) ‚â°‚ü® ap‚ÇÇ (Œª l r ‚Üí l , pred r) (‚Ñ§-mult-left-id x) (mult-left-id (succ a)) ‚ü©
                          x , pred (succ a)                ‚â°‚ü® ap (Œª - ‚Üí x , -) refl ‚ü©
                          x , a                             ‚àé

_‚Ñö‚Çô‚Ñï*_ : (p : ‚Ñö‚Çô) ‚Üí (x : ‚Ñï) ‚Üí ‚Ñö‚Çô
p ‚Ñö‚Çô‚Ñï* x = p * ((pos (succ x)) , x)

_‚Ñö‚Çô‚âà_ : (p q : ‚Ñö‚Çô) ‚Üí ùì§‚ÇÄ Ãá
(x , a) ‚Ñö‚Çô‚âà (y , b) = x ‚Ñ§* pos (succ b) ‚â° (y ‚Ñ§* pos (succ a))

open NaturalsDivision
open IntegersHCF

equiv-with-lowest-terms-is-equal : (a b : ‚Ñö‚Çô) -> a ‚Ñö‚Çô‚âà b ‚Üí is-in-lowest-terms a ‚Üí is-in-lowest-terms b ‚Üí a ‚â° b
equiv-with-lowest-terms-is-equal (x , a) (y , b) e ((m‚ÇÅ , m‚ÇÇ) , n) ((m‚ÇÅ' , m‚ÇÇ') , n') = to-√ó-‚â° xyequal abequal
 where
  e' : (x ‚Ñ§* pos (succ b)) ‚â° (y ‚Ñ§* pos (succ a))
  e' = e

  Œ≥ : abs (x ‚Ñ§* pos (succ b)) ‚â° abs (y ‚Ñ§* pos (succ a))
  Œ≥ = ap abs e'

  Œ¥ : abs x ‚Ñï* succ b ‚â° abs y ‚Ñï* succ a
  Œ¥ = abs x ‚Ñï* abs (pos (succ b)) ‚â°‚ü® abs-over-mult x (pos (succ b))  ‚Åª¬π ‚ü©
      abs (x ‚Ñ§* pos (succ b))     ‚â°‚ü® Œ≥ ‚ü©
      abs (y ‚Ñ§* pos (succ a))     ‚â°‚ü® abs-over-mult y (pos (succ a)) ‚ü©
      abs y ‚Ñï* abs (pos (succ a)) ‚àé
 
  s : (succ a) ‚à£ ((abs x) ‚Ñï* (succ b))
  s = (abs y) , I
   where
    I : succ a ‚Ñï* abs y ‚â° abs x ‚Ñï* succ b
    I = succ a ‚Ñï* abs y ‚â°‚ü® mult-commutativity (succ a) (abs y) ‚ü©
        abs y ‚Ñï* succ a ‚â°‚ü® Œ¥ ‚Åª¬π ‚ü©
        abs x ‚Ñï* succ b ‚àé

  s' : (succ b) ‚à£ (abs y) ‚Ñï* (succ a)
  s' = (abs x) , I
   where
    I : succ b ‚Ñï* abs x ‚â° abs y ‚Ñï* succ a
    I = succ b ‚Ñï* abs x ‚â°‚ü® mult-commutativity (succ b) (abs x) ‚ü©
        abs x ‚Ñï* succ b ‚â°‚ü® Œ¥ ‚ü©
        abs y ‚Ñï* succ a ‚àé

  a-divides-b : (succ a) ‚à£ (succ b)
  a-divides-b = coprime-with-division (succ a) (abs x) (succ b) ((m‚ÇÇ , m‚ÇÅ) , Œª f' (h‚ÇÅ , h‚ÇÇ) ‚Üí n f' (h‚ÇÇ , h‚ÇÅ)) s

  b-divides-a : (succ b) ‚à£ (succ a)
  b-divides-a = coprime-with-division (succ b) (abs y) (succ a) ((m‚ÇÇ' , m‚ÇÅ') , Œª f (h‚ÇÅ , h‚ÇÇ) ‚Üí n' f (h‚ÇÇ , h‚ÇÅ)) s'

  abequal : a ‚â° b
  abequal = succ-lc (‚à£-anti (succ a) (succ b) a-divides-b b-divides-a)

  e'' : x ‚Ñ§* pos (succ a) ‚â° y ‚Ñ§* pos (succ a)
  e'' = ap (x ‚Ñ§*_) (ap pos (ap succ abequal)) ‚àô e

  xyequal : x ‚â° y
  xyequal = ‚Ñ§-mult-right-cancellable x y (pos (succ a)) (Œª z ‚Üí z) e''

‚âà-refl : (q : ‚Ñö‚Çô) ‚Üí q ‚Ñö‚Çô‚âà q
‚âà-refl q = refl

‚âà-sym : (p q : ‚Ñö‚Çô) ‚Üí p ‚Ñö‚Çô‚âà q ‚Üí q ‚Ñö‚Çô‚âà p
‚âà-sym p q e = e ‚Åª¬π

‚âà-trans : (p q r : ‚Ñö‚Çô) ‚Üí p ‚Ñö‚Çô‚âà q ‚Üí q ‚Ñö‚Çô‚âà r ‚Üí p ‚Ñö‚Çô‚âà r
‚âà-trans (x , a) (y , b) (z , c) e‚ÇÅ e‚ÇÇ = ‚Ñ§-mult-left-cancellable (x ‚Ñ§* pos (succ c)) (z ‚Ñ§* pos (succ a)) (pos (succ b)) (pos-succ-not-zero b) III
 where
  I : x ‚Ñ§* pos (succ b) ‚Ñ§* pos (succ c) ‚â° y ‚Ñ§* pos (succ a) ‚Ñ§* pos (succ c)
  I = ap (_‚Ñ§* pos (succ c)) e‚ÇÅ

  II : pos (succ a) ‚Ñ§* (y ‚Ñ§* pos (succ c)) ‚â° pos (succ a) ‚Ñ§* (z ‚Ñ§* pos (succ b))
  II = ap (pos (succ a) ‚Ñ§*_) e‚ÇÇ

  III : pos (succ b) ‚Ñ§* (x ‚Ñ§* pos (succ c)) ‚â° pos (succ b) ‚Ñ§* (z ‚Ñ§* pos (succ a))
  III = pos (succ b) ‚Ñ§* (x ‚Ñ§* pos (succ c)) ‚â°‚ü® ‚Ñ§*-assoc (pos (succ b)) x (pos (succ c)) ‚ü©
        pos (succ b) ‚Ñ§* x ‚Ñ§* pos (succ c) ‚â°‚ü® ap (_‚Ñ§* pos (succ c)) (‚Ñ§*-comm (pos (succ b)) x) ‚ü©
        x ‚Ñ§* pos (succ b) ‚Ñ§* pos (succ c) ‚â°‚ü® I ‚ü©
        y ‚Ñ§* pos (succ a) ‚Ñ§* pos (succ c) ‚â°‚ü® ap (_‚Ñ§* pos (succ c)) (‚Ñ§*-comm y (pos (succ a))) ‚ü©
        pos (succ a) ‚Ñ§* y ‚Ñ§* pos (succ c) ‚â°‚ü® ‚Ñ§*-assoc (pos (succ a)) y (pos (succ c))  ‚Åª¬π ‚ü©
        pos (succ a) ‚Ñ§* (y ‚Ñ§* pos (succ c)) ‚â°‚ü® II ‚ü©
        pos (succ a) ‚Ñ§* (z ‚Ñ§* pos (succ b)) ‚â°‚ü® ‚Ñ§-mult-rearrangement' z (pos (succ b)) (pos (succ a)) ‚ü©
        pos (succ b) ‚Ñ§* (z ‚Ñ§* pos (succ a)) ‚àé

‚âà-addition : (p q r : ‚Ñö‚Çô) ‚Üí p ‚Ñö‚Çô‚âà q ‚Üí (p + r) ‚Ñö‚Çô‚âà (q + r)
‚âà-addition (x , a) (y , b) (z , c) e‚ÇÅ = III
 where
  I :  pos (succ (pred (succ b ‚Ñï* succ c))) ‚â° pos (succ b) ‚Ñ§* pos (succ c)
  I = denom-setup b c

  II : pos (succ a) ‚Ñ§* pos (succ c) ‚â° pos (succ (pred (succ a ‚Ñï* succ c)))
  II = denom-setup a c ‚Åª¬π

  a' b' c' : ‚Ñ§
  a' = pos (succ a)
  b' = pos (succ b)
  c' = pos (succ c)

  III : ((x , a) + (z , c)) ‚Ñö‚Çô‚âà ((y , b) + (z , c))
  III = (x ‚Ñ§* c' ‚Ñ§+ (z ‚Ñ§* a')) ‚Ñ§* pos (succ (pred (succ b ‚Ñï* succ c))) ‚â°‚ü® ap (Œª - ‚Üí (x ‚Ñ§* c' ‚Ñ§+ (z ‚Ñ§* a')) ‚Ñ§* -) I ‚ü©
        (x ‚Ñ§* c' ‚Ñ§+ z ‚Ñ§* a') ‚Ñ§* (b' ‚Ñ§* c')                             ‚â°‚ü® distributivity-mult-over-‚Ñ§ (x ‚Ñ§* c') (z ‚Ñ§* a') (b' ‚Ñ§* c') ‚ü©
         x ‚Ñ§* c' ‚Ñ§* (b' ‚Ñ§* c') ‚Ñ§+ z ‚Ñ§* a' ‚Ñ§* (b' ‚Ñ§* c')                ‚â°‚ü® ap‚ÇÇ _‚Ñ§+_ (‚Ñ§-mult-rearrangement x (c') (b' ‚Ñ§* c')) (‚Ñ§-mult-rearrangement z (a') (b' ‚Ñ§* c'))  ‚ü©
         x ‚Ñ§* (b' ‚Ñ§* c') ‚Ñ§* c' ‚Ñ§+ z ‚Ñ§* (b' ‚Ñ§* c') ‚Ñ§* a'                ‚â°‚ü® ap‚ÇÇ _‚Ñ§+_ (ap (_‚Ñ§* c') (‚Ñ§*-assoc x b' c')) (ap (_‚Ñ§* a') (‚Ñ§*-assoc z b' c')) ‚ü©
         x ‚Ñ§* b' ‚Ñ§* c' ‚Ñ§* c' ‚Ñ§+ z ‚Ñ§* b' ‚Ñ§* c' ‚Ñ§* a'                    ‚â°‚ü® ap‚ÇÇ _‚Ñ§+_ (ap (Œª - ‚Üí -  ‚Ñ§* c' ‚Ñ§* c') e‚ÇÅ) (‚Ñ§*-assoc (z ‚Ñ§* b') c' a' ‚Åª¬π) ‚ü©
         y ‚Ñ§* a' ‚Ñ§* c' ‚Ñ§* c' ‚Ñ§+ z ‚Ñ§* b' ‚Ñ§* (c' ‚Ñ§* a')                  ‚â°‚ü® ap‚ÇÇ _‚Ñ§+_ (ap (_‚Ñ§* c') (‚Ñ§-mult-rearrangement y a' c')) (ap (Œª - ‚Üí z ‚Ñ§* b' ‚Ñ§* -) (‚Ñ§*-comm c' a')) ‚ü©
         y ‚Ñ§* c' ‚Ñ§* a' ‚Ñ§* c' ‚Ñ§+ z ‚Ñ§* b' ‚Ñ§* (a' ‚Ñ§* c')                  ‚â°‚ü® ap (_‚Ñ§+ z ‚Ñ§* b' ‚Ñ§* (a' ‚Ñ§* c')) (‚Ñ§*-assoc (y ‚Ñ§* c') a' c' ‚Åª¬π) ‚ü©
         y ‚Ñ§* c' ‚Ñ§* (a' ‚Ñ§* c') ‚Ñ§+ z ‚Ñ§* b' ‚Ñ§* (a' ‚Ñ§* c')                ‚â°‚ü® distributivity-mult-over-‚Ñ§ (y ‚Ñ§* c') (z ‚Ñ§* b') (a' ‚Ñ§* c') ‚Åª¬π ‚ü©
        (y ‚Ñ§* c' ‚Ñ§+ z ‚Ñ§* b') ‚Ñ§* (a' ‚Ñ§* c')                             ‚â°‚ü® ap (Œª - ‚Üí (y ‚Ñ§* c' ‚Ñ§+ (z ‚Ñ§* b')) ‚Ñ§* -) II ‚ü©
        (y ‚Ñ§* c' ‚Ñ§+ (z ‚Ñ§* b')) ‚Ñ§* pos (succ (pred (succ a ‚Ñï* succ c))) ‚àé

‚âà-addition-comm : (p q : ‚Ñö‚Çô) ‚Üí (p + q) ‚Ñö‚Çô‚âà (q + p)
‚âà-addition-comm (x , a) (y , b) = I
 where
  I : ((x , a) + (y , b)) ‚Ñö‚Çô‚âà ((y , b) + (x , a))
  I = (x ‚Ñ§* pos (succ b) ‚Ñ§+ y ‚Ñ§* pos (succ a)) ‚Ñ§* pos (succ (pred (succ b ‚Ñï* succ a))) ‚â°‚ü® ap‚ÇÇ _‚Ñ§*_ (‚Ñ§+-comm (x ‚Ñ§* pos (succ b)) (y ‚Ñ§* pos (succ a))) (ap (Œª - ‚Üí pos (succ (pred -))) (mult-commutativity (succ b) (succ a))) ‚ü©
      (y ‚Ñ§* pos (succ a) ‚Ñ§+ x ‚Ñ§* pos (succ b)) ‚Ñ§* pos (succ (pred (succ a ‚Ñï* succ b))) ‚àé

‚âà-over-* : (p q r : ‚Ñö‚Çô) ‚Üí p ‚Ñö‚Çô‚âà q ‚Üí (p * r) ‚Ñö‚Çô‚âà (q * r)
‚âà-over-* (x , a) (y , b) (z , c) e = I
 where
  a' b' c' : ‚Ñ§
  a' = pos (succ a)
  b' = pos (succ b)
  c' = pos (succ c)

  I : x ‚Ñ§* z ‚Ñ§* pos (succ (pred (succ b ‚Ñï* succ c))) ‚â° y ‚Ñ§* z ‚Ñ§* pos (succ (pred (succ a ‚Ñï* succ c)))
  I = x ‚Ñ§* z ‚Ñ§* pos (succ (pred (succ b ‚Ñï* succ c))) ‚â°‚ü® ap (Œª - ‚Üí x ‚Ñ§* z ‚Ñ§* -) (denom-setup b c) ‚ü©
      x ‚Ñ§* z ‚Ñ§* (b' ‚Ñ§* c')                           ‚â°‚ü® ‚Ñ§*-assoc (x ‚Ñ§* z) b' c' ‚ü©
      x ‚Ñ§* z ‚Ñ§* b' ‚Ñ§* c'                             ‚â°‚ü® ap (_‚Ñ§* c') (‚Ñ§-mult-rearrangement x z b') ‚ü©
      x ‚Ñ§* b' ‚Ñ§* z ‚Ñ§* c'                             ‚â°‚ü® ap (Œª - ‚Üí - ‚Ñ§* z ‚Ñ§* c') e ‚ü©
      y ‚Ñ§* a' ‚Ñ§* z ‚Ñ§* c'                             ‚â°‚ü® ap (_‚Ñ§* c') (‚Ñ§*-assoc y a' z ‚Åª¬π ) ‚ü©
      y ‚Ñ§* (a' ‚Ñ§* z) ‚Ñ§* c'                           ‚â°‚ü® ap (Œª - ‚Üí y ‚Ñ§* - ‚Ñ§* c') (‚Ñ§*-comm a' z) ‚ü©
      y ‚Ñ§* (z ‚Ñ§* a') ‚Ñ§* c'                           ‚â°‚ü® ap (_‚Ñ§* c') (‚Ñ§*-assoc y z a') ‚ü©
      y ‚Ñ§* z ‚Ñ§* a' ‚Ñ§* c'                             ‚â°‚ü® ‚Ñ§*-assoc (y ‚Ñ§* z) a' c' ‚Åª¬π ‚ü© 
      y ‚Ñ§* z ‚Ñ§* (a' ‚Ñ§* c')                           ‚â°‚ü® ap (Œª - ‚Üí (y ‚Ñ§* z ‚Ñ§* -)) (denom-setup a c ‚Åª¬π) ‚ü©
      y ‚Ñ§* z ‚Ñ§* pos (succ (pred (succ a ‚Ñï* succ c))) ‚àé

half-‚Ñö‚Çô : ‚Ñö‚Çô ‚Üí ‚Ñö‚Çô
half-‚Ñö‚Çô (x , a) = x , (succ (2 ‚Ñï* a))

‚Ñö-dist-lemma : (p q r : ‚Ñö‚Çô) ‚Üí p * (q + r) ‚Ñö‚Çô‚âà (p * q + p * r)
‚Ñö-dist-lemma (x , a) (y , b) (z , c) = I
 where
  a' b' c' : ‚Ñï
  a' = succ a
  b' = succ b
  c' = succ c

  a'' b'' c'' : ‚Ñ§
  a'' = pos a'
  b'' = pos b'
  c'' = pos c'

  I-lemma : (x y p q : ‚Ñ§) ‚Üí x ‚Ñ§* y ‚Ñ§* (p ‚Ñ§* q) ‚â° x ‚Ñ§* p ‚Ñ§* (y ‚Ñ§* q)
  I-lemma x y p q = x ‚Ñ§* y ‚Ñ§* (p ‚Ñ§* q) ‚â°‚ü® ‚Ñ§*-assoc (x ‚Ñ§* y) p q ‚ü©
                    x ‚Ñ§* y ‚Ñ§* p ‚Ñ§* q   ‚â°‚ü® ap (_‚Ñ§* q) (‚Ñ§*-assoc x y p ‚Åª¬π) ‚ü©
                    x ‚Ñ§* (y ‚Ñ§* p) ‚Ñ§* q ‚â°‚ü® ap (Œª - ‚Üí x ‚Ñ§* - ‚Ñ§* q) (‚Ñ§*-comm y p) ‚ü©
                    x ‚Ñ§* (p ‚Ñ§* y) ‚Ñ§* q ‚â°‚ü® ap (_‚Ñ§* q) (‚Ñ§*-assoc x p y) ‚ü©
                    x ‚Ñ§* p ‚Ñ§* y ‚Ñ§* q   ‚â°‚ü® ‚Ñ§*-assoc (x ‚Ñ§* p) y q ‚Åª¬π ‚ü©
                    x ‚Ñ§* p ‚Ñ§* (y ‚Ñ§* q) ‚àé

  I : _ ‚â° _
  I = 
      x ‚Ñ§* (  y ‚Ñ§* c'' ‚Ñ§+ (z ‚Ñ§* b'')  )                                                        ‚Ñ§*      pos (succ (pred    (succ (pred (a' ‚Ñï* b'))   ‚Ñï*   (succ (pred (a' ‚Ñï* c'))))))            ‚â°‚ü® i ‚ü©
      x ‚Ñ§* (  y ‚Ñ§* c'' ‚Ñ§+ (z ‚Ñ§* b'')  )                                                        ‚Ñ§*  (   pos (succ (pred    (a' ‚Ñï* b')))              ‚Ñ§*    pos (succ (pred (a' ‚Ñï* c')))   )      ‚â°‚ü® ii ‚ü©
      x ‚Ñ§* (  y ‚Ñ§* c'' ‚Ñ§+ (z ‚Ñ§* b'')  )                                                        ‚Ñ§*  (   pos (a' ‚Ñï* b')                               ‚Ñ§*    pos (a' ‚Ñï* c')                 )      ‚â°‚ü® iii ‚ü©
      x ‚Ñ§* (  y ‚Ñ§* c'' ‚Ñ§+ (z ‚Ñ§* b'')  )                                                        ‚Ñ§*  (   (    a'' ‚Ñ§* b'' )  ‚Ñ§*   (a'' ‚Ñ§* c'') )                                                   ‚â°‚ü® iv ‚ü©
      x ‚Ñ§* (  y ‚Ñ§* c'' ‚Ñ§+ (z ‚Ñ§* b'')  )                                                        ‚Ñ§*  (   a''  ‚Ñ§*                      ( b'' ‚Ñ§*   (a'' ‚Ñ§* c'')  )       )                           ‚â°‚ü® v ‚ü©
      x ‚Ñ§* (  y ‚Ñ§* c'' ‚Ñ§+ (z ‚Ñ§* b'') ) ‚Ñ§* a''                                                  ‚Ñ§*  (                                         ( b'' ‚Ñ§*   (a'' ‚Ñ§* c'')  )       )        ‚â°‚ü® vi ‚ü©
      x ‚Ñ§* a'' ‚Ñ§* (  y ‚Ñ§* c'' ‚Ñ§+ (z ‚Ñ§* b'') )                                                  ‚Ñ§*  (                                         ( a'' ‚Ñ§*   (b'' ‚Ñ§* c'')  )       )        ‚â°‚ü® vii ‚ü©
     (x ‚Ñ§* a'' ‚Ñ§* (y ‚Ñ§* c'')    ‚Ñ§+    x ‚Ñ§* a'' ‚Ñ§* (z ‚Ñ§* b''))                                  ‚Ñ§*  (               ( a'' ‚Ñ§*   (pos (b' ‚Ñï* c'))        )       )                              ‚â°‚ü® viii ‚ü©
     (x ‚Ñ§* y ‚Ñ§* (a'' ‚Ñ§* c'')       ‚Ñ§+  x ‚Ñ§* z ‚Ñ§* (a'' ‚Ñ§* b''))                                 ‚Ñ§*  (               ( a'' ‚Ñ§*   (pos (b' ‚Ñï* c'))        )       )                              ‚â°‚ü® ix ‚ü©
     (x ‚Ñ§* y ‚Ñ§* pos (succ (pred (a' ‚Ñï* c'))) ‚Ñ§+ (x ‚Ñ§* z ‚Ñ§* pos (succ (pred (a' ‚Ñï* b')))))      ‚Ñ§*      (       ( a'' ‚Ñ§*   (pos (b' ‚Ñï* c'))        )    )                                     ‚â°‚ü® xi ‚ü©
     (x ‚Ñ§* y ‚Ñ§* pos (succ (pred (a' ‚Ñï* c'))) ‚Ñ§+ (x ‚Ñ§* z ‚Ñ§* pos (succ (pred (a' ‚Ñï* b')))))      ‚Ñ§*      pos (a' ‚Ñï* (b' ‚Ñï* c'))                                                                   ‚â°‚ü® xii ‚ü©
     (x ‚Ñ§* y ‚Ñ§* pos (succ (pred (a' ‚Ñï* c'))) ‚Ñ§+ (x ‚Ñ§* z ‚Ñ§* pos (succ (pred (a' ‚Ñï* b')))))      ‚Ñ§*      pos (a' ‚Ñï* succ (pred (b' ‚Ñï* c')))                                                       ‚â°‚ü® xiii ‚ü©
     (x ‚Ñ§* y ‚Ñ§* pos (succ (pred (a' ‚Ñï* c'))) ‚Ñ§+ (x ‚Ñ§* z ‚Ñ§* pos (succ (pred (a' ‚Ñï* b')))))      ‚Ñ§*      (pos (succ (pred (a' ‚Ñï* succ (pred (b' ‚Ñï* c')))))) ‚àé
   where
    i  = ap (Œª Œ≤ ‚Üí x ‚Ñ§* (y ‚Ñ§* c'' ‚Ñ§+ (z ‚Ñ§* b'')) ‚Ñ§* Œ≤ ) (denom-setup (pred (a' ‚Ñï* b')) (pred (a' ‚Ñï* c')))
    ii = ap‚ÇÇ (Œª Œ± Œ≤ ‚Üí x ‚Ñ§* (y ‚Ñ§* c'' ‚Ñ§+ (z ‚Ñ§* b'')) ‚Ñ§* (pos Œ± ‚Ñ§* pos Œ≤)) (succ-pred-multiplication a b ‚Åª¬π) (succ-pred-multiplication a c ‚Åª¬π)
    iii = ap‚ÇÇ (Œª Œ± Œ≤ ‚Üí x ‚Ñ§* (y ‚Ñ§* c'' ‚Ñ§+ (z ‚Ñ§* b'')) ‚Ñ§* (Œ± ‚Ñ§* Œ≤) ) (pos-multiplication-equiv-to-‚Ñï a' b' ‚Åª¬π) (pos-multiplication-equiv-to-‚Ñï a' c' ‚Åª¬π)
    iv = ap (Œª Œ± ‚Üí x ‚Ñ§* (y ‚Ñ§* c'' ‚Ñ§+ (z ‚Ñ§* b'')) ‚Ñ§* Œ± ) (‚Ñ§*-assoc a'' b'' ( a'' ‚Ñ§* c'') ‚Åª¬π)
    v = ‚Ñ§*-assoc (x ‚Ñ§* (  y ‚Ñ§* c'' ‚Ñ§+ (z ‚Ñ§* b'')  )) a'' ( b'' ‚Ñ§*   (a'' ‚Ñ§* c''))
    vi = ap‚ÇÇ (Œª Œ± Œ≤ ‚Üí Œ± ‚Ñ§* Œ≤) (‚Ñ§-mult-rearrangement x ( y ‚Ñ§* c'' ‚Ñ§+ (z ‚Ñ§* b'')) a'') (‚Ñ§-mult-rearrangement''' b'' a'' c'')
    vii = ap‚ÇÇ (Œª Œ± Œ≤ ‚Üí Œ± ‚Ñ§* (a'' ‚Ñ§* Œ≤)) (distributivity-mult-over-‚Ñ§' (y ‚Ñ§* c'') (z ‚Ñ§* b'') (x ‚Ñ§* a'')) (pos-multiplication-equiv-to-‚Ñï b' c')
    viii = ap‚ÇÇ (Œª Œ± Œ≤ ‚Üí (Œ± ‚Ñ§+ Œ≤) ‚Ñ§* ((a'' ‚Ñ§* (pos (b' ‚Ñï* c'))))) (I-lemma x a'' y c'') (I-lemma x a'' z b'')
    ix = ap‚ÇÇ (Œª Œ± Œ≤ ‚Üí (x ‚Ñ§* y ‚Ñ§* Œ± ‚Ñ§+ x ‚Ñ§* z ‚Ñ§* Œ≤) ‚Ñ§* ((a'' ‚Ñ§* (pos (b' ‚Ñï* c'))))) (denom-setup a c ‚Åª¬π) (denom-setup a b ‚Åª¬π)
    xi = ap (Œª Œ± ‚Üí (x ‚Ñ§* y ‚Ñ§* pos (succ (pred (a' ‚Ñï* c'))) ‚Ñ§+ (x ‚Ñ§* z ‚Ñ§* pos (succ (pred (a' ‚Ñï* b'))))) ‚Ñ§* Œ±) (pos-multiplication-equiv-to-‚Ñï a' (b' ‚Ñï* c'))
    xii = ap  (Œª Œ± ‚Üí (x ‚Ñ§* y ‚Ñ§* pos (succ (pred (a' ‚Ñï* c'))) ‚Ñ§+ (x ‚Ñ§* z ‚Ñ§* pos (succ (pred (a' ‚Ñï* b'))))) ‚Ñ§* (pos (a' ‚Ñï* Œ±))) (succ-pred-multiplication b c)
    xiii = ap (Œª Œ± ‚Üí (x ‚Ñ§* y ‚Ñ§* pos (succ (pred (a' ‚Ñï* c'))) ‚Ñ§+ (x ‚Ñ§* z ‚Ñ§* pos (succ (pred (a' ‚Ñï* b'))))) ‚Ñ§* pos Œ±) (succ-pred-multiplication a (pred (b' ‚Ñï* c')))

‚Ñö‚Çô-addition-preserves-order : (p q r : ‚Ñö‚Çô) ‚Üí p < q ‚Üí (p + r) < (q + r)
‚Ñö‚Çô-addition-preserves-order (x , a) (y , b) (z , c) (n , g , l) = (c' ‚Ñ§* c' ‚Ñ§* n) , Œ¥ , Œ≥
 where
  a' b' c' : ‚Ñ§
  a' = pos (succ a)
  b' = pos (succ b)
  c' = pos (succ c)
  
  Œ¥ : greater-than-zero (c' ‚Ñ§* c' ‚Ñ§* n)
  Œ¥ = greater-than-zero-mult-trans (c' ‚Ñ§* c') n Œµ g
   where
    Œµ : greater-than-zero (c' ‚Ñ§* c')
    Œµ = greater-than-zero-mult-trans (c') (c') (pos-succ-greater-than-zero c) (pos-succ-greater-than-zero c)
  
  Œ≥ : (x ‚Ñ§* c' ‚Ñ§+ z ‚Ñ§* a') ‚Ñ§* pos (succ (pred (succ b ‚Ñï* succ c))) ‚Ñ§+ c' ‚Ñ§* c' ‚Ñ§* n ‚â° (y ‚Ñ§* c' ‚Ñ§+ z ‚Ñ§* b') ‚Ñ§* pos (succ (pred (succ a ‚Ñï* succ c)))
  Œ≥ = (x ‚Ñ§* c' ‚Ñ§+ z ‚Ñ§* a') ‚Ñ§* pos (succ (pred (succ b ‚Ñï* succ c))) ‚Ñ§+ c' ‚Ñ§* c' ‚Ñ§* n ‚â°‚ü® ap (Œª - ‚Üí ((x ‚Ñ§* c' ‚Ñ§+ z ‚Ñ§* a') ‚Ñ§* -) ‚Ñ§+  c' ‚Ñ§* c' ‚Ñ§* n) (denom-setup b c ) ‚ü©
      (x ‚Ñ§* c' ‚Ñ§+ z ‚Ñ§* a') ‚Ñ§* (b' ‚Ñ§* c') ‚Ñ§+ c' ‚Ñ§* c' ‚Ñ§* n                           ‚â°‚ü® ap (Œª - ‚Üí - ‚Ñ§+ c' ‚Ñ§* c' ‚Ñ§* n) (distributivity-mult-over-‚Ñ§ (x ‚Ñ§* c') (z ‚Ñ§* a') (b' ‚Ñ§* c'))  ‚ü©
      x ‚Ñ§* c' ‚Ñ§* (b' ‚Ñ§* c') ‚Ñ§+ z ‚Ñ§* a' ‚Ñ§* (b' ‚Ñ§* c') ‚Ñ§+ c' ‚Ñ§* c' ‚Ñ§* n               ‚â°‚ü® ‚Ñ§+-assoc ( x ‚Ñ§* c' ‚Ñ§* (b' ‚Ñ§* c')) (z ‚Ñ§* a' ‚Ñ§* (b' ‚Ñ§* c')) (c' ‚Ñ§* c' ‚Ñ§* n ) ‚ü©
      x ‚Ñ§* c' ‚Ñ§* (b' ‚Ñ§* c') ‚Ñ§+ (z ‚Ñ§* a' ‚Ñ§* (b' ‚Ñ§* c') ‚Ñ§+ c' ‚Ñ§* c' ‚Ñ§* n)             ‚â°‚ü® ap (x ‚Ñ§* c' ‚Ñ§* (b' ‚Ñ§* c') ‚Ñ§+_) (‚Ñ§+-comm (z ‚Ñ§* a' ‚Ñ§* (b' ‚Ñ§* c')) ( c' ‚Ñ§* c' ‚Ñ§* n)) ‚ü©
      x ‚Ñ§* c' ‚Ñ§* (b' ‚Ñ§* c') ‚Ñ§+ (c' ‚Ñ§* c' ‚Ñ§* n ‚Ñ§+ z ‚Ñ§* a' ‚Ñ§* (b' ‚Ñ§* c'))             ‚â°‚ü® ‚Ñ§+-assoc ( x ‚Ñ§* c' ‚Ñ§* (b' ‚Ñ§* c')) (c' ‚Ñ§* c' ‚Ñ§* n) (z ‚Ñ§* a' ‚Ñ§* (b' ‚Ñ§* c')) ‚Åª¬π ‚ü©
      x ‚Ñ§* c' ‚Ñ§* (b' ‚Ñ§* c') ‚Ñ§+ c' ‚Ñ§* c' ‚Ñ§* n ‚Ñ§+ z ‚Ñ§* a' ‚Ñ§* (b' ‚Ñ§* c')               ‚â°‚ü® ap‚ÇÇ (Œª Œ± Œ≤ ‚Üí Œ± ‚Ñ§+ Œ≤ ‚Ñ§+ z ‚Ñ§* a' ‚Ñ§* (b' ‚Ñ§* c')) (‚Ñ§-mult-rearrangement x c' (b' ‚Ñ§* c')) (‚Ñ§*-comm (c' ‚Ñ§* c') n) ‚ü©
      x ‚Ñ§* (b' ‚Ñ§* c') ‚Ñ§* c' ‚Ñ§+ n ‚Ñ§* (c' ‚Ñ§* c') ‚Ñ§+ z ‚Ñ§* a' ‚Ñ§* (b' ‚Ñ§* c')             ‚â°‚ü® ap (Œª - ‚Üí - ‚Ñ§* c'  ‚Ñ§+ n ‚Ñ§* (c' ‚Ñ§* c') ‚Ñ§+ z ‚Ñ§* a' ‚Ñ§* (b' ‚Ñ§* c')) (‚Ñ§*-assoc x b' c') ‚ü©
      x ‚Ñ§* b' ‚Ñ§* c' ‚Ñ§* c' ‚Ñ§+ n ‚Ñ§* (c' ‚Ñ§* c') ‚Ñ§+ z ‚Ñ§* a' ‚Ñ§* (b' ‚Ñ§* c')               ‚â°‚ü® ap (Œª - ‚Üí - ‚Ñ§+ n ‚Ñ§* (c' ‚Ñ§* c') ‚Ñ§+ z ‚Ñ§* a' ‚Ñ§* (b' ‚Ñ§* c')) (‚Ñ§*-assoc (x ‚Ñ§* b') c' c' ‚Åª¬π) ‚ü©
      x ‚Ñ§* b' ‚Ñ§* (c' ‚Ñ§* c') ‚Ñ§+ n ‚Ñ§* (c' ‚Ñ§* c') ‚Ñ§+ z ‚Ñ§* a' ‚Ñ§* (b' ‚Ñ§* c')             ‚â°‚ü® ap (Œª - ‚Üí - ‚Ñ§+ z ‚Ñ§* a' ‚Ñ§* (b' ‚Ñ§* c')) (distributivity-mult-over-‚Ñ§ ( x ‚Ñ§* b') n (c' ‚Ñ§* c') ‚Åª¬π) ‚ü©
      (x ‚Ñ§* b' ‚Ñ§+ n) ‚Ñ§* (c' ‚Ñ§* c') ‚Ñ§+ z ‚Ñ§* a' ‚Ñ§* (b' ‚Ñ§* c')                         ‚â°‚ü® ap (Œª - ‚Üí - ‚Ñ§+ z ‚Ñ§* a' ‚Ñ§* (b' ‚Ñ§* c') ) (‚Ñ§*-assoc ((x ‚Ñ§* b' ‚Ñ§+ n)) c' c') ‚ü©
      (x ‚Ñ§* b' ‚Ñ§+ n) ‚Ñ§* c' ‚Ñ§* c' ‚Ñ§+ z ‚Ñ§* a' ‚Ñ§* (b' ‚Ñ§* c')                           ‚â°‚ü® ap (Œª - ‚Üí - ‚Ñ§* c' ‚Ñ§* c' ‚Ñ§+ z ‚Ñ§* a' ‚Ñ§* (b' ‚Ñ§* c')) l ‚ü©
      y ‚Ñ§* a' ‚Ñ§* c' ‚Ñ§* c' ‚Ñ§+ z ‚Ñ§* a' ‚Ñ§* (b' ‚Ñ§* c')                                  ‚â°‚ü® ap‚ÇÇ (Œª Œ± Œ≤ ‚Üí Œ± ‚Ñ§* c' ‚Ñ§+ Œ≤) (‚Ñ§-mult-rearrangement y a' c') (‚Ñ§*-assoc z a' (b' ‚Ñ§* c') ‚Åª¬π) ‚ü©
      y ‚Ñ§* c' ‚Ñ§* a' ‚Ñ§* c' ‚Ñ§+ z ‚Ñ§* (a' ‚Ñ§* (b' ‚Ñ§* c'))                                ‚â°‚ü® ap‚ÇÇ (Œª Œ± Œ≤ ‚Üí Œ± ‚Ñ§+ z ‚Ñ§* Œ≤) (‚Ñ§*-assoc (y ‚Ñ§* c') a' c' ‚Åª¬π) (‚Ñ§-mult-rearrangement''' a' b' c') ‚ü©
      y ‚Ñ§* c' ‚Ñ§* (a' ‚Ñ§* c') ‚Ñ§+ z ‚Ñ§* (b' ‚Ñ§* (a' ‚Ñ§* c'))                              ‚â°‚ü® ap (Œª - ‚Üí y ‚Ñ§* c' ‚Ñ§* (a' ‚Ñ§* c') ‚Ñ§+ -) (‚Ñ§*-assoc z b' (a' ‚Ñ§* c')) ‚ü©
      y ‚Ñ§* c' ‚Ñ§* (a' ‚Ñ§* c') ‚Ñ§+ z ‚Ñ§* b' ‚Ñ§* (a' ‚Ñ§* c')                                ‚â°‚ü® distributivity-mult-over-‚Ñ§ (y ‚Ñ§* c') (z ‚Ñ§* b') (a' ‚Ñ§* c') ‚Åª¬π ‚ü©
      (y ‚Ñ§* c' ‚Ñ§+ z ‚Ñ§* b') ‚Ñ§* (a' ‚Ñ§* c')                                            ‚â°‚ü® ap (Œª - ‚Üí (y ‚Ñ§* c' ‚Ñ§+ z ‚Ñ§* b') ‚Ñ§* -) (denom-setup a c ‚Åª¬π) ‚ü©
      (y ‚Ñ§* c' ‚Ñ§+ z ‚Ñ§* b') ‚Ñ§* pos (succ (pred (succ a ‚Ñï* succ c))) ‚àé

‚Ñö‚Çô-pos-multiplication-preserves-order : (p q : ‚Ñö‚Çô) ‚Üí (pos 0 , 0) < p ‚Üí (pos 0 , 0) < q ‚Üí (pos 0 , 0) < (p * q)
‚Ñö‚Çô-pos-multiplication-preserves-order (x , a) (y , b) (n‚ÇÅ , g‚ÇÅ , l‚ÇÅ) (n‚ÇÇ , g‚ÇÇ , l‚ÇÇ) = n‚ÇÅ ‚Ñ§* n‚ÇÇ , Œ¥' , Œ≥
 where
  Œ¥' : greater-than-zero (n‚ÇÅ ‚Ñ§* n‚ÇÇ)
  Œ¥' = greater-than-zero-mult-trans n‚ÇÅ n‚ÇÇ g‚ÇÅ g‚ÇÇ

  Œ± : n‚ÇÅ ‚â° x
  Œ± = n‚ÇÅ                            ‚â°‚ü® ‚Ñ§-zero-left-neutral n‚ÇÅ ‚Åª¬π ‚ü©
      pos 0 ‚Ñ§+ n‚ÇÅ                   ‚â°‚ü® ap (Œª - ‚Üí - ‚Ñ§+ n‚ÇÅ) (‚Ñ§-zero-left-is-zero (pos (succ a)) ‚Åª¬π) ‚ü©
      pos 0 ‚Ñ§* pos (succ a) ‚Ñ§+ n‚ÇÅ   ‚â°‚ü® l‚ÇÅ ‚ü©
      x                             ‚àé 

  Œ≤ : n‚ÇÇ ‚â° y
  Œ≤ = n‚ÇÇ                            ‚â°‚ü® ‚Ñ§-zero-left-neutral n‚ÇÇ ‚Åª¬π ‚ü©
      pos 0 ‚Ñ§+ n‚ÇÇ                   ‚â°‚ü® ap (Œª - ‚Üí - ‚Ñ§+ n‚ÇÇ) (‚Ñ§-zero-left-is-zero (pos (succ b)) ‚Åª¬π) ‚ü©
      pos 0 ‚Ñ§* pos (succ b) ‚Ñ§+ n‚ÇÇ   ‚â°‚ü® l‚ÇÇ ‚ü©
      y                             ‚àé

  Œ≥ : (pos 0 ‚Ñ§* pos (succ (pred (succ a ‚Ñï* succ b)))) ‚Ñ§+ n‚ÇÅ ‚Ñ§* n‚ÇÇ ‚â° x ‚Ñ§* y ‚Ñ§* pos 1
  Œ≥ = pos 0 ‚Ñ§* pos (succ (pred (succ a ‚Ñï* succ b))) ‚Ñ§+ n‚ÇÅ ‚Ñ§* n‚ÇÇ ‚â°‚ü® ap (Œª - ‚Üí - ‚Ñ§+ n‚ÇÅ ‚Ñ§* n‚ÇÇ) (‚Ñ§-zero-left-is-zero (pos (succ (pred (succ a ‚Ñï* succ b))))) ‚ü©
      pos 0 ‚Ñ§+ n‚ÇÅ ‚Ñ§* n‚ÇÇ ‚â°‚ü® ‚Ñ§-zero-left-neutral (n‚ÇÅ ‚Ñ§* n‚ÇÇ) ‚ü©
      n‚ÇÅ ‚Ñ§* n‚ÇÇ          ‚â°‚ü® ap‚ÇÇ _‚Ñ§*_ Œ± Œ≤ ‚ü©
      x ‚Ñ§* y            ‚â°‚ü® ‚Ñ§-mult-right-id (x ‚Ñ§* y) ‚ü© 
      x ‚Ñ§* y ‚Ñ§* pos 1   ‚àé

_‚Ñö‚Çô‚â§_ _‚Ñö‚Çô‚â•_ : ‚Ñö‚Çô ‚Üí ‚Ñö‚Çô ‚Üí ùì§‚ÇÄ Ãá
p ‚Ñö‚Çô‚â§ q = (p < q) ‚àî (p ‚â° q)
p ‚Ñö‚Çô‚â• q = q ‚Ñö‚Çô‚â§ p

‚Ñö‚Çô‚â§-is-prop : (p q : ‚Ñö‚Çô) ‚Üí is-prop (p ‚Ñö‚Çô‚â§ q)
‚Ñö‚Çô‚â§-is-prop (x , a) (y , b) = +-is-prop (‚Ñö‚Çô<-is-prop (x , a) (y , b)) ‚Ñö‚Çô-is-set I
 where
  I : (x , a) < (y , b) ‚Üí ¬¨ ((x , a) ‚â° (y , b))
  I (k , g , Œ±) e = zero-not-greater-than-zero (transport (Œª - ‚Üí greater-than-zero -) IV g)
   where
    II : (x ‚â° y) √ó (a ‚â° b)
    II = from-√ó-‚â°' e
    i = pr‚ÇÅ II
    ii = pr‚ÇÇ II
  
    III : (x ‚Ñ§* pos (succ b) ‚Ñ§+ k ‚â° x ‚Ñ§* pos (succ b))
    III = x ‚Ñ§* pos (succ b) ‚Ñ§+ k ‚â°‚ü® Œ± ‚ü©
          y ‚Ñ§* pos (succ a)      ‚â°‚ü® ap‚ÇÇ _‚Ñ§*_ (i ‚Åª¬π) (ap pos (ap succ ii)) ‚ü©
          x ‚Ñ§* pos (succ b)      ‚àé

    IV : k ‚â° pos 0
    IV = ‚Ñ§‚â§-anti-lemma (x ‚Ñ§* pos (succ b)) k III

‚Ñö‚Çô‚â§-trans : (p q r : ‚Ñö‚Çô) ‚Üí p ‚Ñö‚Çô‚â§ q ‚Üí q ‚Ñö‚Çô‚â§ r ‚Üí p ‚Ñö‚Çô‚â§ r
‚Ñö‚Çô‚â§-trans p q r (inl a) (inl b) = inl (‚Ñö‚Çô-trans p q r a b)
‚Ñö‚Çô‚â§-trans p q r (inl a) (inr b) = inl (transport (p <_) b a)
‚Ñö‚Çô‚â§-trans p q r (inr a) (inl b) = inl (transport (_< r) (a ‚Åª¬π) b)
‚Ñö‚Çô‚â§-trans p q r (inr a) (inr b) = inr (a ‚àô b)

{-
third-addition : (pos 1 , 2) + (pos 1 , 2) ‚â° pos 2 , 2
third-addition = {!refl!}
-}

{-

‚Ñö‚Çô-half-addition : ((x , a) : ‚Ñö‚Çô) ‚Üí (x , pred (2 ‚Ñï* succ a)) + (x , pred (2 ‚Ñï* succ a)) ‚Ñö‚Çô‚âà (x , a)
‚Ñö‚Çô-half-addition (x , a) = I
 where
  I : ((x , pred (2 ‚Ñï* succ a)) + (x , pred (2 ‚Ñï* succ a))) ‚Ñö‚Çô‚âà (x , a)
  I = pr‚ÇÅ ((x , pred (2 ‚Ñï* succ a)) + (x , pred (2 ‚Ñï* succ a))) ‚Ñ§*  pos (succ a) ‚â°‚ü® {!!} ‚ü©
      {!!}                                                                       ‚â°‚ü® {!!} ‚ü©
      {!!}                                                                       ‚àé

-}

\end{code}


